$browsers : ie edge firefox chrome opera;

// Usage : @include browsers(ie 9 10) { ... }
// Usage : @include browsers(ie 9, firefox) { ... }
// Usage : @include browsers(ie) { ... }
// Usage : @include browsers(edge 12, ie 11) { ... }

/// @link https://github.com/saadeghi/browser-hack-sass-mixins/blob/master/_hacks.scss

@mixin browsers($args...) {

  // This checks to see if the current selector is html.
  // This can not be converted into a shorthanded if statement.
  // $selector : null;
  // @if not is-selector(html) { $selector : &; }

	$selector : to-string(#{&});
	$space : ' ';

	@if (str-index($selector, 'html')) {
		$selector : string-replace(#{$selector}, 'html', '');
		@if ($selector != 'html') {
			$space : '';
		}
	}

	$not-all : if(is-bool(nth(nth($args, 1),1)), nth(nth($args, 1),1), false);

  @each $settings in _arglist-to-list($args...) {

    $browsers-list : ();
    $versions-list : ();
    $not : $not-all;

    @each $setting in $settings {
      @if is-string($setting) and contains($browsers, $setting) {
        $browsers-list : append($browsers-list, $setting);
      }
      @elseif is-bool($setting) {
        $not : $setting;
      }
      @elseif is-number($setting) == number or is-list($setting){
        @each $version in $setting {
          $versions-list : append($versions-list, $version);
        }
      }
    }

    @if length($browsers-list) > 1 and length($versions-list) > 0 {
      @error 'You can not check the same version for 2 browsers in a single argument. Try seperating the arguments using a comma (,)';
    } @else {
      @if length($browsers-list) > 0 {
        @if length($versions-list) > 0 {
          @each $version in $versions-list {
            @if not $not {
              @at-root html[data-browser^="#{$browsers-list}"][data-browser$='#{$version}'] #{$selector} { @content; }
            } @else {
              @at-root html:not([data-browser^="#{$browsers-list}"][data-browser$='#{$version}']) #{$selector} { @content; }
            }
          }
        } @else {
          @each $browser in $browsers-list {
            @if not $not {
              @at-root html[data-browser^="#{$browser}"]#{$space}#{$selector} { @content; }
              // Fallback hacks should the data-browser attribute not be in the html tag
              @if $browser == edge {
                @supports (-ms-accelerator:true) {
                  #{$selector} {
                    @content;
                  }
                }
              }
              @elseif $browser == ie {
								@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
                  @content;
                }
              }
              @elseif $browser == firefox {
                #{$selector ',  x:-moz-any-link'}{
                  @content;
                }
              }
              @elseif $browser == chrome {
                @media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm) {
                  @content;
                }
              }
              @elseif $browser == safari {
                @supports (overflow:-webkit-marquee) and (justify-content:inherit){
                  #{$selector} {
                    @content;
                  }
                }
              }
            } @else {
              @at-root html:not([data-browser^="#{$browser}"])#{$space}#{$selector} { @content; }
            }
          }
        }
      }
    }
  }
}

@mixin not-browsers($args...) {
	@include browsers(join(true, $args, comma)) { @content };
}

// Usage : @include ie(9 10) { ...; }
// Usage : @include ie { ...; }
@mixin ie($version:null) {
  @include browsers(ie $version) { @content };
}

@mixin edge($version:null) {
  // TODO: When the browser plugin can detect edge version numbers, remove the next line
  @include warning('As of March 2016: The plugin used to detect browser versions can not currently output the Edge browser version.
    This mixin will exclude all version numbers for now.')
  $version : null;
  @include browsers(edge $version) { @content };
}

@mixin safari($version:null) {
  @include browsers(safari $version) { @content };
}

@mixin firefox($version:null) {
  @include browsers(firefox $version) { @content };
}

@mixin chrome($version:null) {
  @include browsers(chrome $version) { @content };
}

@mixin opera($version:null) {
  @include browsers(opera $version) { @content };
}

//////
@mixin not-ie($version:null) {
  @include browsers(ie $version true) { @content };
}

@mixin not-edge($version:null) {
  // TODO: When the browser plugin can detect edge version numbers, remove the next line
  @include warning('As of March 2016: The plugin used to detect browser versions can not currently output the Edge browser version.
    This mixin will exclude all version numbers for now.')
  $version : null;
  @include browsers(edge $version true) { @content };
}

@mixin not-safari($version:null) {
  @include browsers(safari $version true) { @content };
}

@mixin not-firefox($version:null) {
  @include browsers(firefox $version true) { @content };
}

@mixin not-chrome($version:null) {
  @include browsers(chrome $version true) { @content };
}

@mixin not-opera($version:null) {
  @include browsers(opera $version true) { @content };
}
