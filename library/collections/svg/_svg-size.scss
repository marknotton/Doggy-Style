/// Resize an SVG element using it's original dimensions to retain it's aspect ratio
///
/// @author Mark Notton
///
/// @access public
///
/// @param {Number} $original-width - Define the SVG's original width
/// @param {Number} $original-height - Define the SVG's original height
/// @param {Number} $new-width - Define a unitless number to adjust the scale of an SVG.
///                              0.5 is half the original size where 2 is double it's original size.
///                              Using a unit will force the resize of the the element to a specific width,
///                              the height will retain it's existing aspect ratio.
/// @param {Number} $new-height - Define a speicfic height. This will ignore the aspect ratio and force the desired width.
/// @param {Bool|Number|List} $transform-origin - If true, the transform-origin will be placed at the center of the div using px
///                                               You can pass in 2 numbers to define your own Y and X co-ordinates
///                                               Padding in just one number, will apply to both Y and X.
/// @require {Mixin} transform-origin
/// @require {Function} strip
/// @require {Function} is-unit
/// @require {Function} is-null
/// @require {Function} add-unit
///
/// @example scss - Usage
/// svg { @include svg-size(100, 240, 1.5); }
/// svg { @include svg-size(100, 240, 250px); }
///

@mixin svg-size($original-width, $original-height, $new-width:1, $new-height:null, $transform-origin:true) {

  $width : strip($original-width);
  $height : strip($original-height);
  $new-width : to-number($new-width);
	$width-unit : unquote(unit($new-width));
	$height-unit : unquote(if(not is-null($new-height), unit($new-height), $width-unit));

  @if ( not is-unit($new-width) ) {
    $scale : $new-width;
    $new-width : $width * $scale;
    $new-height : $height * $scale;

    width:$new-width + px;
    height:$new-height + px;

  } @else {

    @if (is-null($new-height)) {
      $ratio : if($height <= $width, $height / $width, $width / $height);
      $new-height : strip($new-width) * $ratio;
    }

    width:add-unit($new-width, $width-unit);
    height:add-unit($new-height, $height-unit);

  }

  @if ( $transform-origin ) {
    @if (is-bool($transform-origin) and $transform-origin == true) {
			// TODO: Make this respect other units besides just px
      @include transform-origin(add-unit($new-width/2, px) add-unit($new-height/2, px));
    } @else {
      @include transform-origin($transform-origin);
    }
  }
};
