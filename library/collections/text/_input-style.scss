@mixin input-style($settings : ()) {

  // ------------------------------------------------------------------------ //
  // Default settings that get merged in with the mass passed through.
  // ------------------------------------------------------------------------ //

  $default-settings : (
    note-font-size        : $font-size - 2px,
    note-text-colour      : $black,
    static-colour         : #a9a9a9,
    border-radius         : 0,
    error-colour          : $red,
    success-colour        : $green,
    bar-height            : 2px,
    border-width          : 1,
    border-style          : solid,
    input : (
      height    : 50px,
      font-size : $font-size + px,
      padding   : $gap0 $gap
    ),
    placeholder : (
      style     : halfway,
      padding   : 0 $gap0,
      offset    : $gap0,
      reduction : 0.1
    ),
    active : (
      background-colour  : $white,
      placeholder-colour : primary,
      asterisk-colour    : primary,
      text-colour        : $black,
      note-colour        : #a9a9a9,
      border-colour     : #a9a9a9,
    ),
    inactive : (
      background-colour  : col($white, 0.2),
      placeholder-colour : #a9a9a9,
      asterisk-colour    : #a9a9a9,
      text-colour        : $black,
      note-colour        : #a9a9a9,
      border-colour     : #a9a9a9,
    )
  );

  // ------------------------------------------------------------------------ //
  // All settings exposed
  // ------------------------------------------------------------------------ //

  $settings : map-merge($default-settings, $settings);

  $input-height           : add-unit(map-fetch($settings, input, height));
  $input-padding          : map-fetch($settings, input, padding);
  $input-font-size        : add-unit(map-fetch($settings, input, font-size));
  $input-padding-top      : add-unit(_get-padding($input-padding, top));
  $input-padding-right    : add-unit(_get-padding($input-padding, right));
  $input-padding-bottom   : add-unit(_get-padding($input-padding, bottom));
  $input-padding-left     : add-unit(_get-padding($input-padding, left));

  $placeholder-padding        : map-fetch($settings, placeholder, padding);
  $placeholder-style          : map-fetch($settings, placeholder, style);
  $placeholder-reduction      : map-fetch($settings, placeholder, reduction);
  $placeholder-offset           : add-unit(map-fetch($settings, placeholder, offset));
  $placeholder-padding-top    : add-unit(_get-padding($placeholder-padding, top));
  $placeholder-padding-right  : add-unit(_get-padding($placeholder-padding, right));
  $placeholder-padding-bottom : add-unit(_get-padding($placeholder-padding, bottom));
  $placeholder-padding-left   : add-unit(_get-padding($placeholder-padding, left));

  $note-font-size             : add-unit(map-get($settings, note-font-size));
  $note-text-colour           : map-get($settings, note-text-colour);
  $radius                     : add-unit(map-get($settings, border-radius));
  $form-background            : map-get($settings, form-background-colour);
  $error                      : map-get($settings, error-colour);
  $success                    : map-get($settings, success-colour);
  $bar-height                 : map-get($settings, bar-height);
  $border-width               : add-unit(map-fetch($settings, border-width));
  $border-style               : map-fetch($settings, border-style);

  $active-background      : map-fetch($settings, active, background-colour);
  $active-placeholder     : map-fetch($settings, active, placeholder-colour);
  $active-asterisk        : map-fetch($settings, active, asterisk-colour);
  $active-text            : map-fetch($settings, active, text-colour);
  $active-border-colour   : map-fetch($settings, active, border-colour);

  $inactive-background    : map-fetch($settings, inactive, background-colour);
  $inactive-placeholder   : map-fetch($settings, inactive, placeholder-colour);
  $inactive-asterisk      : map-fetch($settings, inactive, asterisk-colour);
  $inactive-text          : map-fetch($settings, inactive, text-colour);
  $inactive-border-colour : map-fetch($settings, inactive, border-colour);

  // ------------------------------------------------------------------------ //
  // Input field styling
  // ------------------------------------------------------------------------ //

  display:block;
  position:relative;
  background-color:inherit;

  input {
    // If this field is not empty, not in focus, and is invalid... show the status bar;
    &:not([value=""]):not(:focus) {
      &:valid {
        & ~ field-status-bar:before {
          @include var(background-color,$success);
          width:100%;
        }
      }
      &:invalid {
        & ~ field-status-bar:before {
          @include var(background-color,$error);
          width:100%;
        }
      }
    }
    // Don't show the status bar or asterisk if this field is not required
    &:not(:required) ~ field-status-bar, &:not(:required) ~ sup { display:none; }

  }

  label {
    width:100%;
    position:relative;
    display:block;
    background-color:inherit;
    field-placeholder, field-status-bar, field-asterisk {
      position:absolute;
    }
    > *:first-child {
      display:block;
      font-size:$input-font-size;
      padding:$input-padding-top $input-padding-right $input-padding-bottom $input-padding-left;
      border:$border-width $border-style $active-border-colour;
      width:100%; min-height:$input-height;
      @include var(background-color, $active-background);
      @include placeholder(transparent)
      @if strip($radius) != 0 { @include radius($radius); }
      @include transition(background-color border-color color);
      &:not(:required) ~ field-asterisk { display:none; }
      &:valid ~ field-asterisk {
        pointer-events:none;
        &:empty {
          opacity:0;
        }
        > svg { @include var(fill, $inactive-asterisk); }
      }

      // -------------------------------------------------------------------- //
      // Inactive
      // -------------------------------------------------------------------- //
      &:placeholder-shown:not(:focus) {
        border:$border-width $border-style $inactive-border-colour;
        @include var(background-color,$inactive-background);
        @include var(color, $inactive-text);
        & ~ field-placeholder {
          left:$input-padding-left;
          top:$input-height/2;
          @if ( $placeholder-style == outside ) {
            top:$input-height/2 - $placeholder-padding-top/2 + $placeholder-padding-bottom/2;
          }
          @include var(color, $inactive-placeholder);
          padding-left:0; padding-right:0;
          @include transform(y -50%, scale 1);
          &:before {
            opacity:0;
          }
        }
        @if ( $placeholder-style == halfway ) {
          & ~ field-placeholder {
            background-color:transparent;
          }
        }
      }

      @include chrome() {
        // This forces the hover state of the autofill styling to respect the label styling
        &:-webkit-autofill, &:-webkit-autofill:hover, &:-webkit-autofill:focus {
          & ~ field-placeholder { opacity:1; }
          @include var(-webkit-text-fill-color, $active-text);
          -webkit-box-shadow: 0 0 0px 1000px if(is-var($active-background), var($active-background), $active-background) inset;
        }
      }
      @content;
    }
  }

  @if ( $placeholder-style == outside ) {
    margin-top:$placeholder-padding-top; ;
  }

  // -------------------------------------------------------------------- //
  // Note
  // -------------------------------------------------------------------- //

  // Change the font colour if the input-field element has an 'error' class
  &.error field-note { color:$error; }

  field-note {
    display:block;
    position:relative;
    color:$note-text-colour;
    margin-top:$input-padding-top/2;
    padding-left:$input-padding-left;
  }

  // ------------------------------------------------------------------------ //
  // Status Bar - Solid block of colour
  // ------------------------------------------------------------------------ //
  field-status-bar {
    width:100%; height:100%;
    top:0; left:0; display:block;
    pointer-events: none;
    overflow:hidden;
    @include radius($radius);
    &:before {
      content:"";
      height:$bar-height;
      width:0%;
      position:absolute;
      bottom:$border-width; left:0;
      display:block;
      @include var(background-color, $success);
      @include transition(width);
    }
  }

  // ------------------------------------------------------------------------ //
  // Field Placeholder & Asterisk - The background line
  // ------------------------------------------------------------------------ //
  field-placeholder, field-asterisk {

    top:0;

    @include flex-container(center center);
    @include transition(transform background-color padding color opacity left top);

    @if ( $placeholder-style == halfway and strip($border-width) >= 1) {
      &:before {
        content:"";
        display:block;
        position:absolute;
        z-index:-1;
        width:100%;
        top:50%;
        background-color:$active-background;
        @include transition(opacity);
        @if $border-width == 1px {
          height : (1 * $placeholder-reduction) + 1 + px;
        } @elseif $border-width == 2px {
          height : (2 * $placeholder-reduction) + 2 + 1 + px;
        } @else {
          height : ($border-width * $placeholder-reduction + $border-width)
        }
      }
    }
  }

  // ------------------------------------------------------------------------ //
  // Placeholder
  // ------------------------------------------------------------------------ //
  field-placeholder {
    font-size:$input-font-size;
    left:$placeholder-offset;
    pointer-events:none;
    padding:$placeholder-padding-top $placeholder-padding-right $placeholder-padding-bottom $placeholder-padding-left;
    @include y(-50%);
    @include var(color, $active-placeholder);
    @include transform-origin(0 50%);
    @if ( $placeholder-style == halfway ) {
      @include transform(y -50%, scale (1 - $placeholder-reduction));
      left:($placeholder-offset * $placeholder-reduction + $placeholder-offset) + $radius/2;
      padding-right:($placeholder-padding-right * $placeholder-reduction + $placeholder-padding-right);
      padding-left:($placeholder-padding-left * $placeholder-reduction + $placeholder-padding-left);
    } @elseif $placeholder-style == outside {
      @include transform(y -100%, scale (1 - $placeholder-reduction));
    }
  }

  // ------------------------------------------------------------------------ //
  // Required Asterisk and Message
  // ------------------------------------------------------------------------ //
  field-asterisk {

    padding:0 $placeholder-padding-right 0 $placeholder-padding-left;
    font-size:add-unit((strip(to-number($input-font-size))) - (strip(to-number($input-font-size))*$placeholder-reduction)*2);
    @include var(color, $active-asterisk);

    @if ( $placeholder-style == outside ) {
      top:$placeholder-padding-top/2; right:$placeholder-padding-bottom/2;
    }
    @if ( $placeholder-style == halfway ) {
      @include y(-50%);
      top:0; right:$placeholder-padding-right + $radius;
    }

    // Styling if nothing was enetered. Fallback to a static colour inline SVG.
    &:empty {
      @include size(12 + $placeholder-padding-left + $placeholder-padding-right);
      background-image: url("data:image/svg+xml;charset=utf8,%3Csvg version='1.1' style='fill:#{str-replace(to-string(get-var-value(primary)), '#', '%23')}' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3E%3Cpath d='M0,9.4l1.4-4.6c3.2,1.2,5.5,2.2,7,3.1C8,4.1,7.8,1.5,7.8,0h4.4c-0.1,2.1-0.3,4.8-0.7,7.9c2.1-1.1,4.5-2.1,7.1-3.1L20,9.4 c-2.6,0.9-5.1,1.5-7.5,1.8c1.2,1.1,3,3.2,5.2,6.1L14,20c-1.2-1.7-2.6-4-4.1-6.9c-1.5,3-2.8,5.3-3.9,6.9l-3.6-2.7 c2.3-3.1,4-5.1,5-6.1C4.8,10.7,2.3,10.1,0,9.4z'/%3E%3C/svg%3E"), linear-gradient(transparent calc(50% - #{$border-width}), $active-background calc(50% - #{$border-width}),$active-background calc(50% + #{$border-width}), transparent calc(50% + #{$border-width}));;
      background-position:center center;
      background-repeat:no-repeat;
      background-size:calc(100% - #{$placeholder-padding-right*2}) calc(100% - #{$placeholder-padding-right*2}), 100% 100%;
      &:before { display:none; }
    }

    // Styling if an SVG icon is used (assume it's square)
    > svg {
      @include size(12);
      @include transition(fill);
      @include var(fill, $active-asterisk);
    }

    // The required message styling
    &:after {
      position:absolute;
      opacity:0;
      font-family:Arial;
      padding:$placeholder-padding-top/2 $placeholder-padding-right $placeholder-padding-bottom/2 $placeholder-padding-left;
      right:calc(100% - #{$placeholder-offset}); top:50%;
      @if ( $placeholder-style == halfway ) {
        @include var(background-color, $active-background);
      }
      @include flex-container(center center);
      @include transition(opacity);
      @include y(-50%);
      text-align:right;
      white-space:nowrap;
      content:attr(data-notice);
    }
    &:hover:after { opacity:1; }
  }
}
