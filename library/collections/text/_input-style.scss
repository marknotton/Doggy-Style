@mixin input-style($settings : ()) {

  // ------------------------------------------------------------------------ //
  // Default settings that get merged in with the mass passed through.
  // ------------------------------------------------------------------------ //

  $default-settings : (
    note-font-size   : $font-size - 2px,
    note-text-colour : $black,
    static-colour    : #a9a9a9,
    border-radius    : 10,
    error-colour     : $red,
    success-colour   : $green,
    bar-height       : 3px,
    input : (
      height    : 50px,
      types     : email password select search text textarea tel url,
      font-size : $font-size + px,
      padding   : $gap0 $gap
    ),
    placeholder : (
      style     : outside,
      // placeholder-style     : halfway,
      // placeholder-style     : inside,
      padding   : $gap $gap,
      reduction : 0.1
    ),
    active : (
      background-colour  : $white,
      placeholder-colour : #a9a9a9,
      asterisk-colour    : primary,
      text-colour        : $black,
      note-colour        : #a9a9a9,
      border-colour     : #a9a9a9,
      border-width      : 1px,
      border-style      : solid
    ),
    inactive : (
      background-colour  : col($white, 0.5),
      placeholder-colour : #a9a9a9,
      asterisk-colour    : primary,
      text-colour        : $black,
      note-colour        : #a9a9a9,
      border-colour     : #a9a9a9,
      border-width      : 1px,
      border-style      : solid
    )
  );

  // ------------------------------------------------------------------------ //
  // All settings exposed
  // ------------------------------------------------------------------------ //

  $settings : map-merge($default-settings, $settings);

  $input-height           : map-fetch($settings, input, height);
  $input-padding          : map-fetch($settings, input, padding);
  $input-types            : map-fetch($settings, input, types);
  $input-font-size        : map-fetch($settings, input, font-size);
  $input-padding-top      : _get-padding($input-padding, top);
  $input-padding-right    : _get-padding($input-padding, right);
  $input-padding-bottom   : _get-padding($input-padding, bottom);
  $input-padding-left     : _get-padding($input-padding, left);

  $placeholder-padding        : map-fetch($settings, placeholder, padding);
  $placeholder-style          : map-fetch($settings, placeholder, style);
  $placeholder-reduction      : map-fetch($settings, placeholder, reduction);
  $placeholder-padding-top    : _get-padding($placeholder-padding, top);
  $placeholder-padding-right  : _get-padding($placeholder-padding, right);
  $placeholder-padding-bottom : _get-padding($placeholder-padding, bottom);
  $placeholder-padding-left   : _get-padding($placeholder-padding, left);

  $note-font-size         : map-get($settings,   note-font-size);
  $note-text-colour       : map-get($settings,   note-text-colour);
  $radius                 : map-get($settings,   border-radius);
  $error                  : map-get($settings,   error-colour);
  $success                : map-get($settings,   success-colour);
  $bar-height             : map-get($settings,   bar-height);

  $active-background      : map-fetch($settings, active, background-colour);
  $active-placeholder     : map-fetch($settings, active, placeholder-colour);
  $active-asterisk        : map-fetch($settings, active, asterisk-colour);
  $active-text            : map-fetch($settings, active, text-colour);
  $active-border-width    : map-fetch($settings, active, border-width);
  $active-border-style    : map-fetch($settings, active, border-style);
  $active-border-colour   : map-fetch($settings, active, border-colour);

  $inactive-background    : map-fetch($settings, inactive, background-colour);
  $inactive-placeholder   : map-fetch($settings, inactive, placeholder-colour);
  $inactive-asterisk      : map-fetch($settings, inactive, asterisk-colour);
  $inactive-text          : map-fetch($settings, inactive, text-colour);
  $inactive-border-width  : map-fetch($settings, inactive, border-width);
  $inactive-border-style  : map-fetch($settings, inactive, border-style);
  $inactive-border-colour : map-fetch($settings, inactive, border-colour);

  // ------------------------------------------------------------------------ //
  // Active styles
  // ------------------------------------------------------------------------ //

  %active {
    border:$active-border-width $active-border-style $active-border-colour;
    @include var(background-color,$active-background);
    @include var(color, $active-text);
  }

  // ------------------------------------------------------------------------ //
  // Inactive styles
  // ------------------------------------------------------------------------ //

  %inactive {
    border:$inactive-border-width $inactive-border-style $inactive-border-colour;
    @include var(background-color,$inactive-background);
    @include var(color, $inactive-text);
    & + label {
      top:$input-height/2;
      @include transform(y -50%, scale 1);
    }
  }

  // ------------------------------------------------------------------------ //
  // Input field styling
  // ------------------------------------------------------------------------ //

  display:block;
  position:relative;

  input {
    // If this field is not empty, not in focus, and is invalid... show the status bar;
    &:not([value=""]):not(:focus):invalid ~ field-status-bar:before {
      @include var(background-color,$error);
      width:100%;
    }
    // Don't show the status bar or asterisk if this field is not required
    &:not(:required) ~ field-status-bar, &:not(:required) ~ sup { display:none; }

  }

  label {
    width:100%;
    position:relative;
    display:block;
    field-placeholder, field-status-bar, sup {
      position:absolute;
    }
    > *:first-child {
      display:block;
      font-size:$input-font-size;
      padding:$input-padding;
      width:100%; height:$input-height;
      @include placeholder(transparent)
      @if strip($radius) != 0 { @include radius($radius); }
      @include transition(background-color color);
      @content;
    }
  }

  field-note {
    display:block;
    position:relative;
    color:$note-text-colour;
    margin-top:$input-padding-top/2;
  }

  //
  // // ------------------------------------------------------------------------ //
  // // Input fields
  // // ------------------------------------------------------------------------ //
  // @include input-fields(($input-types), false) {
  //   width:100%; height:$input-height;
  //   font-size:$input-font-size;
  //   padding:$input-padding;
  //   @if strip($radius) != 0 { @include radius($radius); }
  //   @include transition(background-color color);
  //   @extend %active;
  //   &:placeholder-shown {
  //     @extend %inctive;
  //
  //     & ~ label:before, & ~ sup:before { opacity:0; }
  //   }
  //   &:focus {
  //     @include var(background-color,$active-background);
  //     & + label {
  //       top:0; @include transform(y -50%, scale (1 - $placeholder-reduction));
  //     }
  //     & ~ label, & ~ sup {
  //       &:before {
  //         opacity:1;
  //       }
  //     }
  //   }
  //   // This forces the hover state of the autofill styling to respect the label position and scale
  //   &:-webkit-autofill, &:-webkit-autofill:hover, &:-webkit-autofill:focus {
  //     @include var(-webkit-text-fill-color, $active-text);
  //     @if is-var($active-background) {
  //       -webkit-box-shadow: 0 0 0px 1000px var($active-background) inset;
  //     } @else {
  //       -webkit-box-shadow: 0 0 0px 1000px $active-background inset;
  //     }
  //     & ~ label { opacity:1; }
  //   }
  //
  //   // Style changes when individual field is valid
  //   &:valid {
  //     & ~ field-status-bar:before { width:100%; }
  //     & ~ sup {
  //       pointer-events:none;
  //       opacity:0;
  //       @include var(color, $active-placeholder);
  //     }
  //   }
  //   @content;
  // }
  //
  // &[data-type="select"] {
  //   select {
  //     &:invalid {
  //       & ~ field-status-bar:before { width:0 $imp; }
  //       & ~ sup:after {
  //       }
  //     }
  //   }
  // }
  //
  //
  // // Change the font colour if the input-field element has an 'error' class
  // &.error field-status-text { color:$error; }
  //
  //
  // // ------------------------------------------------------------------------ //
  // // Status Text - Optional notes that are positioned beneath the input
  // // ------------------------------------------------------------------------ //
  // field-status-text {
  //   position:relative;
  //   display:block;
  //   width:100%;
  //   @include var(color, $active-text);
  //   padding:5px $input-padding-left 0 $input-padding-left;
  //   @include font-size($note-font-size);
  //   a {
  //     @include var(color);
  //     &:hover { text-decoration: underline;}
  //   }
  // }
  //
  // ------------------------------------------------------------------------ //
  // Status Bar - Solid block of colour
  // ------------------------------------------------------------------------ //
  field-status-bar {
    width:100%; height:100%;;
    background-color:rc();
    top:0; left:0; display:block;
    pointer-events: none;
    overflow:hidden;
    @include radius($radius);
    &:before {
      content:"";
      height:if(strip($bar-height) == 1, add-unit(2), $bar-height);
      width:0%;
      position:absolute;
      bottom:0; left:0;
      display:block;
      @include var(background-color, $success);
      @include transition(width);
    }
  }

  // ------------------------------------------------------------------------ //
  // Label & Sup - The background line
  // ------------------------------------------------------------------------ //
  field-placeholder, sup {

    position:absolute;
    display:block;

    @include transition(transform background-color color opacity left top);

    @if ( $placeholder-style == halfway ) {
      &:before {
        content:"";
        display:block;
        position:absolute;
        z-index:-1;
        opacity:1;
        height:$active-border-width;
        top:50%;
        @include var(background-color, $active-background);
        @include transition(opacity);
      }
    }
  }

  // ------------------------------------------------------------------------ //
  // Label which also acts like a placeholder
  // ------------------------------------------------------------------------ //
  field-placeholder {
    left:$placeholder-padding-left;
    top:0;
    @include y(-50%)l
    // pointer-events: none;
    // font-size:$input-font-size;
    // top:0;
    // @include var(color, $active-placeholder);
    // @include transform-origin(0 50%);
    // @if $placeholder-style == halfway {
    //   @include transform(y -50%, scale (1-$placeholder-reduction));
    // } @elseif $placeholder-style == outside {
    //   @include transform(y -100%, scale (1-$placeholder-reduction));
    // }
    // &:before {
    //   // Because we're reducing the label by 20% via scale, we have to increase
    //   // the background line width by the same amount.
    //   width:calc(100% + #{($padding-left/10*$placeholder-reduction + $padding-left)*2});
    //   left:- ($padding-left/10*$placeholder-reduction + $padding-left);
    //   // And line height if it's set to 1px, otherwise increase by 20% aswell
    //   height:if($active-border-width == 1px, 2px, (($active-border-width/10 * $placeholder-reduction) + $active-border-width));
    // }
  }

  // ------------------------------------------------------------------------ //
  // Sup - Required Asterisk and Message
  // ------------------------------------------------------------------------ //
  sup { display:none;
  //   position:absolute;
  //   top:0; right:$padding-left; bottom:100%;
  //   font-size:26px;
  //   line-height:12px;
  //   @include y(50%);
  //   @include var(color, $active-asterisk);
  //   &:hover:after { opacity:1; }
  //   &:before {
  //     width:calc(100% + #{$padding-left*2});
  //     right:- $padding-left;
  //   }
  //   &:after {
  //     position:absolute;
  //     opacity:0;
  //     font-size:12px;
  //     @include var(background-color, $active-background);
  //     padding-left:$padding-left; padding-right:$padding-left;
  //     right:100%; top:50%;
  //     @include transition(opacity);
  //     @include y(-50%);
  //     text-align:right;
  //     white-space:nowrap;
  //     content:attr(data-notice);
  //   }
  }
}
