@mixin var($property, $variable:primary, $opacity:1, $important:false) {

  $variable-value : $variable;
  $fallback-value : null;

  // Allow the third param (opacity) to accept booleans.
  // This will work in place of the $importnat param.
  @if is-bool($opacity) and $opacity == true {
    $important : $opacity;
    $opacity : 1;
  }

  // If varuable is a standard colour, just use that colour as normal. Opacity is not used.
  @if is-colour($variable) {

    @if is-hex($variable) {
      $variable-value : rgba($variable, $opacity);
    } @else {
      $variable-value : $variable;
    }

  } @else {

    // Check the variables map to help generate a fallback colour
    $fallback-value : get-variable-colour-value($variable, $opacity);

    @if is-var($variable) {

      // If a hardcoded 'var(--XXX)' is passed, extract the variable name and check if
      // it's poart of the variables map. If it is, use this hardcoded colour as a fallback.
      // Add opacity is one if provided.

      @if $support-css-variable-alpha-colours {

        $variable-value : rgba($variable, $opacity);

      } @else {

        @if not is-null($fallback-value) {
          $variable-value : str-replace($variable, ')', ', ' + $fallback-value + ')');
        } @else {
          $variable-value : $variable;
        }

      }

    } @else {

      // If a string was passed as the string. Assume this is a shorthand to search
      // the variables map for the right variable then apply the fallback.

      @if $support-css-variable-alpha-colours {
        $variable-value : rgba(unquote('var(--' + $variable + ')'), $opacity);
      } @else {

        @if not is-null($fallback-value) {
          $variable-value : unquote('var(--' + $variable + ', '+ $fallback-value +')');
        } @else {
          $variable-value : unquote('var(--' + $variable + ')');
        }
      }
    }

  }

  @if ( not is-null($fallback-value) ) {
    #{$property} : $fallback-value if($important, !important, null);
  }

  #{$property} : $variable-value if($important, !important, null);

}
