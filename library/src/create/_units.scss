////////////////////////////////////////////////////////////////////////////////
// Units
////////////////////////////////////////////////////////////////////////////////

@use 'sass:string';

// This units creator will render six positive and six negative sass variables for 
// gaps, spacers, and gutters relative to the basev values defined below.

// =============================================================================
// Base Values 
// =============================================================================

/// @see https://codepen.io/marknotton/pen/ExPbNGe

// These three values will act a constant baseline for all following unit delcarations.

// Gaps must use an absolute and static 'px' unit. It should not be relative to any
// parent container and is not intended for font sizes, so you should not use 'rem' or 'em'. 
$default-gap : 15px;
$base-gap : $default-gap !default;

// Spacers must use a 'vh' unit so they are relative to the users viewport height-wise.
// They should primarily be used for the top and bottom margins on a component level.
$default-spacer : 4vh;
$base-spacer : $default-spacer !default; 

// Gutters must use a 'vw' unit so they are relative to the users viewport width-wise. 
// They should primarily be used for the left and right padding or margin on a parent level.
// As a suggestion, this gutter constant should be half the size of the spacer value.
$default-gutter : 3vw;
$base-gutter : $default-gutter !default; 

// =============================================================================
// Asbolute Units 
// =============================================================================

// Gaps ------------------------------------------------------------------------
// Gaps are an absolute unit (px) intended to be used on individual elements within a componented. 
// The aim is to retain consistant spacing amongst block, inline, table and group html elements.

@function gap($amount : 1) {
  @if ( $amount == 1 ) { 
    @return var(--gap); 
  } @else { 
    @return calc(var(--gap) * #{$amount}); 
  }
}

$gap0 : gap(0.5) !default;  $gap0- : gap(-0.5) !default;
$gap  : gap(1)   !default;  $gap-  : gap(-1)   !default;
$gap2 : gap(2)   !default;  $gap2- : gap(-2)   !default;
$gap3 : gap(3)   !default;  $gap3- : gap(-3)   !default;
$gap4 : gap(4)   !default;  $gap4- : gap(-4)   !default;
$gap5 : gap(5)   !default;  $gap5- : gap(-5)   !default;
$gap6 : gap(6)   !default;  $gap6- : gap(-6)   !default;

// =============================================================================
// Relative Units 
// =============================================================================


@function _dynamic-unit($custom-property, $amount : 1, $min : $gap, $negative : false, $use-clamp : true, $growth : 6) {

  // Calc Method
  $result : calc((#{$custom-property} * #{$amount}) + #{if($min == 0, 0px, $min)});
  
  // Clamp Method
  @if ( $use-clamp ) {   
    $result : clamp(#{$min} * #{$amount}, #{$custom-property} * #{$amount}, #{$min} * #{$amount * $growth});
  } 

  @if ( $negative ) {
    $result : calc(-1 * #{$result});
  }

  @return $result;

} 

// Spacers ------------------------------------------------------------------------
// Spacers are a relative viewport height (vh) unit intended to be used on a componented level.
// The aim is to retain consistant top and bottom spacing amongst 'section' and 'custom' elements.
// Spacers will equate to something like: `($spacer * x) + $gap`. 
// The '$gap' is added so that vh spacing will never scale too close to 0px. 

@function spacer($amount : 1, $min : $gap, $negative : false, $use-clamp : true ) {
  @if ( $amount == 0) { $amount : 0.5; }
  @return _dynamic-unit(var(--spacer), $amount, $min, $negative, $use-clamp);
}

$spacer0 : var(--spacer0) !default; $spacer0- : var(--spacer0-) !default;
$spacer  : var(--spacer1) !default; $spacer-  : var(--spacer1-) !default;
$spacer2 : var(--spacer2) !default; $spacer2- : var(--spacer2-) !default;
$spacer3 : var(--spacer3) !default; $spacer3- : var(--spacer3-) !default;
$spacer4 : var(--spacer4) !default; $spacer4- : var(--spacer4-) !default;
$spacer5 : var(--spacer5) !default; $spacer5- : var(--spacer5-) !default;
$spacer6 : var(--spacer6) !default; $spacer6- : var(--spacer6-) !default;

// Gutters ------------------------------------------------------------------------
// Gutters are a relative viewport width (vw) unit intended to be used on a parent level;
// for example, a wrapper container or body with nested components. 
// The aim is to retain consistant left and right spacing amongst 'section' and 'custom' elements.
// Gutters will equate to something like: `($gutter * x) + $gap`. 
// The '$gap' is added so that vw spacing will never scale too close to 0px. 

@function gutter($amount : 1, $min : $gap, $negative : false, $use-clamp : true) {
  @if ( $amount == 0) { $amount : 0.5; }
  @return _dynamic-unit(var(--gutter), $amount, $min, $negative, $use-clamp);
}

$gutter0 : var(--gutter0) !default; $gutter0- : var(--gutter0-) !default;
$gutter  : var(--gutter1) !default; $gutter-  : var(--gutter1-) !default;
$gutter2 : var(--gutter2) !default; $gutter2- : var(--gutter2-) !default;
$gutter3 : var(--gutter3) !default; $gutter3- : var(--gutter3-) !default;
$gutter4 : var(--gutter4) !default; $gutter4- : var(--gutter4-) !default;
$gutter5 : var(--gutter5) !default; $gutter5- : var(--gutter5-) !default;
$gutter6 : var(--gutter6) !default; $gutter6- : var(--gutter6-) !default;
