////////////////////////////////////////////////////////////////////////////////
// ========================================================================== //
// Doggistyle v0.3.0                                              #doggistyle //
// ========================================================================== //
////////////////////////////////////////////////////////////////////////////////
//
// Thank you for taking the time to expriment and use this library.
// I've spent many years aggrigating, writing, and compiling Doggistyle into
// what I hope to be a valuable toolbox of features for your project.
// Installation and documention can be found here:
// @see https://github.com/marknotton/doggistyle
//
// The MIT License (MIT) - Mark Notton
//
////////////////////////////////////////////////////////////////////////////////

@charset "UTF-8";

@mixin doggistyle{

	// Global Settings -----------------------------------------------------------

	@include settings;

	@include set-custom-properties;

	// Normalisers ---------------------------------------------------------------

	@if ( $normalise ) {
		@include normalise;
	} @elseif ( $normalise-emailers ) {
		@include normalise-emailers;
	}
}

// Doggistyle alias for the easily offended ------------------------------------

@mixin d-style { @include doggistyle() }

////////////////////////////////////////////////////////////////////////////////
/// Cast to boolean                                                     #to-bool
////////////////////////////////////////////////////////////////////////////////

/// @name Cast To Boolean
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @group helpers-casts
/// @param {*} $value - Value to cast
/// @return {bool}

@function to-bool($value) {
  @if not $value or $value == "" or $value == 0 {
    @return false;
  }

  @return true;
}

////////////////////////////////////////////////////////////////////////////////
/// Cast to colour                                                    #to-colour
////////////////////////////////////////////////////////////////////////////////

/// @name Cast to colour
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @group helpers-casts
/// @param {*} $value - Value to cast
/// @return {color | null}

@function to-colour($value) {
  @if type-of($value) == "color" {
    @return $value;
  }

  @if type-of($value) != "string" {
    //@warn "Could not cast `#{inspect($value)}` to color.";
    @return null;
  }

  $value-lower: to-lower-case($value);
  $colors: transparent black silver gray white maroon red purple fuchsia green lime olive yellow navy blue teal aqua aliceblue antiquewhite aqua aquamarine azure beige bisque black blanchedalmond blue blueviolet brown burlywood cadetblue chartreuse chocolate coral cornflowerblue cornsilk crimson cyan darkblue darkcyan darkgoldenrod darkgray darkgreen darkgrey darkkhaki darkmagenta darkolivegreen darkorange darkorchid darkred darksalmon darkseagreen darkslateblue darkslategray darkslategrey darkturquoise darkviolet deeppink deepskyblue dimgray dimgrey dodgerblue firebrick floralwhite forestgreen fuchsia gainsboro ghostwhite gold goldenrod gray green greenyellow grey honeydew hotpink indianred indigo ivory khaki lavender lavenderblush lawngreen lemonchiffon lightblue lightcoral lightcyan lightgoldenrodyellow lightgray lightgreen lightgrey lightpink lightsalmon lightseagreen lightskyblue lightslategray lightslategrey lightsteelblue lightyellow lime limegreen linen magenta maroon mediumaquamarine mediumblue mediumorchid mediumpurple mediumseagreen mediumslateblue mediumspringgreen mediumturquoise mediumvioletred midnightblue mintcream mistyrose moccasin navajowhite navy oldlace olive olivedrab orange orangered orchid palegoldenrod palegreen paleturquoise palevioletred papayawhip peachpuff peru pink plum powderblue purple red rosybrown royalblue saddlebrown salmon sandybrown seagreen seashell sienna silver skyblue slateblue slategray slategrey snow springgreen steelblue tan teal thistle tomato turquoise violet wheat white whitesmoke yellow yellowgreen;
  $keywords: ();

  // Filling $keywords with stringified color keywords
  @each $color in $colors {
    $keywords: append($keywords, $color + "");
  }

  // Deal with inherit keyword
  @if $value-lower == "inherit" {
    @return unquote($value);
  }

  // Deal with color keywords
  @if index($keywords, $value-lower) {
    @return nth($colors, index($keywords, $value-lower));
  }

  // Deal with hexadecimal triplets
  @else if str-slice($value-lower, 1, 1) == "#" {
    @return string-to-hex($value);
  }

  // Deal with rgb(a) colors
  @else if str-slice($value-lower, 1, 3) == "rgb" {
    @return string-to-rgb($value);
  }

  // Deal with hsl(a) colors
  @else if str-slice($value-lower, 1, 3) == "hsl" {
    @return string-to-hsl($value);
  }

  // Return value
  @else {
    @if $warnings { @warn "Could not cast `#{inspect($value)}` to color."; }
    @return null;
  }
}

/// To Color ========================================================= #to-color
/// @alias to-colour
/// @access public
/// @require {function} to-colour
/// @return {colour}

@function to-color($value) {
  @return to-colour($value);
}

////////////////////////////////////////////////////////////////////////////////
/// Cast to length                                                    #to-length
////////////////////////////////////////////////////////////////////////////////

/// Add `$unit` to `$value`
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
/// @return {Number} - `$value` expressed in `$unit`

@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }

  @return $value * map-get($units, $unit);
}

////////////////////////////////////////////////////////////////////////////////
/// Cast to list                                                        #to-list
////////////////////////////////////////////////////////////////////////////////

/// @name Cast to list
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @group helpers-casts
/// @param {*} $value - Value to cast
/// @param {String} $keep ("both") - whether to keep `keys`, `values` or `both` when casting a map
/// @return {list}

@function to-list($value, $keep: "both") {
  $keep: if(index("keys" "values" "both", $keep), $keep, "both");

  @if is-var($value) {
    @return string-explode(is-var($value), ', ');
  }

  @if type-of($value) == "map" {
    $keys: ();
    $values: ();
    @each $key, $val in $value {
      $keys: append($keys, $key);
      $values: append($values, $val);
    }

    @if $keep == "keys" {
      @return $keys;
    }
    @else if $keep == "values" {
      @return $values;
    }
    @else {
      @return zip($keys, $values);
    }
  }

  @return if(type-of($value) != list, ($value,), $value);
}

////////////////////////////////////////////////////////////////////////////////
/// Cast to map                                                          #to-map
////////////////////////////////////////////////////////////////////////////////

/// @name Cast to map
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @group helpers-casts
/// @param {*} $value - Value to cast
/// @return {map}

@function to-map($value) {
  @if type-of($value) == "list" {
    $map: ();

    @if length($value) > 1 {
      @for $i from 1 through length($value) {
        $map: map-merge($map, ($i: nth($value, $i)));
      }
    }

    @return $map;
  }

  @return if(type-of($value) != map, (1: $value), $value);
}

////////////////////////////////////////////////////////////////////////////////
/// Cast to number                                                    #to-number
////////////////////////////////////////////////////////////////////////////////

/// Cast a value to a number if possible or return 0
/// @author Hugo Giraudel
/// @link https://www.sassmeister.com/gist/9fa19d254864f33d4a80
/// @group helpers-casts
/// @param {string} $value
/// @return {number}

// @function to-number($value) {
//   @if type-of($value) == 'number' {
//     @return $value;
//   } @else if type-of($value) != 'string' {
//     $_: log('Value for `to-number` should be a number or a string.');
//   }
//
//   $result: 0;
//   $digits: 0;
//   $minus: str-slice($value, 1, 1) == '-';
//   $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
//
//   @for $i from if($minus, 2, 1) through str-length($value) {
//     $character: str-slice($value, $i, $i);
//
//     @if not (index(map-keys($numbers), $character) or $character == '.') {
//       @return to-length(if($minus, -$result, $result), str-slice($value, $i))
//     }
//
//     @if $character == '.' {
//       $digits: 1;
//     } @else if $digits == 0 {
//       $result: $result * 10 + map-get($numbers, $character);
//     } @else {
//       $digits: $digits * 10;
//       $result: $result + map-get($numbers, $character) / $digits;
//     }
//   }
//
//   @return if($minus, -$result, $result);;
// }
//
$sc-constants: (
  'decimal-space': ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9'),
  'unit': ('px', 'cm', 'mm', '%', 'ch', 'pc', 'in', 'em', 'rem', 'pt', 'ex', 'vw', 'vh', 'vmin', 'vmax', 'ms', 's', 'deg', 'rad', 'grad', 'turn', 'Hz', 'kHz', 'dpi', 'dpcm', 'dppx'),
  'unit-value': (1px, 1cm, 1mm, 1%, 1ch, 1pc, 1in, 1em, 1rem, 1pt, 1ex, 1vw, 1vh, 1vmin, 1vmax, 1ms, 1s, 1deg, 1rad, 1grad, 1turn, 1Hz, 1kHz, 1dpi, 1dpcm, 1dppx)
);

/// Default return value for the `to-number(..)` function when running in
/// non-strict mode.
/// @access public
/// @type Number
$sc-non-strict-default-number: 0 !default;

/// Default return value for the `to-color(..)` function when running in
/// non-strict mode.
/// @access public
/// @type Number
$sc-non-strict-default-color: transparent !default;
/// Internal map for dynamically accessing default values for non-strict mode.
/// @access private
/// @type Map
$sc-non-strict-defaults: (
  'number': $sc-non-strict-default-number,
  'color': $sc-non-strict-default-color,
);

/// Helper function to throw when running in strict mode, or warn and return
/// default value for expected type when running in non-strict mode.
/// @param {*} $value
/// @param {String} $expected-type

@function _sc-throw($value, $expected-type) {
  $return-value: map-get($sc-non-strict-defaults, $expected-type);
  @return $return-value;
}

/// Tries to find a unit that would match a CSS length
/// @access private
/// @param {Number} $number - number
/// @param {String}   $unit - potential unit
/// @return {Number} length (0 if cast failed)

@function _sc-unit($number, $unit) {
  $units: map-get($sc-constants, 'unit-value');
  $index: index(map-get($sc-constants, 'unit'), $unit);

  @if not $index {
    @return _sc-throw($number, 'number');
  }

  @return ($number * nth($units, $index));
}


/// Cast a value to a number if possible or return 0
///
/// @author Hugo Giraudel
///
/// @link https://github.com/HugoGiraudel/SassyCast
///
/// @access public
///
/// @param {string} $value
///
/// @return {number}

@function to-number($value) {
  $type: type-of($value);

  // If the value is already a number, we can safely return it.
  @if ($type == 'number') {
    @return $value;
  }

  // If the value is the `true` boolean, we return 1.
  @if ($value == true)  {
    @return 1;
  }

  // If the value is the `false` boolean, we return 0.
  @if ($value == false) {
    @return 0;
  }

  // If the type is not a string, there is no way we can convert it to a number,
  // so we warn and return the default number value (or throw in strict mode).
  @if ($type != 'string') {
    @return _sc-throw($value, 'number');
  }

  // At this point we have discarded all the edge cases so we can start trying
  // to cast the value into a number.
  $pointer: 1;
  $result: 0;
  $first-character: str-slice($value, $pointer, $pointer);
  $allowed-first-character: join(('-', '.'), map-get($sc-constants, 'decimal-space'));

  // We perform an early check for errors. If value starts with neither a number
  // nor a minus sign, it cannot be casted to a number. Therefore we warn and
  // return the default number value (or throw in strict mode).
  @if not index($allowed-first-character, $first-character) {
    @return _sc-throw($value, 'number');
  }

  // In case the value starts with a dot, we assume it is a float and pad it
  // with a zero.
  @if ($first-character == '.') {
    $value: '0' + $value;
  }

  // We find the integer part of the value.
  $find-integer: find-integer($value, $pointer);
  $pointer: nth($find-integer, 1);
  $result:  nth($find-integer, 2);

  // If there still is a dot, it means we have to check for the digits part of
  // the value.
  @if (str-slice($value, $pointer, $pointer) == '.') {
    $find-digits: find-digits($value, $pointer);
    $pointer: nth($find-digits, 1);
    $digits:  nth($find-digits, 2);
    $result: ($result + $digits);
  }

  // If the first character is a minus symbol, it means the number is negative
  // so we can multiply it per -1.
  @if ($first-character == '-') {
    $result: ($result * -1);
  }

  // If we are still not done with the evaluation, it means there could be a CSS
  // unit, so we check for it.
  @if ($pointer <= str-length($value)) {
    $result: _sc-unit($result, str-slice($value, $pointer));
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Cast to string                                                    #to-string
////////////////////////////////////////////////////////////////////////////////

/// @name Cast To String
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @group helpers-casts
/// @param {*} $value - value to cast
/// @return {string}

@function to-string($value) {
  @return if(type-of($value) != string, inspect($value), $value);
}

////////////////////////////////////////////////////////////////////////////////
/// Brightness                                                       #brightness
////////////////////////////////////////////////////////////////////////////////
///
/// Calculates a colours brightness
///
/// @author David Halford
///
/// @access private
///
/// @group helpers-colours
///
/// @link http://codepen.io/davidhalford/pen/wlDxL?editors=1100
///
/// @return {number}

@function brightness($colour) {
  @return abs(round((red($colour) * 299) + (green($colour) * 587) + (blue($colour) * 114) / 1000));
}

/// Compares contrast of a given colour and returns the most appropriate given colour that contrasts it.
///
/// @author David Halford
///
/// @access public
///
/// @link http://codepen.io/davidhalford/pen/wlDxL?editors=1100
///
/// @param {color} $colour - Define a colour that you want to check is dark or light
///
/// @param {list | colour} - Define up to two seperate colours. Each one will be checked for their lightness or darkness
///    If one of the colours is not dark enough it will revert to black;
///    If the other colour is not light enough it will revert to white;
///
/// @require {function} is-colour
/// @require {function} is-dark
/// @require {function} is-light
/// @require {function} brightness
/// @require {function} lightness
///
/// @return {number}
///
/// @example {scss} - Usage
///   color : colour-contrast(red, purple yellow);
///
/// @example {scss} - Output
///   color : yellow;

@function colour-contrast($colour, $text-colours:null) {

  $dark-text : black;
  $light-text : white;

  $colour : get-variable-colour-value($colour);

  @if is-colour($colour) {

    @each $setting in $text-colours {
      @if is-colour($setting) {
        @if $dark-text == black {
          $dark-text: $setting;
        }
        @elseif $light-text == white {
          $light-text: $setting;
        }
      }
    }

    $dark-text : if(is-dark($dark-text), $dark-text, black);
    $light-text : if(is-light($light-text), $light-text, white);

    @return if(brightness($colour) <  lightness(), $light-text, $dark-text);

  } @else {

    @return $dark-text;
  }
}

/// @alias contrasting-colour
///
/// @access public
///
/// @require {function} contrasting-colour
///
/// @return {color}

@function color-contrast($colour, $light:white, $dark:dark) {
  @return colour-contrast($colour, $light, $dark);
}

/// An alternative to the native rgba function. With a few extra checks.
///
/// @author Mark Notton
///
/// @access public
///
/// @param {color} Hex colour
///
/// @require {function} percent-to-decimal
///
/// @param {opacity} $opacity
///   This can be as a percentage or a standard single decimal unit.
///
/// @return {color}
///

@function colour($colour:random-colour(), $opacity:1) {

  @if str-index(#{$colour}, 'rgba') {
    @return $colour;
  }
  @else {
    @return rgba($colour, percent-to-decimal($opacity));
  }
}

/// @alias colour
///
/// @access public
///
/// @require {function} colour
///
/// @return {bool}colour

@function color($colour:random-colour(), $opacity:1) {
  @return colour($colour, $opacity);
}


/// @alias colour
///
/// @access public
///
/// @require {function} colour
///
/// @return {bool}

@function col($colour:random-colour(), $opacity:1) {
  @return colour($colour, $opacity);
}

////////////////////////////////////////////////////////////////////////////////
/// Get Colour Value                                           #get-colour-value
////////////////////////////////////////////////////////////////////////////////
///
/// Cast a stringified number / stringified percentage into number type
///
/// @author Hugo Giraudel
///
/// @link https://github.com/HugoGiraudel/SassyCast
///
/// @access private
///
/// @group helpers-colours
///
/// @param {string} $string - string
///
/// @return {number} - unitless number or percentage
///
/// @require {function} to-number

@function get-colour-value($string) {
  $first: str-slice($string, 1, 1);

  @if $first == '.' {
    $string: '0' + $string;
  }

  $last: str-slice($string, -1, -1);

  @return if($last == '%', to-number(str-slice($string, 1, -2), 2) * 1%, to-number($string));
}

/// Get Color Value =========================================== #get-color-value
///
/// @alias get-colour-value
///
/// @access public
///
/// @group helpers-colours
///
/// @require {function} get-colour-value
///
/// @return {colour}

@function get-color-value($string) {
  @return get-colour-value($string);
}

////////////////////////////////////////////////////////////////////////////////
/// Get Variable Colour Value                         #get-variable-colour-value
////////////////////////////////////////////////////////////////////////////////
///
/// @access public
///
/// @group helpers-colours
///
/// @require {function} get-variable-colour-value
///
/// @return {colour}

@function get-variable-colour-value($colour, $opacity:1) {

  @if not is-colour($colour) and variable-exists(variables) {

    $value : map-get($variables, get-var-variable($colour));

    @if not is-null($value) {

      @if is-list($value) {
        $red:   nth($value, 1);
        $green: nth($value, 2);
        $blue:  nth($value, 3);
        $value : rgba($red, $green, $blue, $opacity);
      }

      $colour : $value;
    }

  }

  @return $colour;

}

///  Get Variable Color Value ======================== #get-variable-color-value
///
/// @alias get-variable-colour-value
///
/// @access public
///
/// @group helpers-colours
///
/// @require {function} get-variable-colour-value
///
/// @return {colour}

@function get-variable-color-value($colour, $opacity:1) {
  @return get-variable-colour-value($colour, $opacity);
}

////////////////////////////////////////////////////////////////////////////////
/// Gradient Properties                                     #gradient-properties
////////////////////////////////////////////////////////////////////////////////
///
// Add each argument into a single comma delimited list
///
/// @group helpers-colours
///

@function gradient-properties($args...) {
  $properties : ();

  $args: if(length($args) > 0, $args, null);

  @for $i from 1 through length($args) {
    $properties : append($properties, nth($args, $i), comma);
  }

  @return $properties;
}

////////////////////////////////////////////////////////////////////////////////
/// Hash Fix                                                           #hash-fix
////////////////////////////////////////////////////////////////////////////////
///
/// For reasons specific to Firefox (currently version 45),
/// SVG's require all hash symbols to be replaced with '%23'. This includes hex
/// colours and <use> xlinks This function will find and replace that hash
/// symbol with the appropriate new string (which also works in other browsers)
///
/// @author Mark Notton
///
/// @access private
///
/// @group helpers-colours
///
/// @link http://stackoverflow.com/questions/28588050/how-to-use-a-hex-value-for-svg-in-firefox#answer-28588194
///
/// @return {string} - Without "#" as the first character

@function hash-fix($string) {
  @if get-var-value($string) {
    @return str-replace(to-string(get-var-value($string)), '#', '%23');
  } @else {
    @return if(is-first-character($string, '#'), str-replace(#{$string}, '#', '%23'), $string);
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Hexadecimal to Decimal                                           #hex-to-dec
////////////////////////////////////////////////////////////////////////////////
///
/// Convert an hexadecimal number to a decimal number
///
/// @author Hugo Giraudel
///
/// @link https://github.com/HugoGiraudel/SassyCast
///
/// @access private
///
/// @group helpers-colours
///
/// @param {string} $string - string
///
/// @param {string} $string - hexadecimal value
///
/// @return {number} - decimal number

@function hex-to-dec($string){
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $string: to-lower-case($string);
  $length: str-length($string);

  $dec: 0;
  @for $i from 1 through $length {
    $factor: 1 + ( 15 * ( $length - $i ));
    $index: index($hex, str-slice($string, $i, $i));
    $dec: $dec + $factor * ($index - 1);
  }

  @return $dec;
}

////////////////////////////////////////////////////////////////////////////////
/// Hexadecimal to RGBA                                             #hex-to-rgba
////////////////////////////////////////////////////////////////////////////////
///
/// @group helpers-colours
///

@function hex-to-rgba($colour, $opacity:1) {

  @if is-hex($colour) {

    $red:   red($colour);
    $green: green($colour);
    $blue:  blue($colour);

    @return unquote("rgba(#{$red}, #{$green}, #{$blue}, #{$opacity})");

  } @else {

    @return $colour;

  }

}

////////////////////////////////////////////////////////////////////////////////
/// Lightness                                                         #lightness
////////////////////////////////////////////////////////////////////////////////
///
/// A smart calculation to what lightness is
///
/// @notice This could just be a variable, but for potential future minipulation I've left it as a function
///
/// @author David Halford
///
/// @access private
///
/// @group helpers-colours
///
/// @link http://codepen.io/davidhalford/pen/wlDxL?editors=1100
///
/// @return {number}

@function lightness() {
  @return round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000)/2;
}

////////////////////////////////////////////////////////////////////////////////
/// Check                                                                 #check
////////////////////////////////////////////////////////////////////////////////

/// If a value does not exist or is invalid, revert to a fallback value
/// @name Check
/// @author Mark Notton
/// @group helpers-checks
/// @param {*} $unit - The unit you want to check exists and is valid. Normally an nth list item or variable.
/// @param {*} $fallback - If the first parameter doesn't exist or isn't valid, revert back to this fallback
/// @param {string} $check - Check for a certain type of condition. Default is number.
///   Accepted check types : angel, duration, false, frequency, integer, length, number, percentage, position, pseudo, sudo, resolution, time
/// @require {function} is-absolute-length
/// @require {function} is-angel
/// @require {function} is-bool
/// @require {function} is-colour
/// @require {function} is-duration
/// @require {function} is-false
/// @require {function} is-frequency
/// @require {function} is-integer
/// @require {function} is-length
/// @require {function} is-list
/// @require {function} is-map
/// @require {function} is-null
/// @require {function} is-number
/// @require {function} is-percentage
/// @require {function} is-position
/// @require {function} is-pseudo
/// @require {function} is-relative-length
/// @require {function} is-resolution
/// @require {function} is-string
/// @require {function} is-time
/// @require {variable} warnings
/// @return {*}

@function check($value, $fallback, $check:number) {
  @if index(angel duration false frequency integer length number percentage position pseudo sudo resolution time string bool boolean colour color list map null, $check) {
    @if $check == angel     and is-angel($value)
    or $check == duration   and is-duration($value)
    or $check == false      and is-false($value)
    or $check == frequency  and is-frequency($value)
    or $check == integer    and is-integer($value)
    or $check == length     and is-length($value)
    or $check == number     and is-number($value)
    or $check == percentage and is-percentage($value)
    or $check == position   and is-position($value)
    or $check == pseudo     and is-pseudo($value)
    or $check == sudo       and is-sudo($value)
    or $check == resolution and is-resolution($value)
    or $check == string     and is-string($value)
    or $check == bool       and is-bool($value)
    or $check == boolean    and is-boolean($value)
    or $check == color      and is-color($value)
    or $check == colour     and is-colour($value)
    or $check == list       and is-list($value)
    or $check == map        and is-map($value)
    or $check == null       and is-null($value) {
      @return $value;
    } @else {
      @return $fallback;
    }
  } @else {
    @if $warnings { @warn "#{$check} is not a valid type check. Returning the initial value: #{$value}"; }
    @return $value;
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Absolute Length                                          #is-absolute-length
////////////////////////////////////////////////////////////////////////////////

/// Checks to see if value is a type of unit that can't be manipulated relative
/// to parent elements
/// @name Absolute Length
/// @author Hugo Giraudel
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
/// @access public
/// @group helpers-checks
/// @require {function} is-number
/// @require {variable} $abolute-lengths
/// @return {bool}

@function is-absolute-length($value) {
  @return is-number($value) and index($absolute-lengths, unit($value)) != null;
}

////////////////////////////////////////////////////////////////////////////////
/// Angle                                                              #is-angel
////////////////////////////////////////////////////////////////////////////////

/// Checks to see if value ends with an angle
/// @author Hugo Giraudel
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
/// @access public
/// @group helpers-checks
/// @require {function} is-number
/// @require {variable} angel-types
/// @return {bool}

@function is-angle($value) {
  @return is-number($value) and index($angel-types, unit($value)) != null;
}

////////////////////////////////////////////////////////////////////////////////
/// Arglist                                                          #is-arglist
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a arglist
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-arglist($value) {
  @return type-of($value) == 'arglist';
}

////////////////////////////////////////////////////////////////////////////////
/// Boolean                                                          #is-boolean
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a boolean
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-boolean($value) {
  @return type-of($value) == 'bool';
}

/// Bool ============================================================== #is-bool
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-bool($value) {
  @return type-of($value) == 'bool';
}

////////////////////////////////////////////////////////////////////////////////
/// Calc                                                                #is-calc
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a calc
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-calc($value) {
  @return is-string($value) and str-slice(#{$value}, 0, 4) == 'calc';
}

////////////////////////////////////////////////////////////////////////////////
/// Colour                                                            #is-colour
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a colour
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-colour($value) {
  @return type-of($value) == 'color';
}

/// Color ============================================================ #is-color
///
/// @alias is-colour
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-colour
///
/// @return {bool}

@function is-color($value) {
  @return is-colour($value);
}

////////////////////////////////////////////////////////////////////////////////
/// Dark                                                                #is-dark
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if a colour is dark
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} brightness
/// @require {function} lightness
///
/// @return {bool}

@function is-dark($colour) {
  @return brightness($colour) < lightness();
}

////////////////////////////////////////////////////////////////////////////////
/// Duration                                                        #is-duration
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a number
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-time
///
/// @return {bool}

@function is-duration($value) {
  @return is-time($value);
}

////////////////////////////////////////////////////////////////////////////////
/// Ease                                                                #is-ease
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if string is an ease
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} contains
/// @require {function} is-string
///
/// @return {bool}

@function is-ease($string) {
  @return is-string($string) and contains(str-slice(#{$string}, 0, 4), ease line step cubi init)
}

////////////////////////////////////////////////////////////////////////////////
/// False                                                              #is-false
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is any type of false
///
/// @access public
/// @group helpers-checks
/// @return {bool}

@function is-empty($value) {
  @return not not index(false null 0 off def, $value);
}


/// @access public
/// @group helpers-checks
/// @return {bool}

@function is-false($value) {
  @return not not index(false null 0 off def, $value);
}

////////////////////////////////////////////////////////////////////////////////
/// Extension                                                      #is-extension
////////////////////////////////////////////////////////////////////////////////
///
/// If the end of a string matches the given extension, return the extension.
/// Otherwise return false.
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {Bool String}

@function is-extension($string, $extension) {

  $string : to-string($string);

  $extension : to-lower-case($extension);

  $explode : string-explode($string, '.');

  @if $extension == to-lower-case(last($explode)) {
    @return $extension;
  } @else {
    @return false;
  }

}

////////////////////////////////////////////////////////////////////////////////
/// First Character                                          #is-first-character
////////////////////////////////////////////////////////////////////////////////
///
/// Compare the first character of a string
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-first-character($string, $character) {
  @return str-slice(#{$string}, 1, 1) == #{$character};
}

////////////////////////////////////////////////////////////////////////////////
/// Frequency                                                      #is-frequency
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value ends with a frequency
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-number
///
/// @return {bool}

@function is-frequency($value) {
  @return is-number($value) and index('Hz' 'kHz', unit($value)) != null;
}

////////////////////////////////////////////////////////////////////////////////
/// Function                                                        #is-function
////////////////////////////////////////////////////////////////////////////////
///
/// Explodes a function into a list.
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} to-number
/// @require {function} is-string
/// @require {function} string-explode
///
/// @example scss - Usage
///   @debug is-function(rotate(45deg));
///   @debug is-function(transform);
///
/// @example scss - Output
///   (rotate, 45deg)
///   false
///
/// @return {bool | list} If value is not a string or does not fit the 'function'
/// syntax, return false. Otherwise, return a list with the 'function' name and
/// the 'value' that was passed.

@function is-function($function) {

  @if is-string($function) {

    $first-brace : str-index($function, '(');
    $last-brace : str-index($function, ')');

    @return $first-brace and $last-brace;

  } @else {

    @return false;

  }
}

////////////////////////////////////////////////////////////////////////////////
/// Hexadecimal                                                          #is-hex
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see value is a hexidecimal string
///
/// @author Mark Notton
///
/// @access public
///
/// @return {bool}

@function is-hex($value) {
  @return is-colour($value) and string-starts-with(to-string($value), '#');
}

////////////////////////////////////////////////////////////////////////////////
/// Important                                                      #is-important
////////////////////////////////////////////////////////////////////////////////

/// Checks to see value is important
/// @author Mark Notton
/// @access public
/// @group  helpers-checks
/// @return {bool}

@function is-important($value, $bool:false) {
  $_imp : null;

  @if ( contains((important, !important), $value) or (is-bool($value) and $value == true) ) {
    @if $bool {
      $_imp : true;
    } @else {
      $_imp : $imp;
    }
  }

  @return $_imp;
}

////////////////////////////////////////////////////////////////////////////////
/// Integer                                                          #is-integer
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a rounded number
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-number
///
/// @return {bool}

@function is-integer($value) {
  @return is-number($value) and round($value) == $value;
}

////////////////////////////////////////////////////////////////////////////////
/// Length                                                            #is-length
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value ends with any type of unit
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-relative-length
/// @require {function} is-absolute-length
///
/// @return {bool}

@function is-length($value) {
  @return is-relative-length($value) or is-absolute-length($value);
}

////////////////////////////////////////////////////////////////////////////////
/// Light                                                              #is-light
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if a colour is light
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} brightness
/// @require {function} lightness
///
/// @return {bool}

@function is-light($colour) {
  @return brightness($colour) > lightness();
}

////////////////////////////////////////////////////////////////////////////////
/// List                                                                #is-list
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a list
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-list($value) {
  @return type-of($value) == 'list';
}

////////////////////////////////////////////////////////////////////////////////
/// Map                                                                  #is-map
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a map
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-map($value) {
  @return type-of($value) == 'map';
}

////////////////////////////////////////////////////////////////////////////////
/// Null                                                                #is-null
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is null
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-null($value) {
  @return type-of($value) == 'null';
}

////////////////////////////////////////////////////////////////////////////////
/// Number                                                            #is-number
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a number. This includes units (except for calc)
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-number($value, $check-strings:true, $allow-units:true) {

  @if $check-strings and type-of($value) == 'string' {

    // Early check to dismiss this as a number if any spaces are found in the string.
    // TODO: considor replacing this with a string-replace to remove all spaces instead.
    @if str-index($value, ' ') != null {
      @return false;
    }

    // If a '-' symbol exists but it's not the first character, return false
    @if str-index($value, '-') != null and str-slice($value, 1, 1) != '-' {
      @return false;
    }

    // Remove percentage symbol.
    $value : str-replace($value, '%', '');

    // Remove units from the value string. It had to be done this way, because
    // you can't strip units from a string.
    @if $allow-units and not unitless(to-number($value)) {
      $unit : null;

      @each $u in $all-units {
        @if string-ends-with($value, $u) {
          $unit : $u;
        }
      }
      $value : str-replace($value, $unit, '');
    }

    $exploaded-value : _string-explode($value, '');
    $allowed-characters : "-" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";

    // Return false is any of the chacters are not in the list of allowed numbers
    @each $character in $exploaded-value {
      @if (index($allowed-characters, $character) != null) == false {
        @return false;
      }
    }

    @return true;

  } @else {

    @return type-of($value) == 'number';

  }
}

////////////////////////////////////////////////////////////////////////////////
/// Percentage                                                    #is-percentage
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a percentage
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-percentage($value) {
  @return is-number($value) and unit($value) == '%';
}

////////////////////////////////////////////////////////////////////////////////
/// Position                                                        #is-position
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a direction position
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-length
/// @require {function} is-percentage
///
/// @return {bool}

@function is-position($value) {
  @return is-length($value) or is-percentage($value) or index('top' 'right' 'bottom' 'left' 'center', $value) != null;
}

////////////////////////////////////////////////////////////////////////////////
/// Pseudo                                                            #is-pseudo
////////////////////////////////////////////////////////////////////////////////
///
/// Check to see is a 'before' of 'after' pseudo has been passed
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-pseudo($pseudo) {
  @return index(before after, $pseudo);
}

/// Sudo ============================================================== #is-sudo
///
/// @alias is-pseudo
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-pseudo
///
/// @return {bool}

@function is-sudo($pseudo) {
  @return is-pseudo($pseudo)
}

////////////////////////////////////////////////////////////////////////////////
/// Relative Length                                          #is-relative-length
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a type of unit that can be manipulated relative to parent elements
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-number
/// @require {variable} relative-lengths
///
/// @return {bool}

@function is-relative-length($value) {
  @return is-number($value) and index($relative-units, unit($value)) != null;
}

////////////////////////////////////////////////////////////////////////////////
/// Resolution                                                    #is-resolution
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value ends with a type of resolution
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-number
///
/// @return {bool}

@function is-resolution($value) {
  @return is-number($value) and index('dpi' 'dpcm' 'dppx', unit($value)) != null;
}

////////////////////////////////////////////////////////////////////////////////
/// Selector                                                        #is-selector
////////////////////////////////////////////////////////////////////////////////
///
/// Check to see if and ampersand refers to a particular string
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-selector($value) {
  @return #{&} == #{$value};
}

////////////////////////////////////////////////////////////////////////////////
/// String                                                            #is-string
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a string
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @return {bool}

@function is-string($value) {
  @return type-of($value) == 'string';
}

////////////////////////////////////////////////////////////////////////////////
/// Selector                                                        #is-selector
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value ends with 's' or 'ms'
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-number
///
/// @return {bool}

@function is-time($value) {
  @return is-number($value) and index('ms' 's', unit($value)) != null;
}

////////////////////////////////////////////////////////////////////////////////
/// Unit                                                                #is-unit
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value ends with any type of unit
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/advanced-type-checking/
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} is-relative-length
/// @require {function} is-absolute-length
///
/// @return {bool}

@function is-unit($value) {
  @return unit($value) != '';
}

////////////////////////////////////////////////////////////////////////////////
/// Var                                                                  #is-var
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if value is a custom element (css variable). If it is, find and return the variable string
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-checks
///
/// @require {function} _string-starts-with
///
/// @return {string|bool}

@function is-var($value) {

  @if string-starts-with(quote($value), 'var(--') {

    $value : str-replace($value, 'var(--', '');
    $value : str-replace($value, ')', '');

    @return $value;

  } @else {

    @return false;

  }

}

////////////////////////////////////////////////////////////////////////////////
/// Add                                                                     #add
////////////////////////////////////////////////////////////////////////////////
///
/// Extends the default append function, with an option to ignore the
/// first list value if it is null
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-lists
///
/// @param (list) $list
/// @param (mix) $val
/// @param (string) $seperator
/// @param (bool) $remove-first-if-null
///
/// @return {list}

@function add($val, $list, $seperator:space, $remove-first-if-null:true) {

  @if length($list) == 1 and is-null(nth($list, 1)) and $remove-first-if-null == true {
    $list : remove-nth($list, 1);
  }

  @return append($list, $val, $seperator);
}

////////////////////////////////////////////////////////////////////////////////
/// Arglist to List                                             #arglist-to-list
////////////////////////////////////////////////////////////////////////////////
///
/// Casts a list of arguments into a single list of lists.
///
/// @author Mark Notton
///
/// @access private
///
/// @group helpers-lists
///
/// @argument {arglist} $values
///
/// @example scss - Usage
///   arglist-to-list((foo bar), lorem ipsum, 1 2 3, red);
///
/// @example scss - Output
///   ((foo bar) (lorem ipsum) (1 2 3) (red));
///
/// @return {list}

@function arglist-to-list($args...) {

  $args: if(length($args) > 0, $args, null);

  $lists : ();

  @for $i from 1 through length($args) {

    $setting : nth($args, $i);
    @if is-arglist($setting) {
      @each $set in $setting {
        $lists : append($lists, $set);
      }
    } @else {
      $lists : append($lists, $setting);
    }
  }

  @return $lists;
}

////////////////////////////////////////////////////////////////////////////////
/// Contains                                                           #contains
////////////////////////////////////////////////////////////////////////////////
///
/// Checks to see if a given value exists within a list
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-lists
///
/// @param {list} $list - List to be crossed referenced to
///
/// @param {string | number | list} $values - These are the values that will be checked within the list from the first param.
///   All list and value items will be cast to strings. Specificially useful is a list of numbers are compared
///   to a list of stringed numbers for example.
///
/// @param {bool} $recursive - If a list is being cross referenced to another list, this function will
///   return true if just one of the items are found. If $recursive is true, then this function will
///   only return true if ALL the list values are found within the other list.
///
/// @example scss - Usage
///   $list1 : contains(a b c d, a);
///   $list2 : contains(a b c d, a b);
///   $list3 : contains(a b c d, a b f);
///   $list4 : contains(a b c d, a b f, true);
///
/// @example scss - Output
///   $list1 : true;
///   $list2 : true;
///   $list3 : true;
///   $list4 : false;
///
/// @return {bool}

@function contains($list, $values, $recursive:false) {

  @if is-string($values) or is-number($values) or is-list($values) or $recursive {
    // Convert all list and values items to strings.
    $temp-list : list-items-to-strings($list);
    $temp-values : list-items-to-strings($values);

    @if $recursive {

      @if length($values) == length($list) {

        @each $value in $temp-values {
          @if not index($temp-list, $value) {
            @return false;
          }
        }
        @return true;
      } @else {
        @return false;
      }

    } @else {

      @each $value in $temp-list {
        @if index($temp-values, $value) {
          @return true;
        }
      }

      @return false;
    }
  } @else {

    @return false;
  }
}

////////////////////////////////////////////////////////////////////////////////
/// First                                                                 #first
////////////////////////////////////////////////////////////////////////////////
///
/// Simple function for targeting the first list item
///
/// @author Hugo Giraudel
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#selecting-values-from-list
///
/// @access public
///
/// @group helpers-lists
///
/// @param {list}
///
/// @return {list}

@function first($list) {
  @if length($list) >= 1 {
    @return nth($list, 1);
  } @else {
    @return null;
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Function To List                                           #function-to-list
////////////////////////////////////////////////////////////////////////////////
///
/// Convert a function to a list format.
/// Designed so that Bourbon and other framework syntaxes can be combined with my own.
///
/// @author Mark Notton
///
/// @access public
///
/// @return {list}
///
/// @group helpers-lists
///

@function function-to-list($function, $separator:space) {

  $function-list : ();

  @if is-string($function) {

    $first-brace : str-index($function, '(');
    $last-brace : str-index($function, ')');

    @if $first-brace and $last-brace {
      // Gets everything before the first open bracket
      $function-name : str-slice($function, 1, $first-brace - 1);

      // Adds the function name to functions-list
      $function-list : append($function-list, $function-name, $separator);

      // Gets everything after the first open bracket, and before the last closed bracket
      $function-value : str-slice($function, $first-brace + 1, $last-brace - 1);

      // Explode the values into a list, delimated by a comma
      $values : _string-explode($function-value);

      // Add each value to the function list
      @each $value in $values {

        $value : if(is-number($value), to-number($value), $value);

        $function-list : append($function-list, $value, $separator);
      }

      // Return the function to list cast
      @return $function-list;

    } @else {

      // If the first argument passed isn't determined to be a function, the original function will be returned.
      @return $function;

    }
  } @else {

    // If the first argument passed isn't determined to be a function, the original function will be returned.
    // Try casting the function to a string first
    @return $function;

  }
}

////////////////////////////////////////////////////////////////////////////////
/// Insert Nth                                                       #insert-nth
////////////////////////////////////////////////////////////////////////////////
///
/// Insert a value at nth index in a list
///
/// @author Hugo Giraudel
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#adding-values-to-a-list
///
/// @access public
///
/// @group helpers-lists
///

@function insert-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @if $warnings {
      @warn "$index: #{quote($index)} is not a number for `insert-nth`.";
    }
  }

  @else if $index < 1 {
    @if $warnings {
      @warn "List index 0 must be a non-zero integer for `insert-nth`";
    }
  }

  @else if $index > length($list) {
    @if $warnings {
      @warn "List index is #{$index} but list is only #{length($list)} item long for `insert-nth'.";
    }
  }

  @else {
    $result: ();

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Last                                                                   #last
////////////////////////////////////////////////////////////////////////////////
///
/// Simple function for targeting the last list item
///
/// @author Hugo Giraudel
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#selecting-values-from-list
///
/// @access public
///
/// @group helpers-lists
///

@function last($list) {
  @return nth($list, length($list));
}

////////////////////////////////////////////////////////////////////////////////
/// List Items To Strings                                 #list-items-to-strings
////////////////////////////////////////////////////////////////////////////////
///
/// @group helpers-lists
///

@function list-items-to-strings($list, $seperator:auto) {
  $temp-list : $list;
  $list : ();
  @each $value in $temp-list {
    $list : append($list, to-string($value), $seperator);
  }
  @return $list;
}

////////////////////////////////////////////////////////////////////////////////
/// List Items To Strings                                 #list-items-to-strings
////////////////////////////////////////////////////////////////////////////////
///
/// Turn non comma delimited list into comma delimited list
///
/// @group helpers-lists
///

@function list-undelimited-to-comma-delimited($list) {
  @if ( length($list) == 1 and is-list($list) ) {
    @return list-items-to-strings(nth($list, 1), comma);
  } @else {
    @return $list;
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Merge                                                                 #merge
////////////////////////////////////////////////////////////////////////////////
///
/// Merge any number of lists together
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-lists
///
/// @param (arglist) $lists - Add as many lists that you are want to merge. Separate lists should be comma-delimited.
///
/// @example scss - Usage
///   $list1 : a b c;
///   $list2 : 1 2 3;
///   $new-list : merge($list1, $list2);
///
/// @example scss - Usage
///   $new-list : (a b c 1 2 3);
///
/// @return {list}

@function merge($lists...) {

  $new-list : ();

  @each $lists in arglist-to-list($lists...) {
    @each $list in $lists {
      $new-list : join($new-list, $list);
    }
  }

  @return $new-list;
}

////////////////////////////////////////////////////////////////////////////////
/// Prepend                                                             #prepend
////////////////////////////////////////////////////////////////////////////////
///
/// Add an item to the begining of a list
///
/// @author Hugo Giraudel
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#adding-values-to-a-list
///
/// @access public

@function prepend($list, $value, $seporator:auto) {
  @return join($value, $list, $seporator);
}

////////////////////////////////////////////////////////////////////////////////
/// Remove Nth                                                       #remove-nth
////////////////////////////////////////////////////////////////////////////////
///
/// Remove nth item from a list
///
/// @author Hugo Giraudel
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#removing-values-from-list
///
/// @access public
///
/// @example scss - Usage
///   $list: a, b, z, c, d, e, f;
///   $new-list: remove-nth($list,   3);
///   $new-list: remove-nth($list,   0);
///   $new-list: remove-nth($list,  -2);
///   $new-list: remove-nth($list, -10);
///   $new-list: remove-nth($list, 100);
///   $new-list: remove-nth($list, zog);
///
/// @example scss - Output
///   $new-list: a, b, c, d, e, f
///   $new-list: error
///   $new-list: a, b, z, c, d, f
///   $new-list: error
///   $new-list: error
///   $new-list: error
///

@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) != number {
    @if $warnings {
      @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
    }
  }

  @else if $index == 0 {
    @if $warnings {
      @warn "List index 0 must be a non-zero integer for `remove-nth`.";
    }
  }

  @else if abs($index) > length($list) {
    @if $warnings {
      @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
    }
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i != $index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Remove                                                               #remove
////////////////////////////////////////////////////////////////////////////////
///
/// Remove an item from a list
///
/// @author Hugo Giraudel
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#removing-values-from-list
///
/// @example scss - Usage
///   $list: a, b z, c, z, d, z, e, f;
///   $new-list: remove($list, z);
///   $new-list: remove($list, z, true);
///
/// @example scss - Output
///   $new-list: a, b z, c, d, e, f;
///   $new-list: a, b, c, d, e, f;
///

@function remove($list, $value, $recursive: false, $separator:auto) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive), $separator);
    }

    @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i), $separator);
    }
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Replace Nth                                                     #replace-nth
////////////////////////////////////////////////////////////////////////////////
///
/// Replace a value at nth index in a list
///
/// @author Hugo Giraudel
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#replacing-values-from-list
///
/// @example scss - Usage
///   $list: a, b, z, d, e, f;
///   $new-list: replace-nth($list,   3, c);
///   $new-list: replace-nth($list,   0, c);
///   $new-list: replace-nth($list,  -2, c);
///   $new-list: replace-nth($list, -10, c);
///   $new-list: replace-nth($list, 100, c);
///   $new-list: replace-nth($list, zog, c);
///
/// @example scss - Output
///   $new-list: a, b, c, d, e, f
///   $new-list: error
///   $new-list: a, b, c, d, z, f
///   $new-list: error
///   $new-list: error
///   $new-list: error
///

@function replace-nth($list, $index, $value) {
  $result: null;

  @if type-of($index) != number {
    @if $warnings {
      @warn "$index: #{quote($index)} is not a number for `replace-nth`.";
    }
  }

  @else if $index == 0 {
    @if $warnings {
      @warn "List index 0 must be a non-zero integer for `replace-nth`.";
    }
  }

  @else if abs($index) > length($list) {
    @if $warnin  gs {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `replace-nth`."  ;
  }
  }

  @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i == $index {
        $result: append($result, $value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Replace                                                             #replace
////////////////////////////////////////////////////////////////////////////////
///
/// Replacing values in a list
///
/// @author Hugo Giraudel
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#replacing-values-from-list
///
/// @example scss - Usage
///   $list: a, b, r, a, c a, d a, b, r, a;
///   $new-list1: replace($list, a, u);
///   $new-list2: replace($list, a, u, true);
///
/// @example scss - Output
///   $new-list1: u, b, r, u, c a, d a, b, r, u;
///   $new-list2: u, b, r, u, c u, d u, b, r, u;
///

@function replace($list, $old-value, $new-value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, replace(nth($list, $i), $old-value, $new-value, $recursive));
    }

    @else {
      @if nth($list, $i) == $old-value {
        $result: append($result, $new-value);
      }

      @else {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Reverse                                                             #reverse
////////////////////////////////////////////////////////////////////////////////
///
/// Reverse a lsit
///
/// @author Hugo Giraudel
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#miscellaneous
///
/// @example scss - Usage
///   $list: a, b, c d e, f, g, h;
///   $new-list: reverse($list);
///   $new-list: reverse($list, true);
///
/// @example scss - Output
///   $list: a, b, c d e, f, g, h;
///   $new-list: h, g, f, c d e, b, a
///   $new-list: h, g, f, e d c, b, a
///

@function reverse($list, $recursive: false) {
   $result: ();

   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));
      }

      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }

   @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Shift                                                                 #shift
////////////////////////////////////////////////////////////////////////////////
///
/// Shift the index of a list
///
/// @author Ana Tudor
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#miscellaneous
///
/// @example scss - Usage
///   $list: a, b, c, d, e, f;
///   $new-list: loop($list, 1);
///   $new-list: loop($list, -3);
///
/// @example scss - Output
///   $new-list: f, a, b, c, d, e
///   $new-list: d, e, f, a, b, c
///

@function loop($list, $value: 1) {
  $result: ();

  @for $i from 0 to length($list) {
    $result: append($result, nth($list, ($i - $value) % length($list) + 1));
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Slice                                                                 #slice
////////////////////////////////////////////////////////////////////////////////
///
/// Slice a list
///
/// @author Hugo Giraudel
///
/// @group helpers-lists
///
/// @link http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/#miscellaneous
///
/// @example scss - Usage
///   $list: a, b, c, d, e, f;
///   $new-list: slice($list, 3, 5);
///   $new-list: slice($list, 4, 4);
///   $new-list: slice($list, 5, 3);
///   $new-list: slice($list, -1, 10);
///
/// @example scss - Output
///   $new-list: c, d, e
///   $new-list: d
///   $new-list: error
///   $new-list: error
///

@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @if $warnings {
      @warn "Either $start or $end are not a number for `slice`.";
    }
  }

  @else if $start > $end {
    @if $warnings {
      @warn "The start index has to be lesser than or equals to the end index for `slice`.";
    }
  }

  @else if $start < 1 or $end < 1 {
    @if $warnings {
      @warn "List indexes must be non-zero integers for `slice`.";
    }
  }

  @else if $start > length($list) {
    @if $warnings {
      @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
    }
  }

  @else if $end > length($list) {
    @if $warnings {
      @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
    }
  }

  @else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Sort                                                                   #sort
////////////////////////////////////////////////////////////////////////////////
///
/// Sort list in a particular order.
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/sorting-function/
///
/// @access public
///
/// @group helpers-lists
///
/// @param {list} $list - list to sort
///
/// @param {list} $order - Order to use for sorting - Default is $default-order;
///
/// @require {function} string-compare
/// @require {variable} default-order
///
/// @return {list}

@function sort($list, $order: "!" "#" "$" "%" "&" "'" "(" ")" "*" "+" "," "-" "." "/" "[" "]" "^" "_" "{" "|" "}" "~" "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f" "g" "h" "i" "j" "k" "l" "m" "n" "o" "p" "q" "r" "s" "t" "u" "v" "w" "x" "y" "z") {
  $less:  ();
  $equal: ();
  $large: ();

  @if length($list) > 1 {
    $seed: nth($list, ceil(length($list) / 2));

    @each $item in $list {
      @if $item == $seed {
        $equal: append($equal, $item, list-separator($list));
      } @else if string-compare($item, $seed, $order) {
        $less: append($less, $item, list-separator($list));
      } @else if not string-compare($item, $seed, $order) {
        $large: append($large, $item, list-separator($list));
      }
    }

    @return join(join(sort($less, $order), $equal), sort($large, $order));
  }

  @return $list;
}

////////////////////////////////////////////////////////////////////////////////
/// Map Deep Get                                                   #map-deep-get
////////////////////////////////////////////////////////////////////////////////
///
/// Fetch nested keys in a map
///
/// @author Hugo Giraudel
///
/// @link http://www.sitepoint.com/extra-map-functions-sass
///
/// @access public
///
/// @group helpers-maps
///
/// @param (map) $map - Usually a variable name
///
/// @param (arglist) $keys - With comma delimination write the path to the disired map element
///
/// @return {*}
///
/// @example scss - Usage
/// $foo: (
///   bar: (
///     lorem : (
///       test1: #dcfac0,
///       test2: #00968b,
///     ),
///     ipsom: (
///       test1: #f4fac7,
///       test2: #c2454e,
///     )
///   )
/// );
/// color: map-fetch($foo, bar, lorem, test1);
///
/// @example css - Output
/// color:#dcfac0;
///

@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

/// @alias map-deep-get
///
/// @access public
///
/// @require {function} map-deep-get
///
/// @return {*}

@function map-fetch($map, $keys...) {
  @return map-deep-get($map, $keys...);
}

////////////////////////////////////////////////////////////////////////////////
/// Map Deep Merge                                               #map-deep-merge
////////////////////////////////////////////////////////////////////////////////

/// @name Map Deep Merge
/// @author Zsolt Pentz
/// @see https://medium.com/@pentzzsolt/a-non-destructive-map-merge-function-for-sass-f91637f87b2e

@function map-deep-merge($parent-map, $child-map) {
	$result: $parent-map;
	@each $key, $value in $child-map {
		@if (not map-has-key($result, $key)) or (type-of(map-get($result, $key)) != type-of($value)) or (not (type-of(map-get($result, $key)) == map and type-of($value) == map)) {
			$result: map-merge($result, ($key: $value));
		}
		@else {
			$result: map-merge($result, ($key: map-deep-merge(map-get($result, $key), $value)));
		}
	}
	@return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Map Deep Set                                                   #map-deep-set
////////////////////////////////////////////////////////////////////////////////
///
/// Update a key deeply nested
///
/// @author Hugo Giraudel
///
/// @link http://www.sitepoint.com/extra-map-functions-sass
///
/// @access public
///
/// @group helpers-maps
///
/// @param {map} $map - Map to update
///
/// @param {arglist} $keys - Keys to access to value to update
///
/// @param {*} $value - New value (last member of `$keys`)
///
/// @return {map} - Updated map

@function map-deep-set($map, $keys.../*, $value */) {
  $map-list: ($map,);
  $result: null;

  @if length($keys) == 2 {
    @return map-merge($map, (nth($keys, 1): nth($keys, -1)));
  }

  @for $i from 1 through length($keys) - 2 {
    $map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
  }

  @for $i from length($map-list) through 1 {
    $result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
  }

  @return $result;
}

////////////////////////////////////////////////////////////////////////////////
/// Map Depth                                                         #map-depth
////////////////////////////////////////////////////////////////////////////////
///
/// Compute the maximum depth of a map
///
/// @author Hugo Giraudel
///
/// @link http://www.sitepoint.com/extra-map-functions-sass
///
/// @access public
///
/// @group helpers-maps
///
/// @param {map} $map
///
/// @return {number} max depth of `$map`

@function map-depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(map-depth($value) + 1, $level);
    }
  }

  @return $level;
}

////////////////////////////////////////////////////////////////////////////////
/// Map Extend                                                       #map-extend
////////////////////////////////////////////////////////////////////////////////
///
/// jQuery-style extend function
///
/// @author Hugo Giraudel
///
/// @link http://www.sitepoint.com/extra-map-functions-sass
///
/// @access public
///
/// @group helpers-maps
///
/// @param {map} $map - first map
///
/// @param {arglist} $maps - other maps
///
/// @param {bool} $deep - recursive mode
///
/// @return {map}

@function map-extend($map, $maps.../*, $deep */) {
  $last: nth($maps, -1);
  $deep: $last == true;
  $max: if($deep, length($maps) - 1, length($maps));

  // Loop through all maps in $maps...
  @for $i from 1 through $max {
    // Store current map
    $current: nth($maps, $i);

    // If not in deep mode, simply merge current map with map
    @if not $deep {
      $map: map-merge($map, $current);
    } @else {
      // If in deep mode, loop through all tuples in current map
      @each $key, $value in $current {

        // If value is a nested map and same key from map is a nested map as well
        @if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
          // Recursive extend
          $value: map-extend(map-get($map, $key), $value, true);
        }

        // Merge current tuple with map
        $map: map-merge($map, ($key: $value));
      }
    }
  }

  @return $map;
}

////////////////////////////////////////////////////////////////////////////////
/// Map Has Keys                                                   #map-has-keys
////////////////////////////////////////////////////////////////////////////////
///
/// Test if map got all `$keys` at first level
///
/// @author Hugo Giraudel
///
/// @link http://www.sitepoint.com/extra-map-functions-sass
///
/// @access public
///
/// @group helpers-maps
///
/// @param {map} $map - Map
///
/// @param {arglist} $keys - Keys to test
///
/// @return {bool}

@function map-has-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
  }

  @return true;
}

////////////////////////////////////////////////////////////////////////////////
/// Map Has Nested Keys                                     #map-has-nested-keys
////////////////////////////////////////////////////////////////////////////////
///
/// Test if map got all `$keys` nested with each others
///
/// @author Hugo Giraudel
///
/// @link http://www.sitepoint.com/extra-map-functions-sass
///
/// @access public
///
/// @group helpers-maps
///
/// @param {map} $map - Map
///
/// @param {arglist} $keys - Keys to test
///
/// @return {bool}

@function map-has-nested-keys($map, $keys...) {
  @each $key in $keys {
    @if not map-has-key($map, $key) {
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return true;
}

////////////////////////////////////////////////////////////////////////////////
/// Map Set                                                             #map-set
////////////////////////////////////////////////////////////////////////////////
///
/// A quick way of adding a key and value to the end of a map
///
/// @author Mark Notton
///
/// @group helpers-maps
///
/// @return {map}

@function map-set($map, $key, $value) {
  @return map-merge($map, ($key: $value));
}

////////////////////////////////////////////////////////////////////////////////
/// Map Zip                                                             #map-zip
////////////////////////////////////////////////////////////////////////////////
///
/// An equivalent of `zip` function but for maps.
/// I wrote my own version of this before realising Hugo had done something similar.
/// I have kept the name, but used my own.
///
/// @author Mark Notton
///
/// @link http://www.sitepoint.com/extra-map-functions-sass
/// @link http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
///
/// @access public
///
/// @group helpers-maps
///
/// @param {list} $list1 - Keys for map
///
/// @param {list} $list2 - Values for map
///
/// @param {bool} $swappable - Swap variables around so list1 has the most values. Default is true.
///
/// @return {map} Freshly created map

@function map-zip($list1, $list2, $swappable:true) {

  $map : ();

  $list1-size : length($list1);
  $list2-size : length($list2);

  $count : if($list1-size < $list2-size, $list1-size, $list2-size);


  @if ($list1-size < $list2-size and $swappable) {
    $temp : $list1;
    $list1 : $list2;
    $list2 : $temp;
  }

  @if $warnings {
    @if ($list1-size < $list2-size) {
      @if $warnings {
        @warn('The second list had '+($list2-size - $list1-size)+' more value'+ if($list2-size - $list1-size != 1, 's', '') +' than the first list');
      }
    } @elseif ($list1-size > $list2-size) {
      @if $warnings {
        @warn('The first list had '+($list1-size - $list2-size)+' more value'+ if($list1-size - $list2-size != 1, 's', '') +' than the second list');
      }
    }
  }

  @for $i from 1 through $count {
    $map : map-set($map, nth($list1, $i), nth($list2, $i));
  }

  @return $map;
}

/// @author Mark Notton
/// @link http://www.w3schools.com/charsets/ref_html_utf8.asp
/// @type variables

/// Symbols

$copyright :            "\00A9"; // ©

$registered :           "\00AE"; // ®

$tricolon :             "\205D"; // ⁝

$quadcolon :            "\205E"; // ⁞

$tick1 :                "\2713"; // ✓

$tick2 :                "\2714"; // ✔

$cross1 :               "\2715"; // ✕

$cross2 :               "\2717"; // ✗

$plus :                 "\271B"; // ✛

$bullet :               "\2219"; // ∙

/// Punctuation

$single-dot :           "\2024"; // ․

$double-dots :          "\2025"; // ‥

$tripple-dots :         "\2026"; // …

$open-quotes-1 :        "\201C"; // “

$close-quotes-1 :       "\201D"; // ”

$close-quotes-2 :       "\201E"; // „

$open-quotes-2 :        "\201F"; // ‟

$close-curly-brackets : "\2775"; // ❵

$open-curly-brackets :  "\2774"; // ❴

/// Arrows

$double-right-arrows :  "\00BB"; // »

$angle-left-1 :         "\276C"; // ❬

$angle-right-1 :        "\276D"; // ❭

$angle-left-2 :         "\276E"; // ❮

$angle-right-2 :        "\276F"; // ❯

$angle-left-3 :         "\2770"; // ❰

$angle-right-3 :        "\2771"; // ❱

$small-left-arrow :     "\2039"; // ‹

$small-right-arrow :    "\203A"; // ›

$arrow-right :          "\27A4"; // ➤

$triangle-right-1 :     "\2023"; // ‣

$triangle-right-2 :     "\25B6"; // ▶

$triangle-right-3 :     "\25B7"; // ▷


/// Currency

$british-pound :        "\00A3"; // £

$dollar :               "\0024"; // $

$euro :                 "\20AC"; // €


/// Shapes

$star :                 "\272F"; // ✯

$circle :               "\25CF"; // ●

$square-1 :             "\25A0"; // ■

$square-2 :             "\25A1"; // □

$quare-3 :              "\25A2"; // ▢


/// @see https://github.com/IonicaBizau/emoji.css?ref=producthunt
/// @author Ionică Bizău

// 100
$emoji-100 :                             "💯";

// 1234
$emoji-1234 :                            "🔢";

// Grinning
$emoji-grinning :                        "😀";

// Grimacing
$emoji-grimacing :                       "😬";

// Grin
$emoji-grin :                            "😁";

// Joy
$emoji-joy :                             "😂";

// Rofl
$emoji-rofl :                            "🤣";

// Smiley
$emoji-smiley :                          "😃";

// Smile
$emoji-smile :                           "😄";

// Sweat Smile
$emoji-sweat-smile :                     "😅";

// Laughing
$emoji-laughing :                        "😆";

// Innocent
$emoji-innocent :                        "😇";

// Wink
$emoji-wink :                            "😉";

// Blush
$emoji-blush :                           "😊";

// Slightly Smiling Face
$emoji-slightly-smiling-face :           "🙂";

// Upside Down Face
$emoji-upside-down-face :                "🙃";

// Yum
$emoji-yum :                             "😋";

// Relieved
$emoji-relieved :                        "😌";

// Heart Eyes
$emoji-heart-eyes :                      "😍";

// Kissing Heart
$emoji-kissing-heart :                   "😘";

// Kissing
$emoji-kissing :                         "😗";

// Kissing Smiling Eyes
$emoji-kissing-smiling-eyes :            "😙";

// Kissing Closed Eyes
$emoji-kissing-closed-eyes :             "😚";

// Stuck Out Tongue Winking Eye
$emoji-stuck-out-tongue-winking-eye :    "😜";

// Stuck Out Tongue Closed Eyes
$emoji-stuck-out-tongue-closed-eyes :    "😝";

// Stuck Out Tongue
$emoji-stuck-out-tongue :                "😛";

// Money Mouth Face
$emoji-money-mouth-face :                "🤑";

// Nerd Face
$emoji-nerd-face :                       "🤓";

// Sunglasses
$emoji-sunglasses :                      "😎";

// Clown Face
$emoji-clown-face :                      "🤡";

// Cowboy Hat Face
$emoji-cowboy-hat-face :                 "🤠";

// Hugs
$emoji-hugs :                            "🤗";

// Smirk
$emoji-smirk :                           "😏";

// No Mouth
$emoji-no-mouth :                        "😶";

// Neutral Face
$emoji-neutral-face :                    "😐";

// Expressionless ---------------------------
$emoji-expressionless :                  "😑";

// Unamused ---------------------------------
$emoji-unamused :                        "😒";

// Roll Eyes --------------------------------
$emoji-roll-eyes :                       "🙄";

// Thinking ---------------------------------
$emoji-thinking :                        "🤔";

// Lying Face -------------------------------
$emoji-lying-face :                      "🤥";

// Flushed
$emoji-flushed : "😳";

// Disappointed
$emoji-disappointed : "😞";

// Worried
$emoji-worried : "😟";

// Angry
$emoji-angry : "😠";

// Rage
$emoji-rage : "😡";

// Pensive
$emoji-pensive : "😔";

// Confused
$emoji-confused : "😕";

// Slightly Frowning Face
$emoji-slightly-frowning-face : "🙁";

// Frowning Face
$emoji-frowning-face : "☹";

// Persevere
$emoji-persevere : "😣";

// Confounded
$emoji-confounded : "😖";

// Tired Face
$emoji-tired-face : "😫";

// Weary
$emoji-weary : "😩";

// Triumph
$emoji-triumph : "😤";

// Open Mouth
$emoji-open-mouth : "😮";

// Scream
$emoji-scream : "😱";

// Fearful
$emoji-fearful : "😨";

// Cold Sweat
$emoji-cold-sweat : "😰";

// Hushed
$emoji-hushed : "😯";

// Frowning
$emoji-frowning : "😦";

// Anguished
$emoji-anguished : "😧";

// Cry
$emoji-cry : "😢";

// Disappointed Relieved
$emoji-disappointed-relieved : "😥";

// Drooling Face
$emoji-drooling-face : "🤤";

// Sleepy
$emoji-sleepy : "😪";

// Sweat
$emoji-sweat : "😓";

// Sob
$emoji-sob : "😭";

// Dizzy Face
$emoji-dizzy-face : "😵";

// Astonished
$emoji-astonished : "😲";

// Zipper Mouth Face
$emoji-zipper-mouth-face : "🤐";

// Nauseated Face
$emoji-nauseated-face : "🤢";

// Sneezing Face
$emoji-sneezing-face : "🤧";

// Mask
$emoji-mask : "😷";

// Face With Thermometer
$emoji-face-with-thermometer : "🤒";

// Face With Head Bandage
$emoji-face-with-head-bandage : "🤕";

// Sleeping
$emoji-sleeping : "😴";

// Zzz
$emoji-zzz : "💤";

// Poop
$emoji-poop : "💩";

// Smiling Imp
$emoji-smiling-imp : "😈";

// Imp
$emoji-imp : "👿";

// Japanese Ogre
$emoji-japanese-ogre : "👹";

// Japanese Goblin
$emoji-japanese-goblin : "👺";

// Skull
$emoji-skull : "💀";

// Ghost
$emoji-ghost : "👻";

// Alien
$emoji-alien : "👽";

// Robot
$emoji-robot : "🤖";

// Smiley Cat
$emoji-smiley-cat : "😺";

// Smile Cat
$emoji-smile-cat : "😸";

// Joy Cat
$emoji-joy-cat : "😹";

// Heart Eyes Cat
$emoji-heart-eyes-cat : "😻";

// Smirk Cat
$emoji-smirk-cat : "😼";

// Kissing Cat
$emoji-kissing-cat : "😽";

// Scream Cat
$emoji-scream-cat : "🙀";

// Crying Cat Face
$emoji-crying-cat-face : "😿";

// Pouting Cat
$emoji-pouting-cat : "😾";

// Raised Hands
$emoji-raised-hands : "🙌";

// Clap
$emoji-clap : "👏";

// Wave
$emoji-wave : "👋";

// Call Me Hand
$emoji-call-me-hand : "🤙";

// Plus1
$emoji-plus1 : "👍";

// 1
$emoji--1 : "👎";

// Facepunch
$emoji-facepunch : "👊";

// Fist
$emoji-fist : "✊";

// Fist Left
$emoji-fist-left : "🤛";

// Fist Right
$emoji-fist-right : "🤜";

// V
$emoji-v : "✌";

// Ok Hand
$emoji-ok-hand : "👌";

// Raised Hand
$emoji-raised-hand : "✋";

// Raised Back Of Hand
$emoji-raised-back-of-hand : "🤚";

// Open Hands
$emoji-open-hands : "👐";

// Muscle
$emoji-muscle : "💪";

// Pray
$emoji-pray : "🙏";

// Handshake
$emoji-handshake : "🤝";

// Point Up
$emoji-point-up : "☝";

// Point Up 2
$emoji-point-up-2 : "👆";

// Point Down
$emoji-point-down : "👇";

// Point Left
$emoji-point-left : "👈";

// Point Right
$emoji-point-right : "👉";

// Fu
$emoji-fu : "🖕";

// Raised Hand With Fingers Splayed
$emoji-raised-hand-with-fingers-splayed : "🖐";

// Metal
$emoji-metal : "🤘";

// Crossed Fingers
$emoji-crossed-fingers : "🤞";

// Vulcan Salute
$emoji-vulcan-salute : "🖖";

// Writing Hand
$emoji-writing-hand : "✍";

// Selfie
$emoji-selfie : "🤳";

// Nail Care
$emoji-nail-care : "💅";

// Lips
$emoji-lips : "👄";

// Tongue
$emoji-tongue : "👅";

// Ear
$emoji-ear : "👂";

// Nose
$emoji-nose : "👃";

// Eye
$emoji-eye : "👁";

// Eyes
$emoji-eyes : "👀";

// Bust In Silhouette
$emoji-bust-in-silhouette : "👤";

// Busts In Silhouette
$emoji-busts-in-silhouette : "👥";

// Speaking Head
$emoji-speaking-head : "🗣";

// Baby
$emoji-baby : "👶";

// Boy
$emoji-boy : "👦";

// Girl
$emoji-girl : "👧";

// Man
$emoji-man : "👨";

// Woman
$emoji-woman : "👩";

// Blonde Man
$emoji-blonde-man : "👱";

// Older Man
$emoji-older-man : "👴";

// Older Woman
$emoji-older-woman : "👵";

// Man With Gua Pi Mao
$emoji-man-with-gua-pi-mao : "👲";

// Man With Turban
$emoji-man-with-turban : "👳";

// Policeman
$emoji-policeman : "👮";

// Construction Worker Man
$emoji-construction-worker-man : "👷";

// Guardsman
$emoji-guardsman : "💂";

// Male Detective
$emoji-male-detective : "🕵";

// Mrs Claus
$emoji-mrs-claus : "🤶";

// Santa
$emoji-santa : "🎅";

// Angel
$emoji-angel : "👼";

// Pregnant Woman
$emoji-pregnant-woman : "🤰";

// Princess
$emoji-princess : "👸";

// Prince
$emoji-prince : "🤴";

// Bride With Veil
$emoji-bride-with-veil : "👰";

// Man In Tuxedo
$emoji-man-in-tuxedo : "🤵";

// Running Man
$emoji-running-man : "🏃";

// Walking Man
$emoji-walking-man : "🚶";

// Dancer
$emoji-dancer : "💃";

// Man Dancing
$emoji-man-dancing : "🕺";

// Dancing Women
$emoji-dancing-women : "👯";

// Couple
$emoji-couple : "👫";

// Two Men Holding Hands
$emoji-two-men-holding-hands : "👬";

// Two Women Holding Hands
$emoji-two-women-holding-hands : "👭";

// Bowing Man
$emoji-bowing-man : "🙇";

// Man Facepalming
$emoji-man-facepalming : "🤦";

// Woman Shrugging
$emoji-woman-shrugging : "🤷";

// Tipping Hand Woman
$emoji-tipping-hand-woman : "💁";

// No Good Woman
$emoji-no-good-woman : "🙅";

// Ok Woman
$emoji-ok-woman : "🙆";

// Raising Hand Woman
$emoji-raising-hand-woman : "🙋";

// Pouting Woman
$emoji-pouting-woman : "🙎";

// Frowning Woman
$emoji-frowning-woman : "🙍";

// Haircut Woman
$emoji-haircut-woman : "💇";

// Massage Woman
$emoji-massage-woman : "💆";

// Couple With Heart Woman Man
$emoji-couple-with-heart-woman-man : "💑";

// Couplekiss Man Woman
$emoji-couplekiss-man-woman : "💏";

// Family Man Woman Boy
$emoji-family-man-woman-boy : "👪";

// Womans Clothes
$emoji-womans-clothes : "👚";

// Tshirt
$emoji-tshirt : "👕";

// Jeans
$emoji-jeans : "👖";

// Necktie
$emoji-necktie : "👔";

// Dress
$emoji-dress : "👗";

// Bikini
$emoji-bikini : "👙";

// Kimono
$emoji-kimono : "👘";

// Lipstick
$emoji-lipstick : "💄";

// Kiss
$emoji-kiss : "💋";

// Footprints
$emoji-footprints : "👣";

// High Heel
$emoji-high-heel : "👠";

// Sandal
$emoji-sandal : "👡";

// Boot
$emoji-boot : "👢";

// Mans Shoe
$emoji-mans-shoe : "👞";

// Athletic Shoe
$emoji-athletic-shoe : "👟";

// Womans Hat
$emoji-womans-hat : "👒";

// Tophat
$emoji-tophat : "🎩";

// Rescue Worker Helmet
$emoji-rescue-worker-helmet : "⛑";

// Mortar Board
$emoji-mortar-board : "🎓";

// Crown
$emoji-crown : "👑";

// School Satchel
$emoji-school-satchel : "🎒";

// Pouch
$emoji-pouch : "👝";

// Purse
$emoji-purse : "👛";

// Handbag
$emoji-handbag : "👜";

// Briefcase
$emoji-briefcase : "💼";

// Eyeglasses
$emoji-eyeglasses : "👓";

// Dark Sunglasses
$emoji-dark-sunglasses : "🕶";

// Ring
$emoji-ring : "💍";

// Closed Umbrella
$emoji-closed-umbrella : "🌂";

// Dog
$emoji-dog : "🐶";

// Cat
$emoji-cat : "🐱";

// Mouse
$emoji-mouse : "🐭";

// Hamster
$emoji-hamster : "🐹";

// Rabbit
$emoji-rabbit : "🐰";

// Fox Face
$emoji-fox-face : "🦊";

// Bear
$emoji-bear : "🐻";

// Panda Face
$emoji-panda-face : "🐼";

// Koala
$emoji-koala : "🐨";

// Tiger
$emoji-tiger : "🐯";

// Lion
$emoji-lion : "🦁";

// Cow
$emoji-cow : "🐮";

// Pig
$emoji-pig : "🐷";

// Pig Nose
$emoji-pig-nose : "🐽";

// Frog
$emoji-frog : "🐸";

// Squid
$emoji-squid : "🦑";

// Octopus
$emoji-octopus : "🐙";

// Shrimp
$emoji-shrimp : "🦐";

// Monkey Face
$emoji-monkey-face : "🐵";

// Gorilla
$emoji-gorilla : "🦍";

// See No Evil
$emoji-see-no-evil : "🙈";

// Hear No Evil
$emoji-hear-no-evil : "🙉";

// Speak No Evil
$emoji-speak-no-evil : "🙊";

// Monkey
$emoji-monkey : "🐒";

// Chicken
$emoji-chicken : "🐔";

// Penguin
$emoji-penguin : "🐧";

// Bird
$emoji-bird : "🐦";

// Baby Chick
$emoji-baby-chick : "🐤";

// Hatching Chick
$emoji-hatching-chick : "🐣";

// Hatched Chick
$emoji-hatched-chick : "🐥";

// Duck
$emoji-duck : "🦆";

// Eagle
$emoji-eagle : "🦅";

// Owl
$emoji-owl : "🦉";

// Bat
$emoji-bat : "🦇";

// Wolf
$emoji-wolf : "🐺";

// Boar
$emoji-boar : "🐗";

// Horse
$emoji-horse : "🐴";

// Unicorn
$emoji-unicorn : "🦄";

// Honeybee
$emoji-honeybee : "🐝";

// Bug
$emoji-bug : "🐛";

// Butterfly
$emoji-butterfly : "🦋";

// Snail
$emoji-snail : "🐌";

// Beetle
$emoji-beetle : "🐞";

// Ant
$emoji-ant : "🐜";

// Spider
$emoji-spider : "🕷";

// Scorpion
$emoji-scorpion : "🦂";

// Crab
$emoji-crab : "🦀";

// Snake
$emoji-snake : "🐍";

// Lizard
$emoji-lizard : "🦎";

// Turtle
$emoji-turtle : "🐢";

// Tropical Fish
$emoji-tropical-fish : "🐠";

// Fish
$emoji-fish : "🐟";

// Blowfish
$emoji-blowfish : "🐡";

// Dolphin
$emoji-dolphin : "🐬";

// Shark
$emoji-shark : "🦈";

// Whale
$emoji-whale : "🐳";

// Whale2
$emoji-whale2 : "🐋";

// Crocodile
$emoji-crocodile : "🐊";

// Leopard
$emoji-leopard : "🐆";

// Tiger2
$emoji-tiger2 : "🐅";

// Water Buffalo
$emoji-water-buffalo : "🐃";

// Ox
$emoji-ox : "🐂";

// Cow2
$emoji-cow2 : "🐄";

// Deer
$emoji-deer : "🦌";

// Dromedary Camel
$emoji-dromedary-camel : "🐪";

// Camel
$emoji-camel : "🐫";

// Elephant
$emoji-elephant : "🐘";

// Rhinoceros
$emoji-rhinoceros : "🦏";

// Goat
$emoji-goat : "🐐";

// Ram
$emoji-ram : "🐏";

// Sheep
$emoji-sheep : "🐑";

// Racehorse
$emoji-racehorse : "🐎";

// Pig2
$emoji-pig2 : "🐖";

// Rat
$emoji-rat : "🐀";

// Mouse2
$emoji-mouse2 : "🐁";

// Rooster
$emoji-rooster : "🐓";

// Turkey
$emoji-turkey : "🦃";

// Dove
$emoji-dove : "🕊";

// Dog2
$emoji-dog2 : "🐕";

// Poodle
$emoji-poodle : "🐩";

// Cat2
$emoji-cat2 : "🐈";

// Rabbit2
$emoji-rabbit2 : "🐇";

// Chipmunk
$emoji-chipmunk : "🐿";

// Paw Prints
$emoji-paw-prints : "🐾";

// Dragon
$emoji-dragon : "🐉";

// Dragon Face
$emoji-dragon-face : "🐲";

// Cactus
$emoji-cactus : "🌵";

// Christmas Tree
$emoji-christmas-tree : "🎄";

// Evergreen Tree
$emoji-evergreen-tree : "🌲";

// Deciduous Tree
$emoji-deciduous-tree : "🌳";

// Palm Tree
$emoji-palm-tree : "🌴";

// Seedling
$emoji-seedling : "🌱";

// Herb
$emoji-herb : "🌿";

// Shamrock
$emoji-shamrock : "☘";

// Four Leaf Clover
$emoji-four-leaf-clover : "🍀";

// Bamboo
$emoji-bamboo : "🎍";

// Tanabata Tree
$emoji-tanabata-tree : "🎋";

// Leaves
$emoji-leaves : "🍃";

// Fallen Leaf
$emoji-fallen-leaf : "🍂";

// Maple Leaf
$emoji-maple-leaf : "🍁";

// Ear Of Rice
$emoji-ear-of-rice : "🌾";

// Hibiscus
$emoji-hibiscus : "🌺";

// Sunflower
$emoji-sunflower : "🌻";

// Rose
$emoji-rose : "🌹";

// Wilted Flower
$emoji-wilted-flower : "🥀";

// Tulip
$emoji-tulip : "🌷";

// Blossom
$emoji-blossom : "🌼";

// Cherry Blossom
$emoji-cherry-blossom : "🌸";

// Bouquet
$emoji-bouquet : "💐";

// Mushroom
$emoji-mushroom : "🍄";

// Chestnut
$emoji-chestnut : "🌰";

// Jack O Lantern
$emoji-jack-o-lantern : "🎃";

// Shell
$emoji-shell : "🐚";

// Spider Web
$emoji-spider-web : "🕸";

// Earth Americas
$emoji-earth-americas : "🌎";

// Earth Africa
$emoji-earth-africa : "🌍";

// Earth Asia
$emoji-earth-asia : "🌏";

// Full Moon
$emoji-full-moon : "🌕";

// Waning Gibbous Moon
$emoji-waning-gibbous-moon : "🌖";

// Last Quarter Moon
$emoji-last-quarter-moon : "🌗";

// Waning Crescent Moon
$emoji-waning-crescent-moon : "🌘";

// New Moon
$emoji-new-moon : "🌑";

// Waxing Crescent Moon
$emoji-waxing-crescent-moon : "🌒";

// First Quarter Moon
$emoji-first-quarter-moon : "🌓";

// Waxing Gibbous Moon
$emoji-waxing-gibbous-moon : "🌔";

// New Moon With Face
$emoji-new-moon-with-face : "🌚";

// Full Moon With Face
$emoji-full-moon-with-face : "🌝";

// First Quarter Moon With Face
$emoji-first-quarter-moon-with-face : "🌛";

// Last Quarter Moon With Face
$emoji-last-quarter-moon-with-face : "🌜";

// Sun With Face
$emoji-sun-with-face : "🌞";

// Crescent Moon
$emoji-crescent-moon : "🌙";

// Star
$emoji-star : "⭐";

// Star2
$emoji-star2 : "🌟";

// Dizzy
$emoji-dizzy : "💫";

// Sparkles
$emoji-sparkles : "✨";

// Comet
$emoji-comet : "☄";

// Sun Behind Small Cloud
$emoji-sun-behind-small-cloud : "🌤";

// Partly Sunny
$emoji-partly-sunny : "⛅";

// Sun Behind Large Cloud
$emoji-sun-behind-large-cloud : "🌥";

// Sun Behind Rain Cloud
$emoji-sun-behind-rain-cloud : "🌦";

// Cloud With Rain
$emoji-cloud-with-rain : "🌧";

// Cloud With Lightning And Rain
$emoji-cloud-with-lightning-and-rain : "⛈";

// Cloud With Lightning
$emoji-cloud-with-lightning : "🌩";

// Zap
$emoji-zap : "⚡";

// Fire
$emoji-fire : "🔥";

// Boom
$emoji-boom : "💥";

// Cloud With Snow
$emoji-cloud-with-snow : "🌨";

// Snowman
$emoji-snowman : "⛄";

// Snowman With Snow
$emoji-snowman-with-snow : "☃";

// Wind Face
$emoji-wind-face : "🌬";

// Dash
$emoji-dash : "💨";

// Tornado
$emoji-tornado : "🌪";

// Fog
$emoji-fog : "🌫";

// Open Umbrella
$emoji-open-umbrella : "☂";

// Umbrella
$emoji-umbrella : "☔";

// Droplet
$emoji-droplet : "💧";

// Sweat Drops
$emoji-sweat-drops : "💦";

// Ocean
$emoji-ocean : "🌊";

// Green Apple
$emoji-green-apple : "🍏";

// Apple
$emoji-apple : "🍎";

// Pear
$emoji-pear : "🍐";

// Tangerine
$emoji-tangerine : "🍊";

// Lemon
$emoji-lemon : "🍋";

// Banana
$emoji-banana : "🍌";

// Watermelon
$emoji-watermelon : "🍉";

// Grapes
$emoji-grapes : "🍇";

// Strawberry
$emoji-strawberry : "🍓";

// Melon
$emoji-melon : "🍈";

// Cherries
$emoji-cherries : "🍒";

// Peach
$emoji-peach : "🍑";

// Pineapple
$emoji-pineapple : "🍍";

// Kiwi Fruit
$emoji-kiwi-fruit : "🥝";

// Avocado
$emoji-avocado : "🥑";

// Tomato
$emoji-tomato : "🍅";

// Eggplant
$emoji-eggplant : "🍆";

// Cucumber
$emoji-cucumber : "🥒";

// Carrot
$emoji-carrot : "🥕";

// Hot Pepper
$emoji-hot-pepper : "🌶";

// Potato
$emoji-potato : "🥔";

// Corn
$emoji-corn : "🌽";

// Sweet Potato
$emoji-sweet-potato : "🍠";

// Peanuts
$emoji-peanuts : "🥜";

// Honey Pot
$emoji-honey-pot : "🍯";

// Croissant
$emoji-croissant : "🥐";

// Bread
$emoji-bread : "🍞";

// Baguette Bread
$emoji-baguette-bread : "🥖";

// Cheese
$emoji-cheese : "🧀";

// Egg
$emoji-egg : "🥚";

// Bacon
$emoji-bacon : "🥓";

// Pancakes
$emoji-pancakes : "🥞";

// Poultry Leg
$emoji-poultry-leg : "🍗";

// Meat On Bone
$emoji-meat-on-bone : "🍖";

// Fried Shrimp
$emoji-fried-shrimp : "🍤";

// Fried Egg
$emoji-fried-egg : "🍳";

// Hamburger
$emoji-hamburger : "🍔";

// Fries
$emoji-fries : "🍟";

// Stuffed Flatbread
$emoji-stuffed-flatbread : "🥙";

// Hotdog
$emoji-hotdog : "🌭";

// Pizza
$emoji-pizza : "🍕";

// Spaghetti
$emoji-spaghetti : "🍝";

// Taco
$emoji-taco : "🌮";

// Burrito
$emoji-burrito : "🌯";

// Green Salad
$emoji-green-salad : "🥗";

// Shallow Pan Of Food
$emoji-shallow-pan-of-food : "🥘";

// Ramen
$emoji-ramen : "🍜";

// Stew
$emoji-stew : "🍲";

// Fish Cake
$emoji-fish-cake : "🍥";

// Sushi
$emoji-sushi : "🍣";

// Bento
$emoji-bento : "🍱";

// Curry
$emoji-curry : "🍛";

// Rice Ball
$emoji-rice-ball : "🍙";

// Rice
$emoji-rice : "🍚";

// Rice Cracker
$emoji-rice-cracker : "🍘";

// Oden
$emoji-oden : "🍢";

// Dango
$emoji-dango : "🍡";

// Shaved Ice
$emoji-shaved-ice : "🍧";

// Ice Cream
$emoji-ice-cream : "🍨";

// Icecream
$emoji-icecream : "🍦";

// Cake
$emoji-cake : "🍰";

// Birthday
$emoji-birthday : "🎂";

// Custard
$emoji-custard : "🍮";

// Candy
$emoji-candy : "🍬";

// Lollipop
$emoji-lollipop : "🍭";

// Chocolate Bar
$emoji-chocolate-bar : "🍫";

// Popcorn
$emoji-popcorn : "🍿";

// Doughnut
$emoji-doughnut : "🍩";

// Cookie
$emoji-cookie : "🍪";

// Milk Glass
$emoji-milk-glass : "🥛";

// Beer
$emoji-beer : "🍺";

// Beers
$emoji-beers : "🍻";

// Clinking Glasses
$emoji-clinking-glasses : "🥂";

// Wine Glass
$emoji-wine-glass : "🍷";

// Tumbler Glass
$emoji-tumbler-glass : "🥃";

// Cocktail
$emoji-cocktail : "🍸";

// Tropical Drink
$emoji-tropical-drink : "🍹";

// Champagne
$emoji-champagne : "🍾";

// Sake
$emoji-sake : "🍶";

// Tea
$emoji-tea : "🍵";

// Coffee
$emoji-coffee : "☕";

// Baby Bottle
$emoji-baby-bottle : "🍼";

// Spoon
$emoji-spoon : "🥄";

// Fork And Knife
$emoji-fork-and-knife : "🍴";

// Plate With Cutlery
$emoji-plate-with-cutlery : "🍽";

// Soccer
$emoji-soccer : "⚽";

// Basketball
$emoji-basketball : "🏀";

// Football
$emoji-football : "🏈";

// Baseball
$emoji-baseball : "⚾";

// Tennis
$emoji-tennis : "🎾";

// Volleyball
$emoji-volleyball : "🏐";

// Rugby Football
$emoji-rugby-football : "🏉";

// 8ball
$emoji-8ball : "🎱";

// Golf
$emoji-golf : "⛳";

// Golfing Man
$emoji-golfing-man : "🏌";

// Ping Pong
$emoji-ping-pong : "🏓";

// Badminton
$emoji-badminton : "🏸";

// Goal Net
$emoji-goal-net : "🥅";

// Ice Hockey
$emoji-ice-hockey : "🏒";

// Field Hockey
$emoji-field-hockey : "🏑";

// Cricket
$emoji-cricket : "🏏";

// Ski
$emoji-ski : "🎿";

// Skier
$emoji-skier : "⛷";

// Snowboarder
$emoji-snowboarder : "🏂";

// Person Fencing
$emoji-person-fencing : "🤺";

// Ice Skate
$emoji-ice-skate : "⛸";

// Bow And Arrow
$emoji-bow-and-arrow : "🏹";

// Fishing Pole And Fish
$emoji-fishing-pole-and-fish : "🎣";

// Boxing Glove
$emoji-boxing-glove : "🥊";

// Martial Arts Uniform
$emoji-martial-arts-uniform : "🥋";

// Rowing Man
$emoji-rowing-man : "🚣";

// Swimming Man
$emoji-swimming-man : "🏊";

// Surfing Man
$emoji-surfing-man : "🏄";

// Bath
$emoji-bath : "🛀";

// Basketball Man
$emoji-basketball-man : "⛹";

// Weight Lifting Man
$emoji-weight-lifting-man : "🏋";

// Biking Man
$emoji-biking-man : "🚴";

// Mountain Biking Man
$emoji-mountain-biking-man : "🚵";

// Horse Racing
$emoji-horse-racing : "🏇";

// Business Suit Levitating
$emoji-business-suit-levitating : "🕴";

// Trophy
$emoji-trophy : "🏆";

// Running Shirt With Sash
$emoji-running-shirt-with-sash : "🎽";

// Medal Sports
$emoji-medal-sports : "🏅";

// Medal Military
$emoji-medal-military : "🎖";

// 1st Place Medal
$emoji-1st-place-medal : "🥇";

// 2nd Place Medal
$emoji-2nd-place-medal : "🥈";

// 3rd Place Medal
$emoji-3rd-place-medal : "🥉";

// Reminder Ribbon
$emoji-reminder-ribbon : "🎗";

// Rosette
$emoji-rosette : "🏵";

// Ticket
$emoji-ticket : "🎫";

// Tickets
$emoji-tickets : "🎟";

// Performing Arts
$emoji-performing-arts : "🎭";

// Art
$emoji-art : "🎨";

// Circus Tent
$emoji-circus-tent : "🎪";

// Microphone
$emoji-microphone : "🎤";

// Headphones
$emoji-headphones : "🎧";

// Musical Score
$emoji-musical-score : "🎼";

// Musical Keyboard
$emoji-musical-keyboard : "🎹";

// Drum
$emoji-drum : "🥁";

// Saxophone
$emoji-saxophone : "🎷";

// Trumpet
$emoji-trumpet : "🎺";

// Guitar
$emoji-guitar : "🎸";

// Violin
$emoji-violin : "🎻";

// Clapper
$emoji-clapper : "🎬";

// Video Game
$emoji-video-game : "🎮";

// Space Invader
$emoji-space-invader : "👾";

// Dart
$emoji-dart : "🎯";

// Game Die
$emoji-game-die : "🎲";

// Slot Machine
$emoji-slot-machine : "🎰";

// Bowling
$emoji-bowling : "🎳";

// Red Car
$emoji-red-car : "🚗";

// Taxi
$emoji-taxi : "🚕";

// Blue Car
$emoji-blue-car : "🚙";

// Bus
$emoji-bus : "🚌";

// Trolleybus
$emoji-trolleybus : "🚎";

// Racing Car
$emoji-racing-car : "🏎";

// Police Car
$emoji-police-car : "🚓";

// Ambulance
$emoji-ambulance : "🚑";

// Fire Engine
$emoji-fire-engine : "🚒";

// Minibus
$emoji-minibus : "🚐";

// Truck
$emoji-truck : "🚚";

// Articulated Lorry
$emoji-articulated-lorry : "🚛";

// Tractor
$emoji-tractor : "🚜";

// Kick Scooter
$emoji-kick-scooter : "🛴";

// Motorcycle
$emoji-motorcycle : "🏍";

// Bike
$emoji-bike : "🚲";

// Motor Scooter
$emoji-motor-scooter : "🛵";

// Rotating Light
$emoji-rotating-light : "🚨";

// Oncoming Police Car
$emoji-oncoming-police-car : "🚔";

// Oncoming Bus
$emoji-oncoming-bus : "🚍";

// Oncoming Automobile
$emoji-oncoming-automobile : "🚘";

// Oncoming Taxi
$emoji-oncoming-taxi : "🚖";

// Aerial Tramway
$emoji-aerial-tramway : "🚡";

// Mountain Cableway
$emoji-mountain-cableway : "🚠";

// Suspension Railway
$emoji-suspension-railway : "🚟";

// Railway Car
$emoji-railway-car : "🚃";

// Train
$emoji-train : "🚋";

// Monorail
$emoji-monorail : "🚝";

// Bullettrain Side
$emoji-bullettrain-side : "🚄";

// Bullettrain Front
$emoji-bullettrain-front : "🚅";

// Light Rail
$emoji-light-rail : "🚈";

// Mountain Railway
$emoji-mountain-railway : "🚞";

// Steam Locomotive
$emoji-steam-locomotive : "🚂";

// Train2
$emoji-train2 : "🚆";

// Metro
$emoji-metro : "🚇";

// Tram
$emoji-tram : "🚊";

// Station
$emoji-station : "🚉";

// Helicopter
$emoji-helicopter : "🚁";

// Small Airplane
$emoji-small-airplane : "🛩";

// Flight Departure
$emoji-flight-departure : "🛫";

// Flight Arrival
$emoji-flight-arrival : "🛬";

// Sailboat
$emoji-sailboat : "⛵";

// Motor Boat
$emoji-motor-boat : "🛥";

// Speedboat
$emoji-speedboat : "🚤";

// Ferry
$emoji-ferry : "⛴";

// Passenger Ship
$emoji-passenger-ship : "🛳";

// Rocket
$emoji-rocket : "🚀";

// Artificial Satellite
$emoji-artificial-satellite : "🛰";

// Seat
$emoji-seat : "💺";

// Canoe
$emoji-canoe : "🛶";

// Anchor
$emoji-anchor : "⚓";

// Construction
$emoji-construction : "🚧";

// Fuelpump
$emoji-fuelpump : "⛽";

// Busstop
$emoji-busstop : "🚏";

// Vertical Traffic Light
$emoji-vertical-traffic-light : "🚦";

// Traffic Light
$emoji-traffic-light : "🚥";

// Checkered Flag
$emoji-checkered-flag : "🏁";

// Ship
$emoji-ship : "🚢";

// Ferris Wheel
$emoji-ferris-wheel : "🎡";

// Roller Coaster
$emoji-roller-coaster : "🎢";

// Carousel Horse
$emoji-carousel-horse : "🎠";

// Building Construction
$emoji-building-construction : "🏗";

// Foggy
$emoji-foggy : "🌁";

// Tokyo Tower
$emoji-tokyo-tower : "🗼";

// Factory
$emoji-factory : "🏭";

// Fountain
$emoji-fountain : "⛲";

// Rice Scene
$emoji-rice-scene : "🎑";

// Mountain
$emoji-mountain : "⛰";

// Mountain Snow
$emoji-mountain-snow : "🏔";

// Mount Fuji
$emoji-mount-fuji : "🗻";

// Volcano
$emoji-volcano : "🌋";

// Japan
$emoji-japan : "🗾";

// Camping
$emoji-camping : "🏕";

// Tent
$emoji-tent : "⛺";

// National Park
$emoji-national-park : "🏞";

// Motorway
$emoji-motorway : "🛣";

// Railway Track
$emoji-railway-track : "🛤";

// Sunrise
$emoji-sunrise : "🌅";

// Sunrise Over Mountains
$emoji-sunrise-over-mountains : "🌄";

// Desert
$emoji-desert : "🏜";

// Beach Umbrella
$emoji-beach-umbrella : "🏖";

// Desert Island
$emoji-desert-island : "🏝";

// City Sunrise
$emoji-city-sunrise : "🌇";

// City Sunset
$emoji-city-sunset : "🌆";

// Cityscape
$emoji-cityscape : "🏙";

// Night With Stars
$emoji-night-with-stars : "🌃";

// Bridge At Night
$emoji-bridge-at-night : "🌉";

// Milky Way
$emoji-milky-way : "🌌";

// Stars
$emoji-stars : "🌠";

// Sparkler
$emoji-sparkler : "🎇";

// Fireworks
$emoji-fireworks : "🎆";

// Rainbow
$emoji-rainbow : "🌈";

// Houses
$emoji-houses : "🏘";

// European Castle
$emoji-european-castle : "🏰";

// Japanese Castle
$emoji-japanese-castle : "🏯";

// Stadium
$emoji-stadium : "🏟";

// Statue Of Liberty
$emoji-statue-of-liberty : "🗽";

// House
$emoji-house : "🏠";

// House With Garden
$emoji-house-with-garden : "🏡";

// Derelict House
$emoji-derelict-house : "🏚";

// Office
$emoji-office : "🏢";

// Department Store
$emoji-department-store : "🏬";

// Post Office
$emoji-post-office : "🏣";

// European Post Office
$emoji-european-post-office : "🏤";

// Hospital
$emoji-hospital : "🏥";

// Bank
$emoji-bank : "🏦";

// Hotel
$emoji-hotel : "🏨";

// Convenience Store
$emoji-convenience-store : "🏪";

// School
$emoji-school : "🏫";

// Love Hotel
$emoji-love-hotel : "🏩";

// Wedding
$emoji-wedding : "💒";

// Classical Building
$emoji-classical-building : "🏛";

// Church
$emoji-church : "⛪";

// Mosque
$emoji-mosque : "🕌";

// Synagogue
$emoji-synagogue : "🕍";

// Kaaba
$emoji-kaaba : "🕋";

// Shinto Shrine
$emoji-shinto-shrine : "⛩";

// Watch
$emoji-watch : "⌚";

// Iphone
$emoji-iphone : "📱";

// Calling
$emoji-calling : "📲";

// Computer
$emoji-computer : "💻";

// Keyboard
$emoji-keyboard : "⌨";

// Desktop Computer
$emoji-desktop-computer : "🖥";

// Printer
$emoji-printer : "🖨";

// Computer Mouse
$emoji-computer-mouse : "🖱";

// Trackball
$emoji-trackball : "🖲";

// Joystick
$emoji-joystick : "🕹";

// Clamp
$emoji-clamp : "🗜";

// Minidisc
$emoji-minidisc : "💽";

// Floppy Disk
$emoji-floppy-disk : "💾";

// Cd
$emoji-cd : "💿";

// Dvd
$emoji-dvd : "📀";

// Vhs
$emoji-vhs : "📼";

// Camera
$emoji-camera : "📷";

// Camera Flash
$emoji-camera-flash : "📸";

// Video Camera
$emoji-video-camera : "📹";

// Movie Camera
$emoji-movie-camera : "🎥";

// Film Projector
$emoji-film-projector : "📽";

// Film Strip
$emoji-film-strip : "🎞";

// Telephone Receiver
$emoji-telephone-receiver : "📞";

// Pager
$emoji-pager : "📟";

// Fax
$emoji-fax : "📠";

// Tv
$emoji-tv : "📺";

// Radio
$emoji-radio : "📻";

// Studio Microphone
$emoji-studio-microphone : "🎙";

// Level Slider
$emoji-level-slider : "🎚";

// Control Knobs
$emoji-control-knobs : "🎛";

// Stopwatch
$emoji-stopwatch : "⏱";

// Timer Clock
$emoji-timer-clock : "⏲";

// Alarm Clock
$emoji-alarm-clock : "⏰";

// Mantelpiece Clock
$emoji-mantelpiece-clock : "🕰";

// Hourglass Flowing Sand
$emoji-hourglass-flowing-sand : "⏳";

// Hourglass
$emoji-hourglass : "⌛";

// Satellite
$emoji-satellite : "📡";

// Battery
$emoji-battery : "🔋";

// Electric Plug
$emoji-electric-plug : "🔌";

// Bulb
$emoji-bulb : "💡";

// Flashlight
$emoji-flashlight : "🔦";

// Candle
$emoji-candle : "🕯";

// Wastebasket
$emoji-wastebasket : "🗑";

// Oil Drum
$emoji-oil-drum : "🛢";

// Money With Wings
$emoji-money-with-wings : "💸";

// Dollar
$emoji-dollar : "💵";

// Yen
$emoji-yen : "💴";

// Euro
$emoji-euro : "💶";

// Pound
$emoji-pound : "💷";

// Moneybag
$emoji-moneybag : "💰";

// Credit Card
$emoji-credit-card : "💳";

// Gem
$emoji-gem : "💎";

// Balance Scale
$emoji-balance-scale : "⚖";

// Wrench
$emoji-wrench : "🔧";

// Hammer
$emoji-hammer : "🔨";

// Hammer And Pick
$emoji-hammer-and-pick : "⚒";

// Hammer And Wrench
$emoji-hammer-and-wrench : "🛠";

// Pick
$emoji-pick : "⛏";

// Nut And Bolt
$emoji-nut-and-bolt : "🔩";

// Gear
$emoji-gear : "⚙";

// Chains
$emoji-chains : "⛓";

// Gun
$emoji-gun : "🔫";

// Bomb
$emoji-bomb : "💣";

// Hocho
$emoji-hocho : "🔪";

// Dagger
$emoji-dagger : "🗡";

// Crossed Swords
$emoji-crossed-swords : "⚔";

// Shield
$emoji-shield : "🛡";

// Smoking
$emoji-smoking : "🚬";

// Skull And Crossbones
$emoji-skull-and-crossbones : "☠";

// Coffin
$emoji-coffin : "⚰";

// Funeral Urn
$emoji-funeral-urn : "⚱";

// Amphora
$emoji-amphora : "🏺";

// Crystal Ball
$emoji-crystal-ball : "🔮";

// Prayer Beads
$emoji-prayer-beads : "📿";

// Barber
$emoji-barber : "💈";

// Alembic
$emoji-alembic : "⚗";

// Telescope
$emoji-telescope : "🔭";

// Microscope
$emoji-microscope : "🔬";

// Hole
$emoji-hole : "🕳";

// Pill
$emoji-pill : "💊";

// Syringe
$emoji-syringe : "💉";

// Thermometer
$emoji-thermometer : "🌡";

// Label
$emoji-label : "🏷";

// Bookmark
$emoji-bookmark : "🔖";

// Toilet
$emoji-toilet : "🚽";

// Shower
$emoji-shower : "🚿";

// Bathtub
$emoji-bathtub : "🛁";

// Key
$emoji-key : "🔑";

// Old Key
$emoji-old-key : "🗝";

// Couch And Lamp
$emoji-couch-and-lamp : "🛋";

// Sleeping Bed
$emoji-sleeping-bed : "🛌";

// Bed
$emoji-bed : "🛏";

// Door
$emoji-door : "🚪";

// Bellhop Bell
$emoji-bellhop-bell : "🛎";

// Framed Picture
$emoji-framed-picture : "🖼";

// World Map
$emoji-world-map : "🗺";

// Parasol On Ground
$emoji-parasol-on-ground : "⛱";

// Moyai
$emoji-moyai : "🗿";

// Shopping
$emoji-shopping : "🛍";

// Shopping Cart
$emoji-shopping-cart : "🛒";

// Balloon
$emoji-balloon : "🎈";

// Flags
$emoji-flags : "🎏";

// Ribbon
$emoji-ribbon : "🎀";

// Gift
$emoji-gift : "🎁";

// Confetti Ball
$emoji-confetti-ball : "🎊";

// Tada
$emoji-tada : "🎉";

// Dolls
$emoji-dolls : "🎎";

// Wind Chime
$emoji-wind-chime : "🎐";

// Crossed Flags
$emoji-crossed-flags : "🎌";

// Izakaya Lantern
$emoji-izakaya-lantern : "🏮";

// Envelope With Arrow
$emoji-envelope-with-arrow : "📩";

// Incoming Envelope
$emoji-incoming-envelope : "📨";

// E Mail
$emoji-e-mail : "📧";

// Love Letter
$emoji-love-letter : "💌";

// Postbox
$emoji-postbox : "📮";

// Mailbox Closed
$emoji-mailbox-closed : "📪";

// Mailbox
$emoji-mailbox : "📫";

// Mailbox With Mail
$emoji-mailbox-with-mail : "📬";

// Mailbox With No Mail
$emoji-mailbox-with-no-mail : "📭";

// Package
$emoji-package : "📦";

// Postal Horn
$emoji-postal-horn : "📯";

// Inbox Tray
$emoji-inbox-tray : "📥";

// Outbox Tray
$emoji-outbox-tray : "📤";

// Scroll
$emoji-scroll : "📜";

// Page With Curl
$emoji-page-with-curl : "📃";

// Bookmark Tabs
$emoji-bookmark-tabs : "📑";

// Bar Chart
$emoji-bar-chart : "📊";

// Chart With Upwards Trend
$emoji-chart-with-upwards-trend : "📈";

// Chart With Downwards Trend
$emoji-chart-with-downwards-trend : "📉";

// Page Facing Up
$emoji-page-facing-up : "📄";

// Date
$emoji-date : "📅";

// Calendar
$emoji-calendar : "📆";

// Spiral Calendar
$emoji-spiral-calendar : "🗓";

// Card Index
$emoji-card-index : "📇";

// Card File Box
$emoji-card-file-box : "🗃";

// Ballot Box
$emoji-ballot-box : "🗳";

// File Cabinet
$emoji-file-cabinet : "🗄";

// Clipboard
$emoji-clipboard : "📋";

// Spiral Notepad
$emoji-spiral-notepad : "🗒";

// File Folder
$emoji-file-folder : "📁";

// Open File Folder
$emoji-open-file-folder : "📂";

// Card Index Dividers
$emoji-card-index-dividers : "🗂";

// Newspaper Roll
$emoji-newspaper-roll : "🗞";

// Newspaper
$emoji-newspaper : "📰";

// Notebook
$emoji-notebook : "📓";

// Closed Book
$emoji-closed-book : "📕";

// Green Book
$emoji-green-book : "📗";

// Blue Book
$emoji-blue-book : "📘";

// Orange Book
$emoji-orange-book : "📙";

// Notebook With Decorative Cover
$emoji-notebook-with-decorative-cover : "📔";

// Ledger
$emoji-ledger : "📒";

// Books
$emoji-books : "📚";

// Open Book
$emoji-open-book : "📖";

// Link
$emoji-link : "🔗";

// Paperclip
$emoji-paperclip : "📎";

// Paperclips
$emoji-paperclips : "🖇";

// Triangular Ruler
$emoji-triangular-ruler : "📐";

// Straight Ruler
$emoji-straight-ruler : "📏";

// Pushpin
$emoji-pushpin : "📌";

// Round Pushpin
$emoji-round-pushpin : "📍";

// Triangular Flag On Post
$emoji-triangular-flag-on-post : "🚩";

// White Flag
$emoji-white-flag : "🏳";

// Black Flag
$emoji-black-flag : "🏴";

// Closed Lock With Key
$emoji-closed-lock-with-key : "🔐";

// Lock
$emoji-lock : "🔒";

// Unlock
$emoji-unlock : "🔓";

// Lock With Ink Pen
$emoji-lock-with-ink-pen : "🔏";

// Pen
$emoji-pen : "🖊";

// Fountain Pen
$emoji-fountain-pen : "🖋";

// Memo
$emoji-memo : "📝";

// Crayon
$emoji-crayon : "🖍";

// Paintbrush
$emoji-paintbrush : "🖌";

// Mag
$emoji-mag : "🔍";

// Mag Right
$emoji-mag-right : "🔎";

// Yellow Heart
$emoji-yellow-heart : "💛";

// Green Heart
$emoji-green-heart : "💚";

// Blue Heart
$emoji-blue-heart : "💙";

// Purple Heart
$emoji-purple-heart : "💜";

// Black Heart
$emoji-black-heart : "🖤";

// Broken Heart
$emoji-broken-heart : "💔";

// Heavy Heart Exclamation
$emoji-heavy-heart-exclamation : "❣";

// Two Hearts
$emoji-two-hearts : "💕";

// Revolving Hearts
$emoji-revolving-hearts : "💞";

// Heartbeat
$emoji-heartbeat : "💓";

// Heartpulse
$emoji-heartpulse : "💗";

// Sparkling Heart
$emoji-sparkling-heart : "💖";

// Cupid
$emoji-cupid : "💘";

// Gift Heart
$emoji-gift-heart : "💝";

// Heart Decoration
$emoji-heart-decoration : "💟";

// Peace Symbol
$emoji-peace-symbol : "☮";

// Latin Cross
$emoji-latin-cross : "✝";

// Star And Crescent
$emoji-star-and-crescent : "☪";

// Om
$emoji-om : "🕉";

// Wheel Of Dharma
$emoji-wheel-of-dharma : "☸";

// Star Of David
$emoji-star-of-david : "✡";

// Six Pointed Star
$emoji-six-pointed-star : "🔯";

// Menorah
$emoji-menorah : "🕎";

// Yin Yang
$emoji-yin-yang : "☯";

// Orthodox Cross
$emoji-orthodox-cross : "☦";

// Place Of Worship
$emoji-place-of-worship : "🛐";

// Ophiuchus
$emoji-ophiuchus : "⛎";

// Aries
$emoji-aries : "♈";

// Taurus
$emoji-taurus : "♉";

// Gemini
$emoji-gemini : "♊";

// Cancer
$emoji-cancer : "♋";

// Leo
$emoji-leo : "♌";

// Virgo
$emoji-virgo : "♍";

// Libra
$emoji-libra : "♎";

// Scorpius
$emoji-scorpius : "♏";

// Sagittarius
$emoji-sagittarius : "♐";

// Capricorn
$emoji-capricorn : "♑";

// Aquarius
$emoji-aquarius : "♒";

// Pisces
$emoji-pisces : "♓";

// Id
$emoji-id : "🆔";

// Atom Symbol
$emoji-atom-symbol : "⚛";

// U7a7a
$emoji-u7a7a : "🈳";

// U5272
$emoji-u5272 : "🈹";

// Radioactive
$emoji-radioactive : "☢";

// Biohazard
$emoji-biohazard : "☣";

// Mobile Phone Off
$emoji-mobile-phone-off : "📴";

// Vibration Mode
$emoji-vibration-mode : "📳";

// U6709
$emoji-u6709 : "🈶";

// U7121
$emoji-u7121 : "🈚";

// U7533
$emoji-u7533 : "🈸";

// U55b6
$emoji-u55b6 : "🈺";

// Vs
$emoji-vs : "🆚";

// Accept
$emoji-accept : "🉑";

// White Flower
$emoji-white-flower : "💮";

// Ideograph Advantage
$emoji-ideograph-advantage : "🉐";

// U5408
$emoji-u5408 : "🈴";

// U6e80
$emoji-u6e80 : "🈵";

// U7981
$emoji-u7981 : "🈲";

// Ab
$emoji-ab : "🆎";

// Cl
$emoji-cl : "🆑";

// Sos
$emoji-sos : "🆘";

// No Entry
$emoji-no-entry : "⛔";

// Name Badge
$emoji-name-badge : "📛";

// No Entry Sign
$emoji-no-entry-sign : "🚫";

// X
$emoji-x : "❌";

// O
$emoji-o : "⭕";

// Stop Sign
$emoji-stop-sign : "🛑";

// Anger
$emoji-anger : "💢";

// No Pedestrians
$emoji-no-pedestrians : "🚷";

// Do Not Litter
$emoji-do-not-litter : "🚯";

// No Bicycles
$emoji-no-bicycles : "🚳";

// Non Potable Water
$emoji-non-potable-water : "🚱";

// Underage
$emoji-underage : "🔞";

// No Mobile Phones
$emoji-no-mobile-phones : "📵";

// Exclamation
$emoji-exclamation : "❗";

// Grey Exclamation
$emoji-grey-exclamation : "❕";

// Question
$emoji-question : "❓";

// Grey Question
$emoji-grey-question : "❔";

// Low Brightness
$emoji-low-brightness : "🔅";

// High Brightness
$emoji-high-brightness : "🔆";

// Trident
$emoji-trident : "🔱";

// Fleur De Lis
$emoji-fleur-de-lis : "⚜";

// Children Crossing
$emoji-children-crossing : "🚸";

// Beginner
$emoji-beginner : "🔰";

// U6307
$emoji-u6307 : "🈯";

// Chart
$emoji-chart : "💹";

// Negative Squared Cross Mark
$emoji-negative-squared-cross-mark : "❎";

// White Check Mark
$emoji-white-check-mark : "✅";

// Diamond Shape With A Dot Inside
$emoji-diamond-shape-with-a-dot-inside : "💠";

// Cyclone
$emoji-cyclone : "🌀";

// Loop
$emoji-loop : "➿";

// Globe With Meridians
$emoji-globe-with-meridians : "🌐";

// Atm
$emoji-atm : "🏧";

// Passport Control
$emoji-passport-control : "🛂";

// Customs
$emoji-customs : "🛃";

// Baggage Claim
$emoji-baggage-claim : "🛄";

// Left Luggage
$emoji-left-luggage : "🛅";

// Wheelchair
$emoji-wheelchair : "♿";

// No Smoking
$emoji-no-smoking : "🚭";

// Wc
$emoji-wc : "🚾";

// Potable Water
$emoji-potable-water : "🚰";

// Mens
$emoji-mens : "🚹";

// Womens
$emoji-womens : "🚺";

// Baby Symbol
$emoji-baby-symbol : "🚼";

// Restroom
$emoji-restroom : "🚻";

// Put Litter In Its Place
$emoji-put-litter-in-its-place : "🚮";

// Cinema
$emoji-cinema : "🎦";

// Signal Strength
$emoji-signal-strength : "📶";

// Koko
$emoji-koko : "🈁";

// Ng
$emoji-ng : "🆖";

// Ok
$emoji-ok : "🆗";

// Up
$emoji-up : "🆙";

// Cool
$emoji-cool : "🆒";

// New
$emoji-new : "🆕";

// Free
$emoji-free : "🆓";

// Keycap Ten
$emoji-keycap-ten : "🔟";

// Pause Button
$emoji-pause-button : "⏸";

// Next Track Button
$emoji-next-track-button : "⏭";

// Stop Button
$emoji-stop-button : "⏹";

// Record Button
$emoji-record-button : "⏺";

// Play Or Pause Button
$emoji-play-or-pause-button : "⏯";

// Previous Track Button
$emoji-previous-track-button : "⏮";

// Fast Forward
$emoji-fast-forward : "⏩";

// Rewind
$emoji-rewind : "⏪";

// Twisted Rightwards Arrows
$emoji-twisted-rightwards-arrows : "🔀";

// Repeat
$emoji-repeat : "🔁";

// Repeat One
$emoji-repeat-one : "🔂";

// Arrow Up Small
$emoji-arrow-up-small : "🔼";

// Arrow Down Small
$emoji-arrow-down-small : "🔽";

// Arrow Double Up
$emoji-arrow-double-up : "⏫";

// Arrow Double Down
$emoji-arrow-double-down : "⏬";

// Arrows Counterclockwise
$emoji-arrows-counterclockwise : "🔄";

// Abc
$emoji-abc : "🔤";

// Abcd
$emoji-abcd : "🔡";

// Capital Abcd
$emoji-capital-abcd : "🔠";

// Symbols
$emoji-symbols : "🔣";

// Musical Note
$emoji-musical-note : "🎵";

// Notes
$emoji-notes : "🎶";

// Curly Loop
$emoji-curly-loop : "➰";

// Arrows Clockwise
$emoji-arrows-clockwise : "🔃";

// Heavy Plus Sign
$emoji-heavy-plus-sign : "➕";

// Heavy Minus Sign
$emoji-heavy-minus-sign : "➖";

// Heavy Division Sign
$emoji-heavy-division-sign : "➗";

// Heavy Dollar Sign
$emoji-heavy-dollar-sign : "💲";

// Currency Exchange
$emoji-currency-exchange : "💱";

// End
$emoji-end : "🔚";

// Back
$emoji-back : "🔙";

// On
$emoji-on : "🔛";

// Top
$emoji-top : "🔝";

// Soon
$emoji-soon : "🔜";

// Radio Button
$emoji-radio-button : "🔘";

// White Circle
$emoji-white-circle : "⚪";

// Black Circle
$emoji-black-circle : "⚫";

// Red Circle
$emoji-red-circle : "🔴";

// Large Blue Circle
$emoji-large-blue-circle : "🔵";

// Small Orange Diamond
$emoji-small-orange-diamond : "🔸";

// Small Blue Diamond
$emoji-small-blue-diamond : "🔹";

// Large Orange Diamond
$emoji-large-orange-diamond : "🔶";

// Large Blue Diamond
$emoji-large-blue-diamond : "🔷";

// Small Red Triangle
$emoji-small-red-triangle : "🔺";

// Black Large Square
$emoji-black-large-square : "⬛";

// White Large Square
$emoji-white-large-square : "⬜";

// Small Red Triangle Down
$emoji-small-red-triangle-down : "🔻";

// Black Medium Small Square
$emoji-black-medium-small-square : "◾";

// White Medium Small Square
$emoji-white-medium-small-square : "◽";

// Black Square Button
$emoji-black-square-button : "🔲";

// White Square Button
$emoji-white-square-button : "🔳";

// Speaker
$emoji-speaker : "🔈";

// Sound
$emoji-sound : "🔉";

// Loud Sound
$emoji-loud-sound : "🔊";

// Mute
$emoji-mute : "🔇";

// Mega
$emoji-mega : "📣";

// Loudspeaker
$emoji-loudspeaker : "📢";

// Bell
$emoji-bell : "🔔";

// No Bell
$emoji-no-bell : "🔕";

// Black Joker
$emoji-black-joker : "🃏";

// Mahjong
$emoji-mahjong : "🀄";

// Flower Playing Cards
$emoji-flower-playing-cards : "🎴";

// Thought Balloon
$emoji-thought-balloon : "💭";

// Right Anger Bubble
$emoji-right-anger-bubble : "🗯";

// Speech Balloon
$emoji-speech-balloon : "💬";

// Left Speech Bubble
$emoji-left-speech-bubble : "🗨";

// Clock 1:00
$emoji-clock1 : "🕐";

// Clock 2:00
$emoji-clock2 : "🕑";

// Clock 3:00
$emoji-clock3 : "🕒";

// Clock 4:00
$emoji-clock4 : "🕓";

// Clock 5:00
$emoji-clock5 : "🕔";

// Clock 6:00
$emoji-clock6 : "🕕";

// Clock 7:00
$emoji-clock7 : "🕖";

// Clock 8:00
$emoji-clock8 : "🕗";

// Clock 9:00
$emoji-clock9 : "🕘";

// Clock 10:00
$emoji-clock10 : "🕙";

// Clock 11:00
$emoji-clock11 : "🕚";

// Clock 12:00
$emoji-clock12 : "🕛";

// Clock 1:30
$emoji-clock130 : "🕜";

// Clock 2:30
$emoji-clock230 : "🕝";

// Clock 3:30
$emoji-clock330 : "🕞";

// Clock 4:30
$emoji-clock430 : "🕟";

// Clock 5:30
$emoji-clock530 : "🕠";

// Clock 6:30
$emoji-clock630 : "🕡";

// Clock 7:30
$emoji-clock730 : "🕢";

// Clock 8:30
$emoji-clock830 : "🕣";

// Clock 9:30
$emoji-clock930 : "🕤";

// Clock 1:030
$emoji-clock1030 : "🕥";

// Clock 11:30
$emoji-clock1130 : "🕦";

// Clock 12:30
$emoji-clock1230 : "🕧";

////////////////////////////////////////////////////////////////////////////////
/// Get Settings                                                   #get-settings
////////////////////////////////////////////////////////////////////////////////

/// Have all mixins accept the same pattern on arguments and manage all defaults
/// data and fallbacks. Use either a list, map, or keywords.
///
/// @name Get Settings
/// @author Mark Notton
/// @access public
/// @return {map}
/// @example
/// @mixin myMixin($args...) {
///    $defaults : (
///      name   : 'unknown',
///      age    : '99',
///      gender : null,
///      data   : ('foo':'bar')
///    );
///    $settings : get-settings($defaults, $args...);
///    // $settings : get-settings($defaults, (deep:false, debug:true), $args...);
///    @debug $settings;
/// }
/// @include myMixin('Mark', '31', male, ('wibble':'wobble'), important);
/// @include myMixin((name:'Lizzie', gender:female, data:('wibble':'wobble')));
/// @include myMixin($name:'Andy', $age:'36', $gender:male);
/// @include myMixin(important);
///
/// @output
/// name: "Mark", age: "31", gender: male, data: ("foo": "bar", "wibble": "wobble"), important: !important
/// name: "Lizzie", age: "99", gender: female, data: ("foo": "bar", "wibble": "wobble"), important: null
/// name: "Andy", age: "36", gender: male, data: ("foo": "bar"), important: null
/// name: "unknown", age: "99", gender: null, data: ("foo": "bar"), important: !important
// NOTE Passing a list of arguments in the keywords format will return incorrect
// settings data if a special options map prefixes 'args...' within the Mixin.

@function get-settings($defaults, $args...) {

  // ===========================================================================
  // Initial settings
  // ===========================================================================

  $important : false;
  $settings  : null;
  $defaults  : if(is-null($defaults), (), $defaults);
  $backup    : $args;

  // Special options on how to manage the arguments ----------------------------

  $options : (
    deep      : true,
    prefix    : 'argument',
    important : null,
    debug     : false
  );

  // ===========================================================================
  //  Revert to defaults of no arguments are passed
  // ===========================================================================

  @if length($args) == 0 and length(keywords($args)) == 0 {

    @if map-get($options, debug ) { @debug "NO ARGUMENTS DETECTED"; }

    $settings : $defaults;

  } @else {

    // =========================================================================
    //  Keywords
    // =========================================================================
    // Convert keywords into a useable map

    @if length(keywords($args)) > 0 {

      @if map-get($options, debug ) { @debug "KEYWORDS DETECTED"; }

      $args : keywords($args);

      @if map-has-key($args, options) {
        $options : map-merge($options, map-get($args, options));
        $args : map-remove($args, options);
      }

    }

    // =========================================================================
    //  Special Options
    // =========================================================================

    // Special options at start ------------------------------------------------
    // Check if the fisrt args element exists, is a map, and contains any of the
    // $options keys.If it does, assume these are bespoke options relative to
    // the mixin that called this function.

    @if not is-empty(nth($args, 1)) and is-map(nth($args, 1)) and
        contains(map-keys(nth($args, 1)), map-keys($options)) {

      @if map-get($options, debug ) { @debug 'Special options defined at start of the arguments'; }

      $options : map-merge($options, nth($args, 1));
      $args    : slice($args, 2, length($args));

    }

    // Special options at end -------------------------------------------------
    // Essentially the same as above, but checks the last argument for options.
    // This allows for a little syntax suger when passing aguments on a per-maxin call basis

    @elseif not is-empty(nth($args, -1)) and is-map(nth($args, -1)) and
            contains(map-keys(nth($args, -1)), map-keys($options)) {

      @if map-get($options, debug ) { @debug 'Special options defined at end of the arguments'; }

      $options : map-merge($options, nth($args, -1));
      $args    : slice($args, 1, length($args) - 1)
    }

    // =========================================================================
    //  Maps
    // =========================================================================

    // Quick check to determine if the map was originally passed as keywords or not.
    $map : if(is-map($args), $args, nth($args, 1));

    @if not is-empty($map) and is-map($map) {

      @if map-get($options, debug ) { @debug "MAP DETECTED"; }

    /// @todo: Check for cast type and required types

      @if map-get($options, deep) == true  {
        // If deep is true (default), then perform a deep merge with the defaults
        $settings : map-deep-merge($defaults, $map);
      } @else {
        // Otherwise do a standard merge.
        $settings : map-merge($defaults, $map);
      }

      // Check if the map has important explicitly defined within it.
      @if contains(map-keys($settings), important) {
        $important : map-get($settings, important);
        // If important is found, remove it from the settings list.
        $settings : map-remove($settings, important);
      }

      // If a map was passed, check the second parameter for
      // important as they may be seperated.
      @if length($args) > 1 and is-important(nth($args, 2)) {
        $important : true;
      }

    } @else {

    // =========================================================================
    //  List
    // =========================================================================

      @if map-get($options, debug ) { @debug "LIST DETECTED"; }

      // Arguments that are passed as a standard list

      $default-keys : map-keys($defaults);
      $default-values : map-values($defaults);

      // Convert all items into lists to help looping.
      $arguments : arglist-to-list($args...);

      // Check and remove 'important' if it was defined.
      @if contains($arguments, important) {
        $important : true;
        $arguments : remove($arguments, important);
      }

      // Run through all the arguments
      @if ( length($arguments) > 0 ) {
        @for $i from 1 through length($arguments) {

          @if $i <= length($default-keys) {
            // Check if the amount of arguements is less than the
            // amount of defaults before setting the value
            @if is-null(nth($arguments, $i)) or contains((default, defaults), nth($arguments, $i)) {
              // Passing in null, default or defaults will use the default value.
              $defaults : map-set($defaults, nth($default-keys, $i), nth($default-values, $i));
            } @elseif is-map(nth($arguments, $i)) {
              @if map-get($options, deep) == true  {
                // Do a deep-merge for map data
                $defaults : map-set($defaults, nth($default-keys, $i), map-deep-merge(nth($default-values, $i), nth($arguments, $i)));
              } @else {
                // Do a normal merge for map data
                $defaults : map-set($defaults, nth($default-keys, $i), map-merge(nth($default-values, $i), nth($arguments, $i)));
              }
            } @else {
              // Add value to the associated argument number from the defaults key.
              $defaults : map-set($defaults, nth($default-keys, $i), nth($arguments, $i));
            }
          } @else {
            // If there are more arguments, define a map key with "argument",
            // followed by the argument index.
            $defaults : map-set($defaults, #{map-get($options, prefix) + $i}, nth($arguments, $i));
          }
        }
        $settings : $defaults;
      } @else {
        // This is a fallback should no arguments be passed except for 'important'
        $settings : $defaults;
      }
    }

  }

  // ===========================================================================
  //  Return Settings
  // ===========================================================================

  // Lastely, include important key and value at the end of the map.
  $settings : map-set($settings, important, if($important, $imp, map-get($options, important)));

  @if map-get($options, debug ) {
    // @debug #{'Settings:'} $settings;
    // @debug #{'Options:'} $options;
  }

  @return $settings;

}

////////////////////////////////////////////////////////////////////////////////
/// Get Var Value                                                 #get-var-value
////////////////////////////////////////////////////////////////////////////////
///
/// @group helpers-misc
///

@function get-var-value($variable) {
  @if is-var($variable) {
    $value : get-var-variable($variable);
    @return map-get($variables, $value);
  } @else {
    @return map-get($variables, $variable);
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Get Var Variable                                           #get-var-variable
////////////////////////////////////////////////////////////////////////////////
///
/// @group helpers-misc
///

@function get-var-variable($value) {
  @if is-var($value) == false {
    @return $value;
  } @else {
    @return is-var($value);
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Opposite Direction                                       #opposite-direction
////////////////////////////////////////////////////////////////////////////////

/// Return an opposite direction
/// @author Hugo Giraudel
/// @group helpers-strings
/// @link http://www.sitepoint.com/sass-mixins-kickstart-project/#opposite-direction

@function opposite-direction($directions) {

  $has-hyphen : false;

  @if str-index(to-string($directions), '-') {
    $has-hyphen : true;
    $directions : string-explode(to-string($directions), '-');
  }

  $opposite-directions: ();
  $direction-map: (
    top    : bottom,
    right  : left,
    bottom : top,
    left   : right,
    up     : down,
    down   : up,
    center : center,
    ltr    : rtl,
    rtl    : ltr
  );

  @each $direction in $directions {
    $direction: to-lower-case($direction);

    @if map-has-key($direction-map, $direction) {
      $opposite-directions: append($opposite-directions, unquote(map-get($direction-map, $direction)));
    } @else {
      @if $warnings {
        @warn "No opposite direction can be found for '#{$direction}'. Direction omitted.";
      }
    }
  }

  @if $has-hyphen == true {
    @return string-replace(to-string($opposite-directions), '-', ' ');
  } @else {
    @return $opposite-directions;
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Pseudo                                                               #pseudo
////////////////////////////////////////////////////////////////////////////////
///
/// Check to see if the given pseduo is valid
///
/// @author Mark Notton
///
/// @access private
///
/// @group helpers-misc
///
/// @require {function} is-pseudo
///
/// @return {string}
///
/// @example scss - Usage
///   &#{pseudo(before)} { ... }
///
/// @example scss - Output
///   &:before { ... }
///

@function pseudo($pseudo, $colon:true) {
  @if is-pseudo($pseudo) {
    @return if($colon, ':'+$pseudo, $pseudo);
  } @else {
    @return null;
  }
}

/// Sudo ================================================================= #sudo
///
/// @alias pseudo
///
/// @access public
///
/// @require {function} pseudo
///
/// @return {bool}

@function sudo($pseudo, $colon:true) {
  @return pseudo($pseudo, $colon);
}

////////////////////////////////////////////////////////////////////////////////
/// Var Value                                                         #var-value
////////////////////////////////////////////////////////////////////////////////

/// @group helpers-misc

@function var-value($variable:primary, $opacity:1, $fallback:true) {

  $variable-value : $variable;
  $fallback-value : null;

  // If varuable is a standard colour, just use that colour as normal. Opacity is not used.
  @if is-colour($variable) {

    @if is-hex($variable) {
      $variable-value : rgba($variable, $opacity);
    } @else {
      $variable-value : $variable;
    }

  } @else {

    // Check the variables map to help generate a fallback colour
    $fallback-value : get-variable-colour-value($variable, $opacity);

    @if is-var($variable) {

      // If a hardcoded 'var(--XXX)' is passed, extract the variable name and check if
      // it's part of the variables map. If it is, use this hardcoded colour as a fallback.
      // Add opacity is one if provided.

      @if $support-css-variable-alpha-colours {

        $variable-value : rgba($variable, $opacity);

      } @else {

        @if not is-null($fallback-value) {
          $variable-value : str-replace($variable, ')', ', ' + $fallback-value + ')');
        } @else {
          $variable-value : $variable;
        }

      }

    } @else {

      // If a string was passed as the string. Assume this is a shorthand to search
      // the variables map for the right variable then apply the fallback.

      @if $support-css-variable-alpha-colours {
        $variable-value : rgba(unquote('var(--' + $variable + ')'), $opacity);
      } @else {

        @if not is-null($fallback-value) {
          $variable-value : unquote('var(--' + $variable + ', '+ $fallback-value +')');
        } @else {
          $variable-value : unquote('var(--' + $variable + ')');
        }
      }
    }

  }

  @if ( not is-null($fallback-value) and $fallback ) {
    @return ($variable-value, $fallback-value);
  }

  @return $variable-value;

}

////////////////////////////////////////////////////////////////////////////////
/// Add Unit                                                           #add-unit
////////////////////////////////////////////////////////////////////////////////

/// Adds a default unit to a number if one is not used.
/// @author Mark Notton
/// @group helpers-numbers
/// @param {number} $value
/// @param {string} $unit - If a value is unitless add the default unit.
/// @param {bool} $force - If the value already has a unit, and a different unit was specifically
///   supplied, this boolean desides wether to forcibly replace the unit.
/// @require {variable} default-unit
/// @require {variable} $relative-lengths
/// @require {variable} $abolute-lengths
/// @require {function} is-unit
/// @require {function} is-number
/// @require {function} strip
///
/// @example scss - Usage
///   add-unit(50)
///   add-unit(50px)
///   add-unit(50, %)
///   add-unit(50px, %)
///
/// @output scss - Output
///   50px
///   50px
///   50%
///   50%

@function add-unit2($value, $args...) {

  $defaults : (
    unit  : if(variable-exists(default-unit), $default-unit, 'px'),
    force : false,
  );

  $settings : get-settings($defaults, $args...);

  $unit  : map-get($settings, unit);
  $force : map-get($settings, force);

  // @if is-var($value) {
  //
  //   $values : to-list($value);
  //   $custom-property : nth($values, 1);
  //
  //   @if length($values) > 1 {
  //     $values : slice($values, 2);
  //     @for $val in $values {
  //       @debug $val;
  //
  //     }
  //   }
  // }

  @if type-of($value) == 'number' {
    @if unitless($value) {
      @return to-number($value + if($unit == null, $default-unit, $unit));
    }
    @elseif is-unit($value) {
      @if $force and $unit != null {
        @return to-number(remove-unit($value) + $unit);
      } @else {
        @return to-number($value);
      }
    }
  } @else {
    @return $value;
  }
}

@function add-unit($value, $unit:null, $replace:false) {
  @if type-of($value) == 'number' {
    @if unitless($value) {
      @return to-number($value + if($unit == null, $default-unit, $unit));
    }
    @elseif is-unit($value) {
      @if $replace and $unit != null {
        @return to-number(strip($value) + $unit);
      } @else {
        @return to-number($value);
      }
    }
  } @else {
    @return $value;
  }
}

@function decrease-by-percentage($unit, $percent, $type:true) {

  $unit : remove-unit($unit);
  $percent : remove-unit($percent);

  @if $type == true {
    @return $unit / 100 * (100 - $percent);
  } @else {
    @return $unit / 100 * (100 - ($percent * 100));
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Find Digits                                                     #find-digits
////////////////////////////////////////////////////////////////////////////////
///
/// Finding the digits part of a stringified number
///
/// @author Hugo Giraudel
///
/// @link https://github.com/HugoGiraudel/SassyCast
///
/// @access private
///
/// @group helpers-numbers
///
/// @param {string} $source - string source
///
/// @param {number} $pointer - current pointer
///
/// @return {list} - new pointer, parsed number

@function find-digits($source, $pointer) {
  $source: to-lower-case($source);
  $length: str-length($source);
  $numbers: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $result: 0;
  $runs: 1;

  @while $pointer <= $length {
    $token: str-slice($source, $pointer, $pointer);
    $index: index($numbers, $token);

    @if $token == "." {
      // @continue;
    }
    @else if $index and $index > 0 {
      $runs: $runs * 10;
      $result: $result * 10 + ($index - 1);
    }
    @else {
      @return $pointer, $result / $runs;
    }

    $pointer: $pointer + 1;
  }

  @return $pointer, $result / $runs;
}

////////////////////////////////////////////////////////////////////////////////
/// Find Interger                                                  #find-integer
////////////////////////////////////////////////////////////////////////////////
///
/// Finding the digits part of a stringified number
///
/// @author Hugo Giraudel
///
/// @link https://github.com/HugoGiraudel/SassyCast
///
/// @access private
///
/// @group helpers-numbers
///
/// @param {string} $source  - string source
///
/// @param {number} $pointer - current pointer
///
/// @return {list} new pointer, parsed number

@function find-integer($source, $pointer) {
  $source: to-lower-case($source);
  $length: str-length($source);
  $numbers: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $result: 0;

  @while $pointer <= $length {
    $token: str-slice($source, $pointer, $pointer);
    $index: index($numbers, $token);

    @if $token == "-" {
      // @continue;
    }
    @else if $index {
      $result: $result * 10 + ($index - 1);
    }
    @else {
      @return $pointer, $result;
    }

    $pointer: $pointer + 1;
  }

  @return $pointer, $result;
}

/// Strips any units from a number
///
/// @author Hugo Giraudel
///
/// @link https://css-tricks.com/snippets/sass/remove-unit-function/
///
/// @param {string} $number
///
/// @return {number}
///
/// @require {function} is-number
/// @require {function} to-number
///
/// @example scss - Usage
///   remove-unit(50px)
///
/// @example scss - Output
///   50
///

@function remove-unit($number) {

  @if not is-number($number) {
    $number : to-number($number);
  }

  @if is-number($number) and not unitless($number) {
    @return ($number / ($number * 0 + 1));
  }

  @return $number;
}

@function strip-unit($number) {
  @return remove-unit($number);
}

////////////////////////////////////////////////////////////////////////////////
/// Added Extension                                               #add-extension
////////////////////////////////////////////////////////////////////////////////

/// Add an extension to the end of a string if it doesn't already exist
/// @author Mark Notton
/// @access public
/// @group helpers-strings
/// @return {string}

@function add-extension($string, $extension) {
  @if is-extension($string, $extension) {
    @return to-string($string);
  } @else {
    @return $string + '.' + to-lower-case($extension);
  }
}

////////////////////////////////////////////////////////////////////////////////
/// String Compare                                               #string-compare
////////////////////////////////////////////////////////////////////////////////

/// Compares two string to determine which comes first
/// @author Hugo Giraudel
/// @link https://css-tricks.com/snippets/sass/sorting-function/
/// @access private
/// @group helpers-strings
/// @param {string} $a - first string
/// @parem {string} $b - second string
/// @param {list} $order - order to deal with
/// @return {bool}

@function string-compare($a, $b, $order) {

  @if type-of($a) == number and type-of($b) == number {
    @return $a < $b;
  }

  $a: to-lower-case($a + unquote(""));
  $b: to-lower-case($b + unquote(""));

  @for $i from 1 through min(str-length($a), str-length($b)) {

    $char-a: str-slice($a, $i, $i);
    $char-b: str-slice($b, $i, $i);

    @if $char-a and $char-b and index($order, $char-a) != index($order, $char-b) {
      @return index($order, $char-a) < index($order, $char-b);
    }

  }

  @return str-length($a) < str-length($b);
}

////////////////////////////////////////////////////////////////////////////////
/// String Ends With                                           #string-ends-with
////////////////////////////////////////////////////////////////////////////////

/// Check whether `$string` ends with `$needle`
/// @author Hugo Giraudel
/// @access public
/// @group helpers-strings
/// @link https://github.com/HugoGiraudel/SassyStrings/blob/master/dist/_SassyStrings.scss
/// @param {string} $string - string to check
/// @param {string} $needle - substring to check
/// @return {Bool}

@function string-ends-with($string, $needle) {
  @return str-slice($string, -1 * str-length($needle)) == $needle;
}

////////////////////////////////////////////////////////////////////////////////
/// String Explode                                               #string-explode
////////////////////////////////////////////////////////////////////////////////

/// Explode string into a list
/// @author Hugo Giraudel
/// @access public
/// @group helpers-strings
/// @link https://github.com/HugoGiraudel/SassyStrings/blob/master/dist/_SassyStrings.scss
/// @param {string} $string - String to split
/// @param {string} $delimiter - string to use as a delimiter to split `$string`
/// @param {string} $string - The string or array being searched and replaced on
/// @return {List}

@function string-explode($string, $delimiter: "") {
  $result: ();
  $length: str-length($string);

  @if str-length($delimiter) == 0 {
    @for $i from 1 through $length {
      $result: append($result, str-slice($string, $i, $i));
    }

    @return $result;
  }

  $running: true;
  $remaining: $string;

  @while $running {
    $index: str-index($remaining, $delimiter);

    @if $index {
      $slice: str-slice($remaining, 1, $index - 1);
      $result: append($result, $slice);
      $remaining: str-slice($remaining, $index + str-length($delimiter));
    } @else {
      $running: false;
    }
  }

  @return append($result, $remaining);
}

////////////////////////////////////////////////////////////////////////////////
/// String Replace                                               #string-replace
////////////////////////////////////////////////////////////////////////////////

/// Replace 'search' with '$replace' in '$string'. Reordered parameter order to match PHP str_replace
/// @author Hugo Giraudel
/// @access public
/// @group helpers-strings
/// @link https://css-tricks.com/snippets/sass/str-replace-function
/// @param {string} $search - The value being searched for
/// @param {string} $replace - The replacement value that replaces found search values
/// @param {string} $string - The string or array being searched and replaced on
/// @return {string} - Updated string

@function string-replace($string, $search, $replace:'') {
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

/// Str Replace =================================================== #str-replace

/// @ignore This is an alias for string-replace
/// @alias string-replace
/// @access public
/// @require {function} string-replace
/// @return {string}

@function str-replace($string, $search:'', $replace:'') {
  @return string-replace($search, $string, $replace);
}

////////////////////////////////////////////////////////////////////////////////
/// String Starts With                                       #string-starts-with
////////////////////////////////////////////////////////////////////////////////

/// Check whether `$string` starts with `$needle`
/// @author Hugo Giraudel
/// @access public
/// @group helpers-strings
/// @link https://github.com/HugoGiraudel/SassyStrings/blob/master/dist/_SassyStrings.scss
/// @param {string} $string - string to check
/// @param {string} $needle - substring to check
/// @return {Bool}

@function string-starts-with($string, $needle) {
  @return str-slice($string, 1, str-length($needle)) == $needle;
}

////////////////////////////////////////////////////////////////////////////////
/// String To Hex                                                 #string-to-hex
////////////////////////////////////////////////////////////////////////////////

/// Cast a string into a hexadecimal color
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @access private
/// @group helpers-strings
/// @param {string} $string - string
/// @return {color | String} - string or hex color depending on the match
/// @require {function} hex-to-dec

@function string-to-hex($string) {
  $string-lower: to-lower-case($string);
  $r: "";  $g: ""; $b: "";
  $hex: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9" "a" "b" "c" "d" "e" "f";
  $length: str-length($string);
  $max: if($length == 4, 1, 2);

  // Check for length accuracy
  @if $length != 4 and $length != 7 {
    @return $string;
  }

  // Loop from the second character (omitting #)
  @for $i from 2 through $length {
    $c: str-slice($string-lower, $i, $i);

    // If wrong character, return
    @if not index($hex, $c) {
      @return $string;
    }

    @if      str-length($r) < $max { $r: $r + $c }
    @else if str-length($g) < $max { $g: $g + $c }
    @else if str-length($b) < $max { $b: $b + $c }
  }

  @if $length == 4 {
    $r: $r + $r;
    $g: $g + $g;
    $b: $b + $b;
  }

  @return rgb(hex-to-dec($r), hex-to-dec($g), hex-to-dec($b));
}

////////////////////////////////////////////////////////////////////////////////
/// String To HSL                                                 #string-to-hsl
////////////////////////////////////////////////////////////////////////////////

/// Cast a string into a hsl color
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @access private
/// @group helpers-strings
/// @param {string} $string - string
/// @return {color | String} - string or hsl color depending on the match
/// @require {function} get-color-value

@function string-to-hsl($string) {
  $frags: ();
  $string-lower: to-lower-case($string);
  $is-alpha: str-slice($string-lower, 4, 4) == 'a';
  $length: str-length($string);
  $start: str-index($string, "(");

  @for $i from $start through $length {
    $token: str-slice($string-lower, $i, $i);
    @if $token == ' ' {
      // @continue;
    }
    @else if $token == '(' or $token == ',' {
      $frags: append($frags, "");
    }
    @else if $token == ')' {
      @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error
      $hue: get-color-value(nth($frags, 1));
      $saturation: get-color-value(nth($frags, 2));
      $lightness: get-color-value(nth($frags, 3));

      @if not $hue or not $saturation or not $lightness {
        @return $string;
      }

      @if $is-alpha {
        @if length($frags) != 4 { @return $string; } // No alpha channel found
        $alpha: get-color-value(nth($frags, 4));
        @if not $alpha { @return $string; } // Error parsing alpha channel
        @return hsla($hue, $saturation, $lightness, $alpha);
      }

      @return hsl($hue, $saturation, $lightness);
    }
    @else {
      $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);
    }
  }

  @return $string;
}

////////////////////////////////////////////////////////////////////////////////
/// String To RGB                                                 #string-to-rgb
////////////////////////////////////////////////////////////////////////////////

/// Cast a string into a rgb color
/// @author Hugo Giraudel
/// @link https://github.com/HugoGiraudel/SassyCast
/// @access private
/// @group helpers-strings
/// @param {string} $string - string
/// @return {color | string} - string or rgb color depending on the match
/// @require {function} get-color-value

@function string-to-rgb($string) {
  $string-lower: to-lower-case($string);
  $frags: ();
  $is-alpha: str-slice($string-lower, 4, 4) == 'a';
  $start: str-index($string, "(");
  $length: str-length($string);

  @for $i from $start through $length {
    $token: str-slice($string-lower, $i, $i);
    @if $token == ' ' {
      // @continue;
    }
    @else if $token == '(' or $token == ',' {
      $frags: append($frags, "");
    }
    @else if $token == ')' {
      @if length($frags) != if($is-alpha, 4, 3) { @return $string; } // Parsing error
      $red: get-color-value(nth($frags, 1));
      $green: get-color-value(nth($frags, 2));
      $blue: get-color-value(nth($frags, 3));

      @if not $red or not $green or not $blue {
        @return $string;
      }

      @if $is-alpha {
        @if length($frags) != 4 { @return $string; } // No alpha channel found
        $alpha: get-color-value(nth($frags, 4));
        @if not $alpha { @return $string; } // Error parsing alpha channel
        @return rgba($red, $green, $blue, $alpha);
      }

      @return rgb($red, $green, $blue);
    }
    @else {
      $frags: set-nth($frags, length($frags), nth($frags, length($frags)) + $token);
    }
  }

  @return $string;
}

/// Generate gaps from a generic unit so help continuity of paddings, margins,
/// gutters etc... throughout your design.
///
/// @param {Number} $size
///   Enter the amount of times you want to multiply the default padding variable
///
/// @require {Variable} $gaps
///
/// @example scss - Usage
///   margin:0 gap(3);
/// @return {Number} with units
@function gap($size:1) {
  @return if($size == 0, to-number(add-unit($gaps/2, $default-unit)), to-number(add-unit($gaps*$size, $default-unit)));
}

////////////////////////////////////////////////////////////////////////////////
/// Get Padding                                                     #get-padding
////////////////////////////////////////////////////////////////////////////////
///
/// Get a specific padding list value based on it's direction.
/// Designed so that you could get the 'left' padding of a defined list.
/// This will figure out the fallbacks should the defined list not have the correct amount of items;
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-numbers
///
/// @return {number}

@function get-padding($padding, $direction) {

  $length : length($padding);
  $result : $padding;

  @if $length != 1 {

    // Top
    @if $direction == top {
      $result : nth($padding, 1);
    }
    // Right
    @if $direction == right {
      @if $length >= 2 {
        $result : nth($padding, 2);
      } @else {
        $result : nth($padding, 1);
      }
    }

    // Bottom
    @if $direction == bottom {
      @if $length >= 3 {
        $result : nth($padding, 3);
      } @else {
        $result : nth($padding, 1);
      }
    }

    // Left
    @if $direction == left {
      @if $length == 4 {
        $result : nth($padding, 4);
      } @elseif $length >= 2 {
        $result : nth($padding, 2);
      } @else {
        $result : nth($padding, 1);
      }
    }

  }

  @return $result;
}

@function increase-by-percentage($unit, $percent, $type:true) {

  $unit : remove-unit($unit);
  $percent : remove-unit($percent);

  @if $type == true {
    @return $unit / 100 * (100 + $percent);
  } @else {
    @return $unit / 100 * (100 + ($percent * 100));
  }
}

////////////////////////////////////////////////////////////////////////////////
/// Min Max Number                                               #min-max-number
////////////////////////////////////////////////////////////////////////////////
///
/// If a number can only be within a certain bounds, check it and return a max, min, or acceptable value
/// @author Mark Notton
///
/// @access private
///
/// @group helpers-numbers
///
/// @param {number}

@function min-max-number($value, $min:1, $max:100) {
  @if (is-number($value $min $max)) {
    $value : if($value <= $min, $min, $value);
    $value : if($value >= $max, $max, $value);
  }
  @return $value;
}

////////////////////////////////////////////////////////////////////////////////
/// Percent To Decinmal                                      #percent-to-decimal
////////////////////////////////////////////////////////////////////////////////
///
/// Convert a percentage or an unit greater than 1 into a single decimal point number.
///
/// @author Mark Notton
///
/// @access public
///
/// @group helpers-numbers
///
/// @param {number} $number
///
/// @return {color}
///
/// @example scss - Usage
/// opacity:_parecent-to-decimal(55);
/// opacity:_parecent-to-decimal(100%);
/// opacity:_parecent-to-decimal(0.5);
///
/// @example css - CSS output
/// opacity:0.55;
/// opacity:1;
/// opacity:0.5;
///

@function percent-to-decimal($number) {
  @if is-percentage($number) {
    @return remove-unit($number)/100;
  } @else {
    @if $number > 1 {
      @return $number/100;
    } @else {
      @return $number;
    }
  }
}

/// Generate space from a generic unit to help continuity of paddings, margins,
/// gutters etc... throughout your design.
///
/// @param {Number} $size
///   Enter the amount of times you want to multiply the default padding variable
///
/// @param {String} $direction
///   The unit you want the spacing to be defined as. Default is vh
///
/// @require {Variable} $spacing global variable
///
/// @example scss - Usage
///   margin-top:space(2);
///
/// @return {number} with units

@function space($args...) {

  $defaults : (
    size      : 1,
    direction : vh,
    unit      : if(variable-exists(space),$space, 5vh),
  );

  $settings : get-settings($defaults, $args...);

  $size      : map-get($settings, size);
  $direction : map-get($settings, direction);
  $unit      : map-get($settings, unit);

  @if $size == 0 {
    @return to-number(add-unit($unit/2, $direction, true));
  } @else {
    @return to-number(add-unit($unit*$size, $direction, true));
  }

}

/// Create a spacer relative to the viewport height or width. Whilst also adding
/// a calc method to ensure that space is always at least the size of a solid unit (px)
/// @param {Number} $size - Enter the amount of viewport units to add. 3 = 3% of the viewport height
/// @param {Number} $min - Enter the amount of pixels the spcaer should never go below;
/// @param {String} $direction - The unit you want the spacing to be defined as. Default is vh
/// @example margin-top:spacer(2, 30);
/// @output margin-top:calc(2vh + 30px);
/// @return {number} with units

@function spacer($args...) {

  $defaults : (
    size      : $space,
    min       : $gap,
    direction : vh,
  );

  $settings : get-settings($defaults, $args...);

  $direction : map-get($settings, direction);

  $size      : add-unit(map-get($settings, size), $direction);
  $min       : add-unit(map-get($settings, min));

  @return calc(#{$size} + #{$min});
}

////////////////////////////////////////////////////////////////////////////////
// Settings                                                            #settings
////////////////////////////////////////////////////////////////////////////////

@mixin settings() {

	// =============================================================================
	// Options                                                              #options
	// =============================================================================

	// Show warnings
	$warnings : true !default !global;

	// Include a variety of custom-element and markup styling
	$global-styling : true !default !global;

	// Default border radius
	$border-radius : 10px !default !global;

	// Default units
	$default-unit : px !default !global;

	// Default units for fonts and line-heights
	$default-font-unit : px !default !global;

	// Default units for timings
	$default-timing-unit : s !default !global;

	// This only works when css variable colours are defined as an RGB list, NOT Hex colours.
	$support-css-variable-alpha-colours : false !default !global;
	$support-css-variable-alpha-colors : $support-css-variable-alpha-colours !default !global;

	// =============================================================================
	// Normalisers                                                        #normalise
	// =============================================================================

	$normalise                   : true  !default !global;
	$normalise-section-elements  : true  !default !global;
	$normalise-header-elements   : true  !default !global;
	$normalise-grouping-elements : true  !default !global;
	$normalise-table-elements    : true  !default !global;
	$normalise-form-elements     : true  !default !global;
	$normalise-embedded-elements : true  !default !global;
	$normalise-text-elements     : true  !default !global;
	$normalise-emailers          : false !default !global;

	// =============================================================================
	// Aspect Ratios                                                  #aspect-ratios
	// =============================================================================

	$aspect-ratios : (
	  4x3   : 75%,
	  16x9  : 56.25%,
	  16x10 : 62.5%,
	) !default !global;

	// =============================================================================
	// Directories                                                      #directories
	// =============================================================================

	$images  : "/assets/images/"         !default !global;
	$sprites : "/assets/images/sprites/" !default !global;
	$fonts   : "/assets/fonts/"          !default !global;

	// =============================================================================
	// Gaps                                                                    #gaps
	// =============================================================================

	$gaps : 16     !default !global;
	$gap  : gap(1) !default !global;
	$gap0 : gap(0) !default !global;
	$gap1 : add-unit($gap) !default !global;
	$gap2 : gap(2) !default !global;
	$gap3 : gap(3) !default !global;
	$gap4 : gap(4) !default !global;
	$gap5 : gap(5) !default !global;
	$gap6 : gap(6) !default !global;

	// =============================================================================
	// Gutters                                                              #gutters
	// =============================================================================

	$gutter-left     : $gap2 !default !global;
	$gutter-right    : $gap2 !default !global;
	$gutters         : add-unit($gutter-left + $gutter-right) !default !global;

	// =============================================================================
	// Spacers                                                              #spacers
	// =============================================================================

	$spacing:            5 !default !global;
	$vertical-spacing:   $spacing !default !global;
	$horizontal-spacing: $spacing !default !global;

	// Horizontal Spacers
	$hspace:  space(1, vw, $horizontal-spacing) !default !global;
	$hspace1: $hspace !default !global;
	$hspace0: space(0, vw, $horizontal-spacing) !default !global;
	$hspace2: space(2, vw, $horizontal-spacing) !default !global;
	$hspace3: space(3, vw, $horizontal-spacing) !default !global;
	$hspace4: space(4, vw, $horizontal-spacing) !default !global;
	$hspace5: space(5, vw, $horizontal-spacing) !default !global;

	// Vertical Spacers
	$vspace:  space(1, vh, $vertical-spacing) !default !global;
	$vspace1: $vspace !default !global;
	$vspace0: space(0, vh, $vertical-spacing) !default !global;
	$vspace2: space(2, vh, $vertical-spacing) !default !global;
	$vspace3: space(3, vh, $vertical-spacing) !default !global;
	$vspace4: space(4, vh, $vertical-spacing) !default !global;
	$vspace5: space(5, vh, $vertical-spacing) !default !global;

	// As this is likely to be used more often, these are aliased to the vspace variables
	$space:  $vspace  !default !global;
	$space1: $vspace1 !default !global;
	$space0: $vspace0 !default !global;
	$space2: $vspace2 !default !global;
	$space3: $vspace3 !default !global;
	$space4: $vspace4 !default !global;
	$space5: $vspace5 !default !global;

	// =============================================================================
	// Miscellaneous
	// =============================================================================

	// Shorthand for !important (for the lazy)
	$imp : !important !default !global;

	// =============================================================================
	// Media Quries & Breakpoints                                     #media-queries
	// =============================================================================

	$mobile-first:  false !default !global;

	$max:           1440px !default !global;
	$min:           320px  !default !global;
	$small:         480px  !default !global;
	$large:         1200px !default !global;
	$medium:        (($large - $small) / 2) + $small !default !global; // 780px
	$small-medium:  (($medium - $small) / 2) + $small !default !global; // 630px

	$show-breakpoints : false !default !global;
	$show-breakpoints-selector : 'body.dev-environment' !default !global;

	// =============================================================================
	// Notches                                                              #notches
	// =============================================================================

	$support-notches : false !default !global;

	$notches : (
	  iphoneX : 30pt 209pt,
	) !default !global;

	// =============================================================================
	// Text
	// =============================================================================

	@if $default-font-unit == 'rem' {
	  $font-size: add-unit(1.6, $default-font-unit) !default !global;
	  $h1: add-unit(remove-unit($font-size)*2.5,                                     $default-font-unit) !default !global; // 4.0em
	  $h2: add-unit((($h1 - remove-unit($font-size)) / 2) + remove-unit($font-size), $default-font-unit) !default !global; // 2.8em
	  $h3: add-unit((($h2 - remove-unit($font-size)) / 2) + remove-unit($font-size), $default-font-unit) !default !global; // 2.2em
	  $h4: add-unit((($h3 - remove-unit($font-size)) / 2) + remove-unit($font-size), $default-font-unit) !default !global; // 1.9em
	  $h5: add-unit((($h4 - remove-unit($font-size)) / 2) + remove-unit($font-size), $default-font-unit) !default !global; // 1.75em
	  $h6: add-unit((($h5 - remove-unit($font-size)) / 2) + remove-unit($font-size), $default-font-unit) !default !global; // 1.675em
	} @else {
	  $font-size: add-unit(16, $default-font-unit) !default !global;
	  $h1: add-unit(ceil((remove-unit($font-size)*2.5)),                                   $default-font-unit) !default !global; // 40px
	  $h2: add-unit(ceil((($h1 - remove-unit($font-size)) / 2) + remove-unit($font-size)), $default-font-unit) !default !global; // 28px
	  $h3: add-unit(ceil((($h2 - remove-unit($font-size)) / 2) + remove-unit($font-size)), $default-font-unit) !default !global; // 22px
	  $h4: add-unit(ceil((($h3 - remove-unit($font-size)) / 2) + remove-unit($font-size)), $default-font-unit) !default !global; // 19px
	  $h5: add-unit(ceil((($h4 - remove-unit($font-size)) / 2) + remove-unit($font-size)), $default-font-unit) !default !global; // 17px
	  $h6: add-unit(ceil((($h5 - remove-unit($font-size)) / 2) + remove-unit($font-size)), $default-font-unit) !default !global; // 16px
	}

	// ===========================================================================
	// Colours
	// ===========================================================================

	// Commmon
	$red      : #97080E           !default !global;
	$red1     : $red              !default !global;
	$red2     : darken($red, 10)  !default !global;
	$red3     : lighten($red, 10) !default !global;

	$orange   : #DA4B0F              !default !global;
	$orange1  : $orange              !default !global;
	$orange2  : darken($orange, 10)  !default !global;
	$orange3  : lighten($orange, 10) !default !global;

	$yellow   : #E9B104              !default !global;
	$yellow1  : $yellow              !default !global;
	$yellow2  : darken($yellow, 10)  !default !global;
	$yellow3  : lighten($yellow, 10) !default !global;

	$green    : #488C13             !default !global;
	$green1   : $green              !default !global;
	$green2   : darken($green, 10)  !default !global;
	$green3   : lighten($green, 10) !default !global;

	$blue     : #1B55C0            !default !global;
	$blue1    : $blue              !default !global;
	$blue2    : darken($blue, 10)  !default !global;
	$blue3    : lighten($blue, 10) !default !global;

	$pink     : #E05D6B            !default !global;
	$pink1    : $pink              !default !global;
	$pink2    : darken($pink, 10)  !default !global;
	$pink3    : lighten($pink, 10) !default !global;

	$purple   : #613D5A              !default !global;
	$purple1  : $purple              !default !global;
	$purple2  : darken($purple, 10)  !default !global;
	$purple3  : lighten($purple, 10) !default !global;

	$grey     : #787878            !default !global;
	$grey1    : $grey              !default !global;
	$grey2    : darken($grey, 10)  !default !global;
	$grey3    : lighten($grey, 10) !default !global;

	$brown    : #774F38             !default !global;
	$brown1   : $brown              !default !global;
	$brown2   : darken($brown, 10)  !default !global;
	$brown3   : lighten($brown, 10) !default !global;

	$white    : #FFFFFF             !default !global;
	$white1   : $white              !default !global;
	$white2   : darken($white, 10)  !default !global;

	$black    : #000000 !default !global;
	$black1   : $black !default !global;
	$black2   : lighten($black, 10) !default !global;


	// Social Media
	$facebook:    #3A5897 !default !global;
	$twitter:     #00aced !default !global;
	$google:      #df5146 !default !global;
	$youtube:     #CD1F1F !default !global;
	$linkedin:    #1D77B5 !default !global;
	$instagram:   #E33F5E !default !global;
	$pinterest:   #BC071D !default !global;
	$dailymotion: #0066DC !default !global;
	$vine:        #14B487 !default !global;
	$snapchat:    #FCFB00 !default !global;
	$flickr:      #EB1D82 !default !global;
	$vimeo:       #aad450 !default !global;
	$wordpress:   #20759A !default !global;
	$blogger:     #F4811E !default !global;
	$thumbler:    #36465C !default !global;
	$reddit :     #FC4501 !default !global;
	$ello :       #221F1F !default !global;

	$social-media-colours : (
	  facebook:   $facebook,
	  twitter:    $twitter,
	  google:     $google,
	  googleplus: $google,
	  youtube:    $youtube,
	  linkedin:   $linkedin,
	  instagram:  $instagram,
	  pinterest:  $pinterest,
	  dailymotion:$dailymotion,
	  vine:       $vine,
	  snapchat:   $snapchat,
	  flickr:     $flickr,
	  vimeo:      $vimeo,
	  wordpress:  $wordpress,
	  blogger:    $blogger,
	  thumbler:   $thumbler,
	  reddit :    $reddit ,
	  ello :      $ello
	) !default !global;

	// Special Colours
	$yello:       #FFCB08      !default !global;
	$selection:   #B2D3FA      !default !global;
	$text-colour: $black       !default !global;
	$text:        $text-colour !default !global;

	// ===========================================================================
	// Custom Properties
	// ===========================================================================

	$breakpoints:   () !default !global;

	$_custom-properties : (
	  gap                : add-unit($gap),
	  vertical-spacing   : add-unit($vertical-spacing, vh),
	  horizontal-spacing : add-unit($horizontal-spacing, vw),
	  gutters            : add-unit($gutters),
	  gutter-left        : add-unit($gutter-left),
	  gutter-right       : add-unit($gutter-right),
	  border-radius      : add-unit($border-radius),
	  font-size          : $font-size,
	  min                : add-unit($min, px, true),
	  small              : add-unit($small, px, true),
	  small-medium       : add-unit($small-medium, px, true),
	  medium             : add-unit($medium, px, true),
	  large              : add-unit($large, px, true),
	  max                : add-unit($max, px, true),
	) !default !global;

	@if variable-exists(custom-properties) {
	  $custom-properties: map-merge($custom-properties, $_custom-properties) !global;
	} @else {
	  $custom-properties : $_custom-properties !global;
	}

}

////////////////////////////////////////////////////////////////////////////////
/// Properties                                                       #properties
////////////////////////////////////////////////////////////////////////////////

/// ============================================================================
/// Validators                                                       #validators
/// ============================================================================

$blend-modes : initial inherit unset screen overlay darken lighten color-dodge multiply color-burn hard-light soft-light difference exclusion hue saturation color luminosity normal;

$vendors : webkit moz ms o;

$gradient-types : linear radial repeating-linear repeating-radial linear-repeat radial-repeat circle elipse;

$transform-types : matrix translate translateX translateY scale scaleX scaleY rotate skew skewX skewY matrix3d translate3d translateZ scale3d scaleZ rotate3d rotateX rotateY rotateZ perspective;

$transform-values : inherit initial unset none;

$filter-values : inherit initial unset;

$filter-types : url blur brightness contrast drop-shadow shadow grayscale greyscale hue-rotate hue invert opacity saturate sepia;

$relative-units : em, ex, %, px, cm, mm, in, pt, pc, ch, rem, vh, vw, vmin, vmax;

$absolute-units : cm, mm, in, px, pt, pc;

$resolution-units : dpi, dpcm, dppx;

$all-units : join($relative-units, $absolute-units);

$angel-types : deg rad grad turn;

/// ============================================================================
/// Eases                                                                 #eases
/// ============================================================================

/// CSS cubic-bezier timing functions from Ceaser Easeing.
/// @author Jared Hardy
/// @link https://github.com/jhardy/compass-ceaser-easing
/// @access public
/// @type string

$linear            : cubic-bezier(0.250, 0.250, 0.750, 0.750);
$ease              : cubic-bezier(0.250, 0.100, 0.250, 1.000);

$ease-in           : cubic-bezier(0.420, 0.000, 1.000, 1.000);
$ease-out          : cubic-bezier(0.000, 0.000, 0.580, 1.000);
$ease-in-out       : cubic-bezier(0.420, 0.000, 0.580, 1.000);

$ease-in-quad      : cubic-bezier(0.550, 0.085, 0.680, 0.530);
$ease-in-cubic     : cubic-bezier(0.550, 0.055, 0.675, 0.190);
$ease-in-quart     : cubic-bezier(0.895, 0.030, 0.685, 0.220);
$ease-in-quint     : cubic-bezier(0.755, 0.050, 0.855, 0.060);
$ease-in-sine      : cubic-bezier(0.470, 0.000, 0.745, 0.715);
$ease-in-expo      : cubic-bezier(0.950, 0.050, 0.795, 0.035);
$ease-in-circ      : cubic-bezier(0.600, 0.040, 0.980, 0.335);
$ease-in-back      : cubic-bezier(0.600, -0.280, 0.735, 0.045);

$ease-out-quad     : cubic-bezier(0.250, 0.460, 0.450, 0.940);
$ease-out-cubic    : cubic-bezier(0.215, 0.610, 0.355, 1.000);
$ease-out-quart    : cubic-bezier(0.165, 0.840, 0.440, 1.000);
$ease-out-quint    : cubic-bezier(0.230, 1.000, 0.320, 1.000);
$ease-out-sine     : cubic-bezier(0.390, 0.575, 0.565, 1.000);
$ease-out-expo     : cubic-bezier(0.190, 1.000, 0.220, 1.000);
$ease-out-circ     : cubic-bezier(0.075, 0.820, 0.165, 1.000);
$ease-out-back     : cubic-bezier(0.175, 0.885, 0.320, 1.275);

$ease-in-out-quad  : cubic-bezier(0.455, 0.030, 0.515, 0.955);
$ease-in-out-cubic : cubic-bezier(0.645, 0.045, 0.355, 1.000);
$ease-in-out-quart : cubic-bezier(0.770, 0.000, 0.175, 1.000);
$ease-in-out-quint : cubic-bezier(0.860, 0.000, 0.070, 1.000);
$ease-in-out-sine  : cubic-bezier(0.445, 0.050, 0.550, 0.950);
$ease-in-out-expo  : cubic-bezier(1.000, 0.000, 0.000, 1.000);
$ease-in-out-circ  : cubic-bezier(0.785, 0.135, 0.150, 0.860);
$ease-in-out-back  : cubic-bezier(0.680, -0.550, 0.265, 1.550);

////////////////////////////////////////////////////////////////////////////////
// Placeholders                                                    #placeholders
////////////////////////////////////////////////////////////////////////////////

// =============================================================================
// Position
// =============================================================================

%hidden {
  opacity:0;
  pointer-events:none;
}

%visible {
  opacity:1;
  pointer-events:auto;
}

%full {
  position:absolute;
  top:0; left:0; right:0; bottom:0;
  width:100%; height:100%;
}

%absolute-center {
  position:absolute;
  top:0; left:0; right:0; bottom:0;
  margin:auto;
}

// =============================================================================
// Clear
// =============================================================================

%clear-fix, %clearfix {
  &::after {
    content: "";
    clear: both;
    display: table;
  }
}

// =============================================================================
// Pseudo
// =============================================================================

%sudo, %pseudo {
  content:"";
  @extend %full;
}

// =============================================================================
// Text
// =============================================================================

%font-smooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

%font-default {
  font-family: Helvetica, Arial, sans-serif;
  @extend %font-smooth;
}

%hide-text {
  text-indent:110%; overflow:hidden; white-space:nowrap;
}

%show-text {
  text-indent:0; overflow:visible; white-space:normal; user-select:all;
}

@mixin animation-jump($amount:10, $animation-name:jump) {
  @include keyframes(#{$animation-name}) {  
    0% { top:0 } 
    50% { top:$amount + px } 
    100% { top:0 } 
  }
}
@mixin animation-shake($amount:10, $animation-name:shake) {
  @include keyframes(#{$animation-name}) {
    0% { transform:rotate(0) }
    25% { transform:rotate(-#{$amount}deg) }
    75% { transform:rotate(#{$amount}deg) }
    100% { transform:rotate(0) }
  }
}

@mixin animation-wobble($amount:10, $animation-name:wobble) {
  @include keyframes(#{$animation-name}) { 
    0% { left:0 } 
    25% { left:(-$amount) + px } 
    75% { left:($amount) + px } 
    100% { left:0 } 
  }
}
// Add a breakpoint to a global map, which can be called on using the 'breaks' function
@mixin add-breakpoint($args...) {

  @for $i from 1 through length($args) {

    $name : null;
    $size : null;

    $arg: nth($args, $i);

    @each $rule in $arg {
      @if type-of($rule) == string {
        $name : $rule;
      }
      @if type-of($rule) == number {
        $size : remove-unit($rule);
      }
    }

    $name : if($name == null and type-of($size) == number, #{$size}, $name);

    @if $name and $size {
      $breakpoints : map-set($breakpoints, $name, $size) !global;
    }
  }
  @at-root body { @include set-breakpoints(); }
}

// Breakpoint bewtween two points
@mixin break-between($min, $max, $property:width) {
  @media only screen and (min-#{$property}:add-unit($min)) and (max-#{$property}: add-unit($max)) {
    @content;
  }
}
@mixin breakpoint($args) {

  @if (is-null($args)) {
    @content;
  } @else {
    $width : null;
    $condition : if($mobile-first, min-width, max-width);

    @each $rule in $args {
      @if is_number($rule) {
        $width : add-unit($rule);
      }
      @if is_string($rule) {
        @if $rule == 'min' or $rule == '>' {
          $rule : 'min-width';
        } @else if $rule == 'max' or $rule == '<' {
          $rule : 'max-width';
          $width : $width - 1;
        }
        $condition : $rule;
      }
    }

    // @if not contains($breakpoints, $width) {
    //   @include add-breakpoint($width);
    // }
    // TODO: Add one for min, minus one for max

    @media (#{$condition}:add-unit($width)) {
      @content;
    }
  }
}

@mixin break($args...) {
  @include breakpoint($args) { @content };
}

@mixin break-in($breakpoint) {

  @if is-breakpoint($breakpoint) {
    $breakpoint : get-breakpoint($breakpoint);
  }

  @media (max-width:add-unit($breakpoint)) {
    @content;
  }
}

@mixin break-out($breakpoint) {

  @if is-breakpoint($breakpoint) {
    $breakpoint : get-breakpoint($breakpoint);
  }

  @media (min-width:add-unit($breakpoint)) {
    @content;
  }
}

// Get breakpoint from the breakpoint list, either by it's number or name
@function get-breakpoint($break) {
  @if is-string($break) and map-has-key($breakpoints, $break) {
    // If a string is passed and exists in the breakpoints map as a key, return the value
    @return map-get($breakpoints, $break);
  } @elseif is-number($break) {
    $number : remove-unit($break);
    // If a number is passed and it exists in the breakpoints map, return the key
    @if contains(map-values($breakpoints), $number) {
      $list : null;
      $nth : 1;
      @each $break in map-values($breakpoints) {
        $nth : $nth + 1;
        @if $break == $number {
          $list : add(nth(map-keys($breakpoints),$nth), $list);
        }
      }
      @if length($list) == 1 {
        @return nth($list, 1);
      } @else {
        @return $list;
      }
    } @else {
      // @include warning($number + ' is not a breakpoint');
      @return false;
    }
  }
}

@mixin hide-at($break) {
  @include break($break) {
    display:none;
    & { @content; }
  }
}

// Check if a breakpoint exists by it's number or name.
@function is-breakpoint($break) {
  // If the number is a string and exists as a key in the breakpoints map, return true
  @if is-string($break) and map-has-key($breakpoints, $break) {
    @return true;
  } @else {
    // Or if the number exists as a value anywhere in the breakpoints map, also return true
    $number : remove-unit($break);
    @if contains(map-values($breakpoints), $number) {
      @return true;
    } @else {
      @return false;
    }
  }
}

// Set breakpoints for use with custom properties
@mixin set-breakpoints($breaks:$breakpoints) {
  $new-breakpoints : ();
  @each $break, $value in $breakpoints {
    $new-breakpoints : map-set( $new-breakpoints, #{breakpoint-}#{$break}, $value);
  }
  @include custom-property($new-breakpoints);
}

@mixin show-at($break) {
  @include break($break) {
    display:block;
    & { @content; }
  }
}

@mixin show-breakpoints($sudo : before) {
  #{$show-breakpoints-selector}:#{$sudo} {
    content:"\276F  #{$max}px";
    background-color:darken($red, 20);
    bottom:0;
    right:0;
    font-family:Arial;
    padding:4px $gap0;
    @include ani(background-color color);
    pointer-events:none;
    position:fixed;
    z-index:9999;
    font-size:12px;
    line-height:16px;
    color:white;
    text-align:center;
    @each $name, $value in $breakpoints {
      $random-color: random-colour();
      @include break($value) {
        content:"#{$name} #{$value}px";
        background-color:$random-color;
        color:colour-contrast($random-color);
      }
    }
  }
}

//
// Pass in a Map or List
//
// Lists should consist of element types, either by element, class or id (class and id's should be quoted strings)
// @include grid-areas( nav, header, main, quick-links, blockquote, article, footer );

// Maps keys should be the elements, class or id. Values should be the desired grid-area name
// @include grid-areas((
//   nav : '',
//   header : header,
//   main : main,
//   quick-links: quick-links,
//   blockquote : blockquote,
//   article : article,
//   footer : footer,
// ));

@mixin grid-areas($settings...) {

  $elements : ();

  @if (length($settings) > 1 and is-list( arglist-to-list($settings))) {
    @each $element in $settings {
      $elements : append($elements, $element, comma);
      $area : str-replace($element, '.');
      $area : str-replace($element, '#');
      #{$element} { grid-area:unquote($area); }
    }
  } @elseif is-map($settings) {
    @each $element, $area in $settings {
      $elements : append($elements, $element, comma);
      $area : if(is-empty($area), $element, $area);
      #{$element} { grid-area:unquote($area); }
    }
  }

  // @if content-exists() {
  //   #{$elements} {
  //     @content;
  //   }
  // }
}

////////////////////////////////////////////////////////////////////////////////
/// Grid Layouts                                                   #grid-layouts
////////////////////////////////////////////////////////////////////////////////

// =============================================================================
// 2x Blocks
// =============================================================================

// ┍─────┐┍─────┐
// │  1  ││  2  │
// └─────┘└─────┘
$grid-template-2-blocks-1x2: "block1 block2";

// =============================================================================
// 3x Blocks
// =============================================================================

// ┍───┐┍───┐┍───┐
// │ 1 ││ 2 ││ 3 │
// └───┘└───┘└───┘
$grid-template-3-blocks-1x3: "block1 block2 block3";

// -----------------------------------------------------------------------------

// ┍─────┐┍─────┐
// │  1  ││  2  │
// └─────┘└─────┘
// ┍────────────┐
// │  3         │
// └────────────┘
$grid-template-3-blocks-1x2-3x3: "block1 block2" "block3 block3";

// ┍─────┐┍─────┐
// │  1  ││  2  │
// │     │└─────┘
// │     │┍─────┐
// │     ││  3  │
// └─────┘└─────┘
$grid-template-3-blocks-1x2-1x3: "block1 block2" "block1 block3";

// ┍────────────┐
// │  1         │
// └────────────┘
// ┍─────┐┍─────┐
// │  2  ││  3  │
// └─────┘└─────┘
$grid-template-3-blocks-1x1-2x3: "block1 block1" "block2 block3";

// ┍─────┐┍─────┐
// │  1  ││  2  │
// └─────┘│     │
// ┍─────┐│     │
// │  3  ││     │
// └─────┘└─────┘
$grid-template-3-blocks-1x2-3x2: "block1 block2" "block3 block2";

// =============================================================================
// 4x Blocks
// =============================================================================

// ┍─────┐┍─────┐
// │  1  ││  2  │
// └─────┘└─────┘
// ┍─────┐┍─────┐
// │  3  ││  4  │
// └─────┘└─────┘
$grid-template-4-blocks-1x2-3x4: "block1 block2" "block3 block4";

// -----------------------------------------------------------------------------

// ┍─────┐┍─────┐
// │  1  ││  2  │
// │     │└─────┘
// │     │┍─────┐
// │     ││  3  │
// │     │└─────┘
// │     │┍─────┐
// │     ││  4  │
// └─────┘└─────┘
$grid-template-4-blocks-1x2-1x3-1x4: "block1 block2" "block1 block3" "block1 block4";

// ┍─────────────┐
// │ 1           │
// └─────────────┘
// ┍───┐┍───┐┍───┐
// │ 2 ││ 3 ││ 4 │
// └───┘└───┘└───┘
$grid-template-4-blocks-1x1x1-2x3x4: "block1 block1 block1" "block2 block3 block4";

// ┍─────┐┍─────┐
// │  1  ││  4  │
// └─────┘│     │
// ┍─────┐│     │
// │  2  ││     │
// └─────┘│     │
// ┍─────┐│     │
// │  3  ││     │
// └─────┘└─────┘
$grid-template-4-blocks-1x2-2x4-3x4: "block1 block2" "block2 block4" "block3 block4";

// 270 Degrees
// ┍───┐┍───┐┍───┐
// │ 1 ││ 2 ││ 3 │
// └───┘└───┘└───┘
// ┍─────────────┐
// │ 4           │
// └─────────────┘
$grid-template-4-blocks-1x2x3-4x4x4: "block1 block2 block3" "block4 block4 block4";

// -----------------------------------------------------------------------------

// ┍───┐┍───┐┍───┐
// │ 1 ││ 2 ││ 3 │
// │   │└───┘│   │
// │   │┍───┐│   │
// │   ││ 4 ││   │
// └───┘└───┘└───┘
$grid-template-4-blocks-1x2x3-1x3x3: "block1 block2 block3" "block1 block3 block3";

// ┍──────────┐
// | 1        |
// └──────────┘
// ┍────┐┍────┐
// | 1  || 2  |
// └────┘└────┘
// ┍──────────┐
// | 4        |
// └──────────┘
$grid-template-4-blocks-1x1-2x3-4x4: "block1 block1" "block2 block3" "block4 block4";

// -----------------------------------------------------------------------------

// ┍──────────┐
// | 1        |
// └──────────┘
// ┍──────────┐
// | 2        |
// └──────────┘
// ┍────┐┍────┐
// | 3  || 4  |
// └────┘└────┘
$grid-template-4-blocks-1x1-2x2-3x4: "block1 block1" "block2 block2" "block3 block4";

// ┍───┐┍───┐┍───┐
// │ 1 ││ 2 ││ 3 │
// └───┘│   ││   │
// ┍───┐│   ││   │
// │ 4 ││   ││   │
// └───┘└───┘└───┘
$grid-template-4-blocks-1x2x3-4x2x3: "block1 block2 block3" "block4 block2 block3";

// ┍────┐┍────┐
// | 1  || 2  |
// └────┘└────┘
// ┍──────────┐
// | 3        |
// └──────────┘
// ┍──────────┐
// | 4        |
// └──────────┘
$grid-template-4-blocks-1x2-3x3-4x4: "block1 block2" "block3 block3" "block4 block4";

// ┍───┐┍───┐┍───┐
// │ 1 ││ 2 ││ 3 │
// │   ││   │└───┘
// │   ││   │┍───┐
// │   ││   ││ 4 │
// └───┘└───┘└───┘
$grid-template-4-blocks-1x2x3-1x2x4: "block1 block2 block3" "block1 block2 block4";

// -----------------------------------------------------------------------------

// ┍──────────┐
// | 1        |
// └──────────┘
// ┍────┐┍────┐
// │ 3  ││  2 │
// └────┘│    │
// ┍────┐│    │
// │ 4  ││    │
// └────┘└────┘
$grid-template-4-blocks-1x1-3x2-4x2: "block1 block1" "block3 block2" "block4 block2";

// ┍────┐┍────┐┍────┐
// │ 1  ││ 2  ││ 3  │
// └────┘└────┘│    │
// ┍──────────┐│    |
// │ 4        ││    │
// └──────────┘└────┘
$grid-template-4-blocks-1x2x3-4x4x3: "block1 block2 block3" "block4 block4 block3";

// ┍────┐┍────┐
// │ 1  ││ 2  │
// │    │└────┘
// │    │┍────┐
// │    ││ 3  │
// └────┘└────┘
// ┍──────────┐
// | 4        |
// └──────────┘
$grid-template-4-blocks-1x2-1x3-4x4: "block1 block2" "block1 block3" "block4 block4";

// ┍────┐┍──────────┐
// │ 1  ││ 2        │
// │    │└──────────┘
// │    │┍────┐┍────┐
// │    ││ 3  ││ 4  │
// └────┘└────┘└────┘
$grid-template-4-blocks-1x2x2-1x3x4: "block1 block2 block2" "block1 block3 block4";

// -----------------------------------------------------------------------------

// ┍──────────┐
// | 1        |
// └──────────┘
// ┍────┐┍────┐
// │ 2  ││ 3  │
// │    │└────┘
// │    │┍────┐
// │    ││ 4  │
// └────┘└────┘
$grid-template-4-blocks-1x1-2x3-2x4: "block1 block1" "block2 block3" "block2 block4";

// ┍──────────┐┍────┐
// │ 1        ││ 4  │
// └──────────┘│    │
// ┍────┐┍────┐│    │
// │ 2  ││ 3  ││    │
// └────┘└────┘└────┘
$grid-template-4-blocks-1x1x4-2x3x4: "block1 block1 block4" "block2 block3 block4";

// ┍────┐┍────┐
// │ 1  ││ 2  │
// └────┘│    │
// ┍────┐│    │
// │ 3  ││    │
// └────┘└────┘
// ┍──────────┐
// | 4        |
// └──────────┘
$grid-template-4-blocks-1x2-3x2-4x4: "block1 block2" "block3 block2" "block4 block4";

// ┍───┐┍───┐┍───┐
// │ 1 ││ 2 ││ 3 │
// │   │└───┘└───┘
// │   |┍────────┐
// │   ││ 4      |
// └───┘└────────┘
$grid-template-4-blocks-1x2x3-1x4x4: "block1 block2 block3" "block1 block4 block4";

// =============================================================================
// 5x Blocks
// =============================================================================

// If you want to split a column up using the repeat function, you may want to devide the min and max values by the amount of columns;
@function grid-repeat($amount, $min:$small, $max:$max) {
  @return repeat($amount, minmax(add-unit($min/$amount), add-unit($large/$amount)));
}

// Documentation: https://css-tricks.com/snippets/css/a-guide-to-flexbox/

// Container properties
$flex-container-aliases : direction wrap flow justify items content;
$flex-container         : display flex-direction flex-wrap flex-flow justify-content align-items align-content;
$flex-container         : merge($flex-container, $flex-container-aliases);

// Container values
$flex-display           : flex inline-flex inline;
$flex-direction         : row row-reverse column column-reverse inherit col; // default row
$flex-wrap              : nowrap wrap wrap-reverse; // default no-wrap
$flex-justify-content   : flex-start flex-end center space-between space-around start end between around; // default flex-start
$flex-align-items       : flex-start flex-end center baseline stretch start end; // default stretch
$flex-align-content     : flex-start flex-end center space-between space-around stretch start end between around; // default stretch
$flex-flow              : merge($flex-direction, $flex-wrap);

/// Flexbox container mixin validates and prefixes the most current Flexbox W3C working draft
///
/// @author Mark Notton
///
/// @access public
///
/// @warning Flexbox does not currently work on buttons, fieldsets or textareas
///
/// @warning box-orient, box-direction, box-ordinal-group, box-left, box-positive, box-pack, box-align
///          ...and other unsupported/old flexbox values have been excluded
///
/// @todo Do special checks for 'flex-flow'
///
/// @param {Map or List} $settings - Maps require a the property or alias : value
///                                  Lists require a list of properties or values in the same order as the list below
///
///   Property         Alias        Default       Values
///   -------------------------------------------------------------------------------------------------------------------
///   display          (-)          (flex)        flex | inline-flex | *inline
///   flex-direction   (direction)  (row)         row | row-reverse | column | *col | column-reverse | inherit
///   flex-wrap        (wrap)       (nowrap)      nowrap | no-wrap | wrap | wrap-reverse
///   justify-content  (justify)    (flex-start)  flex-start | flex-end | center | space-between | space-around | *start | *end
///   align-items      (items)      (stretch)     flex-start | flex-end | center | baseline | stretch | *start | *end
///   align-content    (content)    (stretch)     flex-start | flex-end | center | space-between | space-around | stretch | *start | *end
///   !flex-flow       (flow)       (-)           flex-direction & flex-wrap (This isn't implimented at all, do not use!)
///
///   List Settings
///   Order            Default
///   -------------------------------------------------------------------------------------------------------------------
///   display          (flex)
///   flex-direction   (row)
///   flex-wrap        (nowrap)
///   justify-content  (flex-start)
///   align-items      (-)
///   align-content    (-)
///
///
/// @param {Bool} $display - If no display value is used, 'display:flex' will be defined automatically.
///   Unless this paramater is set to 'false'
///
/// @require {mixin}    contains
/// @require {function} merge
/// @require {function} _smart_flex-container
/// @require {function} arglist-to-list
/// @require {function} list-undelimited-to-comma-delimited
/// @require {function} is-bool
/// @require {variable} flex-container-aliases
/// @require {variable} flex-container
/// @require {variable} flex-container
/// @require {variable} flex-display
/// @require {variable} flex-direction
/// @require {variable} flex-wrap
/// @require {variable} flex-flow
/// @require {variable} flex-justify-content
/// @require {variable} flex-align-items
/// @require {variable} flex-align-content
///
/// @example scss - Map Usage
/// .foo {
///   @include flex-container((
///     direction:row,
///     justify-content:flex-end
///   ));
/// }
///
/// @example css - CSS Output
/// .foo {
///   -webkit-flex-direction: row;
///   -moz-flex-direction: row;
///   -ms-flex-direction: row;
///   -o-flex-direction: row;
///   flex-direction: row;
///   -webkit-justify-content: flex-end;
///   -moz-justify-content: flex-end;
///   -ms-justify-content: flex-end;
///   -o-justify-content: flex-end;
///   justify-content: flex-end;
///   -js-display: flex;
///   display: -webkit-box;
///   display: -moz-box;
///   display: -webkit-flexbox;
///   display: -ms-flexbox;
///   display: -webkit-flex;
///   display: flex;
/// }
///
/// @example scss - List Usage
/// .foo {
///   @include flex-container(inline col wrap between);
/// }
///
/// @example css - CSS Output
/// .foo {
///   -webkit-flex-direction: column;
///   -moz-flex-direction: column;
///   -ms-flex-direction: column;
///   -o-flex-direction: column;
///   flex-direction: column;
///   -webkit-flex-wrap: wrap;
///   -moz-flex-wrap: wrap;
///   -ms-flex-wrap: wrap;
///   -o-flex-wrap: wrap;
///   flex-direction: column;
///   -webkit-justify-content: space-between;
///   -moz-justify-content: space-between;
///   -ms-justify-content: space-between;
///   -o-justify-content: space-between;
///   justify-content: space-between;
///   -js-display: inline-flex;
///   display: -webkit-inline-flexbox;
///   display: -ms-inline-flexbox;
///   display: -webkit-inline-flex;
///   display: inline-flex;
/// }
///

@mixin flex-container2($settings...) {

  $defaults : (
    display           : flex,
    direction         : row,
    wrap              : nowrap,
    justify-content   : flex-start,
  );

  // $settings : get-settings($defaults, $args...);
  $settings : get-settings($defaults, (debug:true), $args...);



}


@mixin flex-container($settings...) {

  $important : false;

  // Empty
  @if $settings == null or length($settings) == 0 { $settings : (display:flex)}

  // Map
  @elseif is-map(first($settings)) {
    @if length($settings) > 1 {
      $important : nth($settings, 2);
    }
    @if length($settings) > 2  {
      @include warning("The first flex-container paramater is a map, which means you can only add one more option. This option is reserved as for a Boolean to tell this mixin to add !important or not (false by default). However you've added too many. These are not going to be used: " + slice($settings, 3))
    }
    $settings : first($settings);
  }
  // Arglist
  @elseif is-arglist($settings) {
    $settings : _smart_flex-container(arglist-to-list($settings));
  }

  // Add display:flex if not display value was set
  @if not map-has-key($settings, display) {
    $settings : map-set($settings, display, flex);
  }

  // Add display:flex if not display value was set
  @if map-has-key($settings, important) {
    $important : map-get($settings, important);
  }

  // Validation checks for every value for every property
  @each $property, $value in $settings {

    $output : false;

    @if contains($flex-container, $property) {
      // Alias checks
      @if contains($property, (content items)) {
        $property : #{align-}$property;
      }
      @elseif contains($property, (direction wrap flow)) {
        $property : #{flex-}$property;
        // Special alias check for nowrap
        $value : if($value == no-wrap, nowrap, $value);
      }
      @elseif $property == justify {
        $property : justify-content;
      }

      @if contains($value, (start end)) {
        $value : #{flex-}$value;
      } @elseif contains($value, (around between)) {
        $value : #{space-}$value;
      } @elseif contains($value, (col)) {
        $value : column;
      } @elseif contains($value, (inline)) {
        $value : inline-flex;
      }

      @if $property == display and $value != null {
        @if $value == inline-flex {
          display: -webkit-inline-flex is-important($important);
          display: inline-flex is-important($important);
        } @else {
          -js-display: flex is-important($important); // This is for flexibility support
          display: -webkit-box is-important($important);
          display: -moz-box is-important($important);
          display: -webkit-flexbox is-important($important);
          display: -ms-flexbox is-important($important);
          display: -webkit-flex is-important($important);
          display: flex is-important($important);
        }
      }

      // Check these properties against their list of valid values
      $checks : (flex-direction: $flex-direction, flex-wrap: $flex-wrap, justify-content: $flex-justify-content, align-items: $flex-align-items, align-content: $flex-align-content);
      @each $prop, $check in $checks {
        @if $property == $prop and contains($check, $value){
          $output : true;
        }
      }
      // Only output and prefix everything when $output is true
      @if $output {
        $property:$value $important;
      }

    }
  }
}


// Quick Flex Container Mixins

/// @alias flex-container -
///
/// @author Mark Notton
///
/// @access public
///
/// @warning Flexbox does not currently work on buttons, fieldsets or textareas
///
/// @warning box-orient, box-direction, box-ordinal-group, box-left, box-positive, box-pack, box-align
///          ...and other unsupported/old flexbox values have been excluded
///
/// @todo Do special checks for 'flex-flow'
///
/// @param {Map} $settings - flexbox container property or alias : flexbox value.

@mixin flex-display($value:flex, $important:false) {
  @include flex-container((display:$value), $important);
}

@mixin flex-direction($value, $important:false) {
  @include flex-container((direction:$value), $important);
}

@mixin flex-wrap($value, $important:false) {
  @include flex-container((wrap:$value), $important);
}

@mixin flex-flow($value, $important:false) {
  @include flex-container((flow:$value), $important);
}

@mixin flex-justify-content($value, $important:false) {
  @include flex-container((justify:$value), $important);
}
@mixin flex-justify($value, $important:false) {
  @include flex-container((justify:$value), $important);
}

@mixin flex-align-items($value, $important:false) {
  @include flex-container((items:$value), $important);
}

@mixin flex-align-content($value, $important:false) {
  @include flex-container((content:$value), $important);
}

// Private function provide a shorthand option in the flex-container mixin
// Defaults : display:flex, flex-direction:row, flex-wrap:nowrap, justify-content:flex-start
// Order   : display, flex-direction, flex-wrap, justify-content, align-items, align-content
// Optionals : display, align-items, align-content
@function _smart_flex-container($settings) {

  $defaults : (
    direction         : row,
    wrap              : nowrap,
    justify-content   : flex-start,
  );

  $_defined-justify-content : false;
  $_defined-align-items : false;
  $_defined-align-content : false;

  $settings : list-undelimited-to-comma-delimited($settings);

  @each $property in $settings {

    @if merge($flex-display, contains($flex-container, $property)) {

      @if ( contains($flex-display, $property) ) {
        $defaults : map-set($defaults, display, $property);
      }
      @elseif ( contains($flex-direction, $property) ) {
        $defaults : map-set($defaults, direction, $property);
      }
      @elseif ( contains($flex-wrap, $property) ) {
        $defaults : map-set($defaults, wrap, $property);
      }
      @elseif ( contains($flex-justify-content, $property) and $_defined-justify-content == false ) {
        $_defined-justify-content : true;
        $defaults : map-set($defaults, justify-content, $property);
      }
      @elseif ( contains($flex-align-items, $property) and $_defined-align-items == false ) {
        $_defined-align-items : true;
        $defaults : map-set($defaults, align-items, $property);
      }
      @elseif ( contains($flex-align-content, $property)  and $_defined-align-content == false ) {
        $_defined-align-content : true;
        $defaults : map-set($defaults, align-content, $property);
      }
      @if ( contains((important, !important), $property) or $property == true ) {
        $defaults : map-set($defaults, important, true);
      }

    }

  }

 @return $defaults;

}

/// Quick mixin to devide a flex item using basis
///
/// @author Mark Notton
///
/// @access public
///
@mixin flex-grid($count, $gutter:$gap, $bottom:true, $important:false) {

  $gutter : remove-unit(to-number($gutter));

  @if $count <= 1 {
    @include flex-basis(auto, $important);
    width:100%;
    @if is-number($gutter) and $gutter != null $gutter > 0 {
      margin-right:0 $imp;
      @if $bottom { margin-bottom:add-unit(if(is-bool($bottom), $gutter, $bottom)); }
    }
  }
  @elseif $count > 1 {
    @if is-number($gutter) and $gutter != null {

      @include flex-basis(calc(100% / #{$count} - #{add-unit(($gutter * ($count - 1) / $count))}), $important);

      margin-right:add-unit($gutter);

      @for $i from 1 through $count {
        &:nth-of-type(#{$count + n}) {
          margin-right:0;
        }
      }
      @if $bottom {
        margin-bottom:add-unit(if(is-bool($bottom), $gutter, $bottom));
      }

    } @else {
      @include flex-basis(calc(100% / #{$count}), $important);
    }
  }
}

@mixin flex-grid-old($count, $gutter:$gap, $important:false) {
  @if $count <= 1 {
    @include flex-basis(auto, $important);
  }
  @elseif $count > 1 {
    @if is-number($gutter) and $gutter != null and $gutter > 0 {
      @include flex-basis(calc(100% / #{$count} - #{add-unit($gutter)} - 2px), $important);
    } @else {
      @include flex-basis(calc(100% / #{$count} - 2px), $important);
    }
  }
}

@function _get-next-breakpoint($setting) {
  @if is_number($setting) and contains(map-values($breakpoints), $setting) {
    // This gets the next available breakpoint from the list of breakpoints. The if-statment is a check if the last breakpoint item is queried.
    @return if(index(map-values($breakpoints), $setting) >= length(map-values($breakpoints)), null, nth(map-values($breakpoints), (index(map-values($breakpoints), $setting) + 1)));
  } @elseif is_string($setting) and map-has-key($breakpoints, $setting) {
    @return map-get-next($breakpoints, $setting);
  } @else {
    @return $setting;
  }
}

// 4 $gap $max, 2 0 $medium, $small
// 4, 2,
// @include smart-flex-grid('section', 3 $gap, 2 $gap0 $max, 1 $gap0 bottom $large);

@mixin smart-flex-grid($settings...) {
    $nth : 0;
    $selector : null;

    $settings-list : arglist-to-list($settings);

    $multiple-settings : length($settings-list) > 1;

    $sssbreak : null;

    // @debug $multiple-settings;

    @each $settings in $settings-list {

      @if (length($settings) == 1 and is-string(nth($settings, 1))) {
        // If the current element is the same one that was passed as the first param,
        // don't bother setting the $selector variable and revert to the more generic first of every element;
        @if last(last(to-list(&))) != $settings {
          $selector : $settings;
        } @else {
          $selector : '> *';
        }
        @include flex-container((direction:row, wrap:wrap, justify:stretch-between));
      } @else {

        $nth : $nth + 1;
        $count : null;
        $gutter : null;
        $grow : null;
        $break : null;
        $next-break : null;
        $gutter-position : ();
        $container : null;

        @each $setting in $settings {

          @if is_number($setting) {
            @if is_null($count) {
              $count : $setting;
            } @elseif is_null($gutter) {
              $gutter : $setting;
            } @elseif is_null($break) {
              // $next-break : _get-next-breakpoint($setting);
              $break : $setting;
            }
          }
          @if is_string($setting) {
            @if contains((top bottom left right all), $setting) {
              $gutter-position : append($gutter-position, $setting);
            } @elseif contains((grow), $setting) {
              $grow : true;
            } @elseif map-has-key($breakpoints, $setting) {
              // $next-break : _get-next-breakpoint($setting);
              $break : map-get($breakpoints, $setting);
            }
          }
          @if is_map($setting) {
            $container : $setting;
          }

              // $next-break : _get-next-breakpoint($setting);
          //@if is_null($break) and length($settings-list) >= 2 {
            // $break : nth($breakpoints, $nth);

            // @if $nth == 1 {
            //   // First
            //   $break : $max;
            //   $sssbreak : $max;
            // }



            // @if $nth != 1 {
            //   @debug $break;
            //   // Other settings
            //   $break : _get-next-breakpoint($sssbreak);
            // }
          //}
          // $break : if(is_null($break) and $nth == 1, $max, $break);
          // $next-break : if(is_null($next-break) and $multiple-settings and $nth != 1, _get-next-breakpoint($break), $next-break);
          // $break : if(is_null($break) and $nth != 1, $next-break, $break);
        }

        // Set default gutter position if not defined
        @if length($gutter-position) == 0 { $gutter-position : left right bottom }

        @if not is-null($container) {
          @include break($break) {
            @include flex-container($container);
            // @debug $container;
          }
        }

        #{if(is-null($selector), '&', $selector)} {

          // max-width:100% / $count;

          @include break($break) {

            @if not is-null($grow) {
              @include flex-grow(1);
            }

            @if $count <= 1 {
              @include flex-basis(auto); @include flex-grow(1);
            }
            @elseif $count > 1 {
              @if is-number($gutter) and $gutter != null and remove-unit(to-number($gutter)) > 0 {
                @include flex-basis(calc(100% / #{$count} - #{add-unit($gutter)}));
              } @else {
                @include flex-basis(calc(100% / #{$count}));
              }
            }


            // // Margins and their positions
            // @if contains(left right, $gutter-position, true) {
            //   // $gutter-position contains BOTH left and right, and nothing more
            //   margin-left:add-unit($gutter/2);
            //   margin-right:add-unit($gutter/2);
            // } @elseif contains(top left, $gutter-position, true) {
            //   // $gutter-position contains BOTH top and bottom, and nothing more
            //   margin-top:add-unit($gutter/2);
            //   margin-bottom:add-unit($gutter/2);
            // } @elseif contains((left right top bottom), $gutter-position) {
            //   // $gutter-position contains EITHER left, right, top, bottom
            //   $gp : list-items-to-strings($gutter-position);

            //   @if index($gp, 'left') and index($gp, 'right') {
            //     margin-left:add-unit($gutter/2);
            //     margin-right:add-unit($gutter/2);
            //   } @else {
            //     margin-left  :if(index($gp, 'left'),   add-unit($gutter), null);
            //     margin-right :if(index($gp, 'right'),  add-unit($gutter), null);
            //   }
            //   @if index($gp, 'top') and index($gp, 'bottom') {
            //     margin-top:add-unit($gutter/2);
            //     margin-bottom:add-unit($gutter/2);
            //   } @else {
            //     margin-top:   if(index($gp, 'top'),    add-unit($gutter), null);
            //     margin-bottom:if(index($gp, 'bottom'), add-unit($gutter), null);
            //   }

            // } @elseif contains((all), $gutter-position) {
            //   margin:add-unit($gutter/2);
            // }

            // TODO: Fix issue of repeat CSS output. The above code is close.
            // Margins and their positions
            @if contains(left right, $gutter-position, true) {
              // $gutter-position contains BOTH left and right, and nothing more
              margin-left:add-unit($gutter/2);
              margin-right:add-unit($gutter/2);
            } @elseif contains(top left, $gutter-position, true) {
              // $gutter-position contains BOTH top and bottom, and nothing more
              margin-top:add-unit($gutter/2);
              margin-bottom:add-unit($gutter/2);
            } @elseif contains((left right top bottom), $gutter-position) {
              // $gutter-position contains EITHER left, right, top, bottom
              $gp : list-items-to-strings($gutter-position);
              $ml : null;
              $mr : null;
              $mt : null;
              $mb : null;

              @if index($gp, 'left') and index($gp, 'right') {
                $ml:add-unit($gutter/2);
                $mr:add-unit($gutter/2);
              }
              @if index($gp, 'top') and index($gp, 'bottom') {
                $mt:add-unit($gutter/2);
                $mb:add-unit($gutter/2);
              }

              @each $g in $gp {
                margin-left  : if(is-null($ml), if($g == 'left', add-unit($gutter), 0), $ml);
                margin-right : if(is-null($mr), if($g == 'right', add-unit($gutter), 0), $mr);
                margin-top   : if(is-null($mt), if($g == 'top', add-unit($gutter), 0), $mt);
                margin-bottom: if(is-null($mb), if($g == 'bottom', add-unit($gutter), 0), $mb);
              }

            } @elseif contains((all), $gutter-position) {
              margin:add-unit($gutter/2);
            }
          }
        }
        //}

        // $next-break : map-get-next($breakpoints, $break);

        // @debug "Setting: " + #{$nth};
        // @debug "count: " + #{$count};
        // @debug "gutter: " + #{$gutter};
        // @debug "break: " + #{$break};
        // @debug "next-break: " + #{$next-break};
        // @debug "gutter-positions: " + #{$gutter-position};
        // @debug "---";
      }

    }
}

// Item properties
$flex-item-aliases : grow shrink basis self;
$flex-item         : order flex-grow flex-shrink flex-basis align-self $flex-item-aliases;
$flex-item         : merge($flex-item, $flex-item-aliases);

// Item values
$flex-order        : number;
$flex-grow         : number;
$flex-shrink       : number;
$flex-basis        : number auto;
$flex-flex         : none number; // flex-grow, flex-shrink, flex-basis
$flex-align-self   : auto flex-start flex-end start end center baseline stretch;

/// Flexbox items mixin validates and prefixes the most current Flexbox W3C working draft
///
/// @author Mark Notton
///
/// @access public
///
/// @warning Flexbox does not currently work on buttons, fieldsets or textareas
///
/// @warning box-orient, box-direction, box-ordinal-group, box-left, box-positive, box-pack, box-align
///          ...and other unsupported/old flexbox values have been excluded
///
/// @todo Do special checks for 'flex'
///
/// @param {Map} $settings - flexbox item property or alias : flexbox value.
///
///   Property         Alias        Default       Values
///   -------------------------------------------------------------------------------------------------------
///   order            (-)          (-)           number
///   flex-grow        (grow)       (0)           number
///   flex-shrink      (shrink)     (1)           number
///   flex-basis       (basis)      (auto)        unit | auto
///   !flex            (-)          (-)           number | none
///   align-self       (self)       (-)           auto | flex-start | flex-end | center | baseline | stretch
///
///
/// @require {Mixin}    contains
/// @require {Function} merge
/// @require {Variable} flex-item-aliases
/// @require {Variable} flex-item
/// @require {Variable} flex-item
/// @require {Variable} flex-order
/// @require {Variable} flex-grow
/// @require {Variable} flex-shrink
/// @require {Variable} flex-basis
/// @require {Variable} flex-flex
/// @require {Variable} flex-align-self
///
/// @example scss - Usage
/// .bar {
///   @include flex-items((
///     order:1,
///     basis:150
///   ));
/// }
///
/// @example css - CSS Output
/// .bar {
///   -webkit-order: 1;
///   -moz-order: 1;
///   -ms-order: 1;
///   -o-order: 1;
///   order: 1;
///   -webkit-flex-basis: 150px;
///   -moz-flex-basis: 150px;
///   -ms-flex-basis: 150px;
///   -o-flex-basis: 150px;
///   flex-basis: 150px;
/// }
///
@mixin flex-items($settings, $important:false) {

  @each $property, $value in $settings {

    $output : false;
    $new-value : null;

    @if contains($flex-item, $property) {
      // Alias checks
      @if contains($property, self) {
        $property : #{align-}$property;
      }
      @elseif contains($property, (grow shrink basis)) {
        $property : #{flex-}$property;
      }

      @if contains($value, (start end)) {
        $value : #{flex-}$value;
      }

      // Check these properties against their list of valid values
      @if contains($property, (order, flex-grow, flex-shrink)) {
        $new-value : remove-unit($value);
        $output : true;
      }
      @elseif $property == flex-basis {
        $new-value : add-unit($value);
        $output : true;
      }
      @elseif $property == align-self and contains($flex-align-self, $value) {
        $new-value : $value;
        $output : true;
      }

      // Only output and prefix everything when $output is true
      @if $output and $new-value != null {
        // This checks to see if any aliases have been used in the values
        $property: $new-value $important;
      }
    }
  }
}

// Quick Flex Items Mixins
@mixin flex-order($value, $important:false) {
  @include flex-items((order:$value), $important);
}

@mixin flex-grow($value, $important:false) {
  @include flex-items((grow:$value), $important);
}

@mixin flex-shrink($value, $important:false) {
  @include flex-items((flex-shrink:$value), $important);
}

@mixin flex-basis($value, $important:false) {
  @include flex-items((flex-basis:$value), $important);
}

@mixin flex-flex($value, $important:false) {
  @include flex-items((flex:$value), $important);
}

@mixin flex-align-self($value, $important:false) {
  @include flex-items((self:$value), $important);
}

/// Quick mixin to remove all active flexbox properties
///
/// @author Mark Notton
///
/// @access public
///
@mixin flex-remove($important:null) {
  @if ($important == true) {
    flex:initial !important;
    display:initial !important;
    flex-direction:initial !important;
    justify-content:initial !important;
  } @else {
    flex:initial;
    display:initial;
    flex-direction:initial;
    justify-content:initial;
  }
}

// The original grid mixin
@mixin float-grid($args, $gutter:null, $bottom:true, $important:false) {

  $count: nth($args, 1);
  $gutter: if($gutter == null, if(length($args) == 2, nth($args, 2), 0), $gutter);

  @if ($gutter == true) { $gutter:$gaps; }

  @if ($gutter != 0 or $count == 1) {
    @for $i from 1 through $count {
      @include nth($i, true) {
        clear:none; margin-right:add-unit($gutter);
      }
    }
    @include nth($count, true) { margin-right:0; }
  }

  @if ($count == 1) {
    @include nth($count, true) {
      margin-right:0;
    }
  }

  @if $bottom { margin-bottom:add-unit(if(is-bool($bottom), $gutter, $bottom)); }

  // Checks
  $width:     if($count  >  1, 100%/$count, 100%);
  $remainder: if($gutter != 0, #{'+ '} add-unit($gutter/$count), null);
  $gutter:    if($gutter != 0, #{'- '} add-unit($gutter), null);

  // Output
  float:left;
  @if ( $gutter != null ) {
    width:calc(#{$width} #{$gutter} #{$remainder});
  } @else {
    width:$width;
  }

  @content;

}

@mixin center($horizontal: true, $vertical: true) {
  position: absolute;
  @if ($horizontal and $vertical) {
    top: 50%;
    left: 50%;
    @include transform(y -50%, x -50%);
  } @else if ($horizontal) {
    left: 50%;
    @include transform(y -50%, x 0);
  } @else if ($vertical) {
    top: 50%;
    @include transform(y 0, x -50%);
  }
}

@mixin flip($direction:vertical) {

  @if contains((vertical, horizontal), $direction, true) {
    @include transform(scaleY -1, scaleX -1);
  } @else {

    @if $direction == vertical {
      @include scaleX(-1);
      filter: FlipH;
      -ms-filter: "FlipH";
    }

    @if $direction == horizontal {
      @include scaleY(-1);
      filter: FlipV;
      -ms-filter: "FlipV";
    }
  }

}

// Add variable to the global variables map;

@mixin add-variables($args...) {

  $settings : get-settings(null, $args...);

  @if variable-exists(variables) {
    @if (not is-map($map) and not is-map($value) and not is-null($value)) {
      $variables : map-merge($variables, ($map:$value)) !global;
    } @else {
      $variables : map-merge($variables, $map) !global;
    }
  }
}

@mixin custom-property($properties, $values:null, $at-root:false) {

    $map : if(type-of($properties) == map, $properties, map-zip($properties, $values));
    @each $property, $value in $map {
      @if $at-root {
        @at-root(without:media) & {
          --#{$property}:#{$value};
        }
      } @else {
        --#{$property}:#{$value};
      }
    }

}

@mixin set-custom-properties($variables : $custom-properties) {

  $temp : $variables;


  @if ($support-css-variable-alpha-colours == true) {
    @each $variable, $value in $variables {
      @if is-colour($value) {
        @if is-hex($value) {
          $temp : map-set($temp, $variable, (red($value), green($value), blue($value)));
        } @else {
          $temp : map-set($temp, $variable, hex-to-rgba($value));
        }
      }
    }
  }

  @at-root :root {
    @each $variable, $value in $variables {
      #{'--' + string-replace($variable, '--')}: $value;
    }
  }
}

@mixin set-custom-property($variable, $value) {
  @at-root :root {
    #{'--' + string-replace($variable, '--')}: $value;
  }
}

@mixin var($args...) {

  $defaults : (
    property : null,
    variable : primary,
    opacity  : 1,
  );

  $settings : get-settings($defaults, $args...);

  $property  : map-get($settings, property);
  $variable  : map-get($settings, variable);
  $opacity   : map-get($settings, opacity);
  $important : map-get($settings, important);

  $variable-value : $variable;
  $fallback-value : null;

  $value : var-value($variable, $opacity);
  $variable-value : if(is-list($value), nth($value, 1), $value);
  $fallback-value : if(is-list($value), nth($value, 2), null);

  @if ( not is-null($fallback-value) ) {
    #{$property} : $fallback-value $important;
  }

  @supports(--css: variables) {
    #{$property} : $variable-value $important;
  }


}

/// Random colour.
///
/// @author Pankaj Parashar
///
/// @access public
///
/// @author https://pankajparashar.com/posts/random-colors-sass/
///
/// @param {number} $opacity - Amend the opacity of the colour that is returned. Default is 1
///
/// @example scss - Usage
///   random-colour(0.5);
///
/// @example css - Output
///   rgba(38, 153, 180, 0.5);
///
/// @return {color}

@function random-colour($opacity:1) {
  @return rgba(random(256) - 1, random(256) - 1, random(256) - 1, $opacity);
}


/// @alias random-colour
///
/// @access public
///
/// @require {function} random-colour
///
/// @return {color}

@function random-color($opacity:0.3) {
  @return random-colour($opacity);
}


/// @alias random-colour
///
/// @access public
///
/// @require {function} random-colour
///
/// @return {color}

@function rc($opacity:0.3) {
  @return random-colour($opacity);
}


/// Random colours on a range of elements. Ideal for developers wanting to visually see elements quickly
///
/// @author Mark Notton
///
/// @access public
///
/// @param {number} $amount - How many items are there. Default is 10
///
/// @param {string} $target - Add any child elements you want to target
///
/// @param {number} $opacity - The opacity strength. Default is 0.5
///
/// @example scss - Usage
///   li { random-colours(5, '.link'); }
///
/// @example css - Output
///   li:nth-child(1) .link { background-color: rgba(166, 213, 186, 0.5); }
///   li:nth-child(2) .link { background-color: rgba(118, 134, 177, 0.5); }
///   li:nth-child(3) .link { background-color: rgba(223, 47, 35, 0.5); }
///   li:nth-child(4) .link { background-color: rgba(175, 255, 1, 0.5); }
///   li:nth-child(5) .link { background-color: rgba(100, 108, 80, 0.5); }
///
/// @return {*}

@mixin random-colours($amount:10, $target:null, $opacity:0.5) {
  @for $i from 1 through $amount {
    &:nth-child(#{$i}) #{$target} { background-color:random-colour($opacity); }
  }
}

/// Generates a clean url attribute for compressed or uncompressed svg data
/// @param {string} $svg - Add full SVG markup or base64 compressed code.
/// @link http://b64.io/
/// @return {string}

@function svg-url($svg) {
  $data:if(str-index($svg, '<svg'), "data:image/svg+xml;utf8, ", "data:image/svg+xml;base64, ");
  @return url($data + unquote($svg));
}

// Get the aspect ratio of a given symbol
@function symbol-size-ratio($symbol) {

  $width : map-deep-get($symbols, $symbol, width);
  $height : map-deep-get($symbols, $symbol, height);

  @return percentage($height / $width);
}

$browsers : ie edge safari firefox chrome opera;

// Usage : @include browsers(ie 9 10) { ... }
// Usage : @include browsers(ie 9, firefox) { ... }
// Usage : @include browsers(ie) { ... }
// Usage : @include browsers(edge 12, ie 11) { ... }

/// @link https://github.com/saadeghi/browser-hack-sass-mixins/blob/master/_hacks.scss

@mixin browsers($args...) {

  // This checks to see if the current selector is html.
  // This can not be converted into a shorthanded if statement.
  // $selector : null;
  // @if not is-selector(html) { $selector : &; }

	$selector : to-string(#{&});
	$space : ' ';

	@if (str-index($selector, 'html')) {
		$selector : string-replace(#{$selector}, 'html', '');
		@if ($selector != 'html') {
			$space : '';
		}
	}

	$not-all : if(is-bool(nth(nth($args, 1),1)), nth(nth($args, 1),1), false);


  @each $settings in arglist-to-list($args...) {

    $browsers-list : ();
    $versions-list : ();
    $not : $not-all;

    @each $setting in $settings {
      @if is-string($setting) and contains($browsers, $setting) {
        $browsers-list : append($browsers-list, $setting);
      }
      @elseif is-bool($setting) {
        $not : $setting;
      }
      @elseif is-number($setting) or is-list($setting){
        @each $version in $setting {
          $versions-list : append($versions-list, $version);
        }
      }
    }

    @if length($browsers-list) > 1 and length($versions-list) > 0 {
      @error 'You can not check the same version for 2 browsers in a single argument. Try seperating the arguments using a comma (,)';
    } @else {
      @if length($browsers-list) > 0 {
        @if length($versions-list) > 0 {
          @each $version in $versions-list {
            @if not $not {
              @at-root html[data-browser^="#{$browsers-list}"][data-browser$='#{$version}'] #{$selector} { @content; }
            } @else {
              @at-root html:not([data-browser^="#{$browsers-list}"][data-browser$='#{$version}']) #{$selector} { @content; }
            }
          }
        } @else {
					@if not $not {
	          @each $browser in $browsers-list {

              @at-root html[data-browser^="#{$browser}"]#{$space}#{$selector} { @content; }
              // Fallback hacks should the data-browser attribute not be in the html tag
              @if $browser == edge {
                @supports (-ms-accelerator:true) {
                  #{$selector} {
                    @content;
                  }
                }
              }
              @elseif $browser == ie {
								@media all and (-ms-high-contrast: none), (-ms-high-contrast: active) {
                  @content;
                }
              }
              @elseif $browser == firefox {
                #{$selector ',  x:-moz-any-link'}{
                  @content;
                }
              }
              @elseif $browser == chrome {
                @media all and (-webkit-min-device-pixel-ratio:0) and (min-resolution: .001dpcm) {
                  @content;
                }
              }
              @elseif $browser == safari {
                @supports (overflow:-webkit-marquee) and (justify-content:inherit){
                  #{$selector} {
                    @content;
                  }
                }
              }
            }
          } @else {

						$nots : '';

						@each $browser in $browsers-list {
							$nots : $nots + ':not([data-browser^="#{$browser}"])';
						}

						@at-root html#{$nots}#{$space}#{$selector} { @content; }
					}
        }
      }
    }
  }
}

@mixin not-browsers($args...) {
	@include browsers(join(true, $args, comma)) { @content };
}

// Usage : @include ie(9 10) { ...; }
// Usage : @include ie { ...; }
@mixin ie($version:null) {
  @include browsers(ie $version) { @content };
}

@mixin edge($version:null) {
  @include browsers(edge $version) { @content };
}

@mixin safari($version:null) {
  @include browsers(safari $version) { @content };
}

@mixin firefox($version:null) {
  @include browsers(firefox $version) { @content };
}

@mixin chrome($version:null) {
  @include browsers(chrome $version) { @content };
}

@mixin opera($version:null) {
  @include browsers(opera $version) { @content };
}

//////
@mixin not-ie($version:null) {
  @include browsers(ie $version true) { @content };
}

@mixin not-edge($version:null) {
  @include browsers(edge $version true) { @content };
}

@mixin not-safari($version:null) {
  @include browsers(safari $version true) { @content };
}

@mixin not-firefox($version:null) {
  @include browsers(firefox $version true) { @content };
}

@mixin not-chrome($version:null) {
  @include browsers(chrome $version true) { @content };
}

@mixin not-opera($version:null) {
  @include browsers(opera $version true) { @content };
}

$devices : mobile tablet desktop;

@mixin devices($args...) {

  // This checks to see if the current selector is html.
  // This can not be converted into a shorthanded if statement.
  $selector : to-string(#{&});
	$space : ' ';

	@if (str-index($selector, 'html')) {
		$selector : string-replace(#{$selector}, 'html', '');
		@if ($selector != 'html') {
			$space : '';
		}
	}

  @each $settings in arglist-to-list($args...) {

    $devices-list : ();
    $not : true;

    @each $setting in $settings {
      @if is-string($setting) {
        @if contains($devices, $setting) and length($devices-list) < 2 {
          $devices-list : append($devices-list, $setting);
        }
      } @elseif is-bool($setting) {
        $not : $setting;
      }
    }

    // @if length($devices-list) > 1 and length($types-list) > 0 {
    //   @error 'You can not check the same version for 2 browsers in a single argument. Try seperating the arguments using a comma (,)';
    // } @else {
      @if length($devices-list) > 0 {
        @each $device in $devices-list {
          @if $not {
            @at-root html[data-device="#{$device}"]#{$space}#{$selector}{ @content; }
          } @else {
            @at-root html:not([data-device="#{$device}"])#{$space}#{$selector}{ @content; }
          }
        }
      }
    // }
  }
}

// Usage : @include mobile { ... }
// Usage : @include mobile(samgsung) { ... }

@mixin mobile($type:null) {
  @include devices(mobile $type) { @content };
}

@mixin tablet($type:null) {
  @include devices(tablet $type) { @content };
}

@mixin desktop($type:null) {
  @include devices(desktop $type) { @content };
}

@mixin not-mobile($type:null) {
  @include devices(mobile $type false) { @content };
}

@mixin not-tablet($type:null) {
  @include devices(tablet $type false) { @content };
}

@mixin not-desktop($type:null) {
  @include devices(desktop $type false) { @content };
}


/// Add specical styling for specific classes that sit on the body of the page.
/// for example, iphone devices specifcally.
/// @todo Add checks and validation
@mixin identify($class) {

  $selector : null;
  @if not is-selector(html) and not is-selector(body){ $selector : &; }

  @at-root body.#{$class} #{$selector} { @content }
}

/// Create a css animation with fallbacks
///
/// @author Mark Notton
///
/// @access public
///
/// @param {list} $args - Pass in the following animation settings. duration, delay, and iterations should be passed in that order.
///   [name](unique-id)    - name of the animation
///   [duration](1 second) - length of time it takes for an animation to complete one cycle.
///   [ease](ease-in-out)  - ease-in, ease-in-out etc... You can also refer to the eases variables. $easeInSine, $easeInOutBack.
///   [delay](0 seconds)   - delay times are always calculated in seconds (not miliseconds). You do not have to define the 's'.
///   [iterations](1)      - the number of times the animation should be performed. 'loop' or 'infinite' will result in a never-ending loop
///   [direction](normal)  - sets the direction of the animation after the cycle. Its default resets on each cycle.
///   [fill](forwards)     - sets which values are applied before/after the animation.
///   [state](null)        - pause/play the animation.
///
/// @require {Mixin} contains
/// @require {Function} is-string
/// @require {Function} is-number
/// @require {Function} is-null
/// @require {Function} is-ease
/// @require {Function} is-time
/// @require {Function} addUnit
/// @require {Function} arglist-to-list
/// @require {Variables} eases - optional
///
/// @example 1 scss - Usage
/// .foo {
///   @include animation(play 3 steps(81) infinite);
/// }
///
/// @example 1 css - CSS output
/// .foo {
///   -webkit-animation: play 3s steps(81) infinite;
///      -moz-animation: play 3s steps(81) infinite;
///           animation: play 3s steps(81) infinite;
/// }
///
/// @example 2 scss - Usage
/// If you are only using one animation, you can pass in the keyframe content.
/// Keyframes will never be nested in your CSS, it will be added to the root.
/// Adding content will initialise the animation, saving the need add a seperate keyframes animation.
/// You don't even have to define an animation name, as a unique-id will be used where necessary
/// All default options will be added automatically too.
/// .foo {
///   @include animation {
///   	0%, 100% { opacity:1}
///   	50% { opacity:0}
///   };
/// }
///
//@include keyframes(testing) { to { @include rotate(360deg);}}

@mixin animation($args...) {

  $animations : null;
	$unique-name : unique-id();
	$count : 0;

	@if length($args) == 0 {
		$args : join($unique-name, $args);
	}

  // Loop through and check all arguments for any special options
  @each $settings in $args {

    // Default Settings
    $name: null;
    $duration: null; // seconds
    $ease: ease-in-out;
    $delay: null;
    $iterations: null;
    $direction: normal;
    $fill: forwards;
    $state : null;

    @each $setting in $settings {



      @if contains($setting, forwards backwards both none) {
        $fill : $setting;
      } @elseif contains($setting, normal alternate) {
        $direction : $setting;
      } @elseif contains($setting, paused running) {
        $state : $setting;
      } @elseif is-string($setting) and not is-var($setting) {
        @if contains($setting, infinite loop) {
          $iterations : infinite;
        } @elseif is-ease($setting) {
          $ease : $setting;
        } @else {
					$name : $setting;
					$unique-name : $setting;
				}
      } @elseif is-number($setting) or is-time($setting) or is-var($setting) {
        @if is-null($duration) {
          @if is-time($setting) {
            $duration : $setting;
          } @else {
            $duration : add-unit($setting, s, true);
          }
        } @elseif is-null($delay) {
          @if is-time($setting) {
            $delay : $setting;
          } @else {
            $delay : add-unit($setting, s, true);
          }
        } @elseif is-null($iterations) {
          $iterations : $setting;
        }
      }

    }

		$count : $count + 1;
		@if ($count == 1) {
			$name: if(is-null($name), $unique-name, $name);
		}

    $duration: if(is-null($duration), 1s, $duration);
    $delay: if(is-null($delay), 0s, $delay);
    $iterations: if(is-null($iterations), 1, $iterations);


		@if not is-null($name) {
  	  $animations : append($animations, $name $duration $ease $delay $iterations $direction $fill $state, comma);
		}

  }
	// TODO: When a later version of Sass allows you to check @content exists,
	// apply a queiry before using this keyframes mixin;
	@include keyframes($unique-name) { @content; }

  @if ( not is-null($animations)) {
    animation : $animations;
  }

}


/// @alias animation
@mixin animate($settings...) { @include animation($settings...) { @content; }; }

@mixin animation-delay($times...) {
	$times-list : ();
	@each $time in $times {
		$times-list: append( $times-list, add-unit($time, s), comma);
	}
  animation-delay : $times-list;
}

@mixin animation-timing-function($ease) {
	animation-timing-function : $ease;
}

@mixin animation-state($state:pause) {
  animation-play-state : $state;
}

@mixin animation-ease($ease) {
  @include animation-timing-function($ease);
}

@mixin keyframes($name) {
  @at-root (without: media) {
    @keyframes #{$name} { @content; }
  }
}

@mixin transition-delay($times...) {
	$times-list : ();
	@each $time in $times {
		$times-list: append( $times-list, add-unit($time, $default-timing-unit ), comma);
	}
  transition-delay : $times-list;
}

/// @alias transition-delay
/// @access public
/// @require {mixin} transition-delay
/// @return

@mixin delay($time...) {
  @include transition-delay($time...);
}

@mixin transition-duration($time) {
  transition-duration: add-unit($time, $default-timing-unit);
}

@mixin transition-timing-function($ease) {
  transition-timing-function : $ease;
}

/// Transition mixin handles animation for any number of transitions in any format/order
///
/// @author Mark Notton
///
/// @access public
///
/// @todo Stagger option. Make it so each transition happens one after the other, regardless of delay
///
/// @param {arglist} $args - Pass in the following transtion settings, in any order.
///   [property]  - width, margin, rotate, skew, color, etc...
///   [delay]     - delay times are always calculated in seconds (not miliseconds). You do not have to define the 's'
///   [ease-type] - ease-in, ease-in-out etc... You can also refer to the eases variables. $easeInSine, $easeInOutBack
///   [duration]  - duration times are always calculated in seconds (not miliseconds). You do not have to define the 's'
///   [direction] - forwards, default, backwards, reverse. direction should be in it's own argment, not part of a list of transition settings. It can however be in the same argument as 'stagger'.
///                 Directions can be backwards or forwards (default). Setting it backwards will reverse the order
///                 of the delays if more than one argument has been made.
///   [stagger]   - stagger should be in it's own argment, not part of a list of transition settings. It can however be in the same argument as 'direction'.
///                 Stagger can be defined just by passing the string 'stagger'. This will add previous transition delays and directions to the current
///                 transtion so each argument is called one after the other.
///   [off]       - passing off within any argument will ignore everything and set the transition to 'initial'. Essentially disabling all transitions
///   [important] - If true, this will add the important selector
///
/// @require {Mixin} contains
/// @require {Mixin} prepend
/// @require {Variables} eases - optional
///
/// @example scss - Usage
/// .foo {
///   @include transition(
///      background-color 0 ease-in,
///      border-radius 0.5 ease-out,
///      rotate 1 1 $easeInOutBack,
///      reverse
///   );
/// }
///
/// @example css - CSS output
/// .foo {
///   -webkit-transition: background-color 0.2s ease-in 0s, border-radius 0.2s ease-out 0.5s, -webkit-transform 1s cubic-bezier(0.68, -0.55, 0.265, 1.55) 1s;
///   transition: background-color 0.2s ease-in 0s, border-radius 0.2s ease-out 0.5s, transform 1s cubic-bezier(0.68, -0.55, 0.265, 1.55) 1s; }
/// }
///

@mixin transition($settings...) {

  // Default Settings
  $direction : forwards;
  $stagger : false;

  // Private Settings
  $transitions : ();
  $transitions-webkit : ();
  $animations  : ();
  $delays : ();
  $eases : ();
  $durations : ();
  $off : false;
  $important : false;

  // Quick check to make sure anything at all has been passed.
  // If not, set 'all' as the default transition
  // $args: if(length($args) > 0, $args, all);

  $settings-list : arglist-to-list($settings);

  // Loop through and check all arguments for any special options
  @each $settings in $settings-list {
    @if contains($settings, forwards default backwards reverse) {
      $direction : $settings;
    } @elseif contains($settings, stagger) {
      $stagger : true;
    } @elseif contains($settings, off) {
      $off : true;
    } @elseif contains($settings, important) {
      $important : true;
    }
  }

  @if $off == true {
    transition : initial $important;
  }

  // Loop through and set all the necessary settings for each animation set
  @each $settings in $settings-list {

    // Default Settings
    $animation : ();
    $duration : 0.2;
    $ease : ease-in-out;
    $delay : 0;

    // Private Settings
    $excluded : false;
    $value-counter : 0;

    @each $setting in $settings {
      // Check a range of special rules. Exclude this transition if this is true.
      @if contains($setting, forwards default backwards reverse stagger) {
        $excluded : true;
      } @else {
        // Checks for 'strings'
        @if type-of($setting) == string {
          @if contains(str-slice(#{$setting}, 0, 4), ease line step cubi init) {
            // If the first 4 characters of the string match the first 4 characters
            // of a ease type, update the ease variable
            $ease : $setting;
          } @elseif contains($setting, transform matrix translate translateX translateY scale scaleX scaleY rotate skew skewX skewY matrix3d translate3d translateZ scale3d scaleZ rotate3d rotateX rotateY rotateZ perspective) {
            // If the string mataches a transform type, define the animation as a transform
            $animation : append($animation, transform);
          } @else {
            $animation : append($animation, $setting);
          }
        }
        // Checks for 'numbers'
        @if type-of($setting) == number {
          @if $value-counter < 1 {
            // Add the first instance of a number as the delay
            $delay : $setting;
            $value-counter : $value-counter + 1;
          } @elseif $value-counter >= 1 {
            // Add the second instance of a number as the duration
            $duration : $setting;
          }
        }
      }
    }

    @if not $excluded {
      // Quick check to make sure animation has a fallback if none were defined
      $animations : if(length($animation) == 0, append($animations, all), append($animations, $animation));
      // Quick check for the direction rule. If backwards or reversed, add delays the the start of the $delays list
      $delays     : if(contains($direction, backwards reverse), prepend($delays, $delay), append($delays, $delay));
      $eases      : append($eases, $ease);
      $durations  : append($durations, $duration);
    }
  }

  // Loop through all the animations and add the transition to the overall transitions list
  @for $i from 1 through length($animations) {
    $animation   : nth($animations, $i);
    $duration    : nth($durations, $i);
    $ease        : nth($eases, $i);
    $delay       : nth($delays, $i);
    @each $ani in $animation {
      $transition  : ($ani #{$duration + 's'} $ease #{$delay + 's'});
      $transitions : append($transitions, $transition, comma);

      $transition-webkit  : (if($ani == transform, -#{webkit}-#{$ani}, $ani) #{$duration + 's'} $ease #{$delay + 's'});
      $transitions-webkit : append($transitions-webkit, $transition-webkit, comma);
    }
  }

  transition:$transitions $important;

}

@mixin transition-timing-function($ease:ease-in-out) {
  transition-timing-function : $ease;
}

@mixin transition-easing($ease:ease-in-out) {
  @include transition-timing-function($ease);
}

// Blend Background
@mixin blend-background($args...) {

  $blends    : ();
  $important : null;
  $default   : multiply;

  @each $arg in $args {
    @if is-important($arg) {
      $important : !important;
    } @elseif contains($blend-modes, $arg) {
      $blends : append($blends, $arg, comma);
    }
  }

  background-blend-mode: if(is-empty($blends), $default, $blends) $important;
}

// Blend Mix
@mixin blend-mix($args...) {

  $blends    : ();
  $important : null;
  $default   : multiply;

  @each $arg in $args {
    @if is-important($arg) {
      $important : !important;
    } @elseif contains($blend-modes, $arg) {
      $blends : append($blends, $arg, comma);
    }
  }

  mix-blend-mode: if(is-empty($blends), $default, $blends) $important;
}

/// @require {PostCSS Assets}

@mixin image-size($args...) {

  $defaults : (
    image    : null,
    property : null,
    prefix   : null,
  );

  $settings : get-settings($defaults, $args...);

  $image     : map-get($settings, image);
  $property  : map-get($settings, property);
  $prefix    : map-get($settings, prefix);
  $important : map-get($settings, important);

  $prefix : if(contains(min max, $prefix), #{$prefix + '-'}, null);

  #{$prefix}height : height($image, $property) $important;
  #{$prefix}width  : width($image, $property) $important;

}

/// Create a triangle/carrat/arrow 
///
/// @param {list} $args
///   In any order and without comma delimination, add any of the follwing arrow settings
///   Colour { color } - Hex or RGBA
///   Width { int } - First intiger is used as the width. 'px' units are used by defualt if not specified.
///   Height { int } - Second intiger is used as the height. 'px' units are used by defualt if not specified. Width is used if second unit is not found.
///   Direction { string } - top-left, up, top-right, left, right, bottom-left, down, bottom-right.
///   Center { string } - In addition to the direction, you can add the unquote string 'center' to center the arrow
///   Sudo { string } - Use an unquote string 'before' or 'after' to distinguish what sudo element to use
///
/// @param {bool} $position
///   Determines wether the arrow should be positioned at all
///
/// @require {map} triangle-settings
/// @require {function} random-color
/// @require {function} map-fetch
/// @require {function} is-calc
///
///
/// @example {scss} - Usage
///   @include triangle-classic(50% 20 purple right);
///   @include triangle-classic(100 100 green up center after);
///
/// @return {sudo}


@mixin triangle-classic($args...) {  

  // Deafult Triangle Settings
  $size      : ();
  $sudo      : before;
  $colour    : random-colour();
  $direction : right;
  $center    : false;
  $triangle  : map-fetch($triangle-settings, $direction, points);
  
  // Deafult Position Settings
  $position  : true;
  $x-pos     : nth(map-fetch($triangle-settings, $direction, x), 1);
  $x-amount  : nth(map-fetch($triangle-settings, $direction, x), 2);
  $y-pos     : nth(map-fetch($triangle-settings, $direction, y), 1);
  $y-amount  : nth(map-fetch($triangle-settings, $direction, y), 2);
  
  $args: if(length($args) > 0, $args, null); 

  // Loop through and check all arguments for any special options.

  @for $i from 1 through length($args) {
    @each $option in nth($args, $i) {
      // If there is an arugment, with just one value, and it's set to true or false.
      // Assume this is the position condition. 
      @if type-of($option) == bool and length(nth($args, $i)) == 1 {
        $position : $option;
      }
    }
  } 

  // Check Triangle Settings
  @each $rule in nth($args, 1) {    

    @if type-of($rule) == number or is-calc($rule) and length($size) < 2 {
      $size : append($size, $rule);
    }
    @elseif type-of($rule) == color {
      $colour : $rule;
    }
    @elseif type-of($rule) == string {
      @if $rule == before or $rule == after {
        $sudo : unquote($rule);
      }
      @elseif $rule == center {
        $center : true;
      }
      @elseif map-has-key($triangle-settings, $rule) {
        $direction: $rule;

        $x:map-fetch($triangle-settings, $direction, x);
        $x-pos:nth($x, 1); 
        $x-amount:nth($x, 2);

        $y:map-fetch($triangle-settings, $direction, y);
        $y-pos:nth($y, 1); 
        $y-amount:nth($y, 2);
      }
    }
  }

  // Deafult size set if it remains empty
  $size : if(length($size) == 0, 50, $size);
  
  // Define width and height
  $width : nth($size, 1);
  $height : if(length($size) == 1, $width, nth($size, 2));
  
  // Define all settings with strings
  
  &#{pseudo($sudo)} {
    content:"";
    position:absolute;    
    height:0; 
    width:0;
    border-style:solid; 
    border-color:transparent;
    border-width:0;
    pointer-events:none;

    @if $center {
      top:calc(50% - #{add-unit($height)}/2); left:calc(50% - #{add-unit($width)}/2);
    } @elseif ($position) {
      @if $direction == up or $direction == down {
        #{$y-pos}:calc(#{$y-amount} - #{add-unit($width)}/2);
        #{$x-pos}:$x-amount;
      }
      @elseif $direction == left {
        #{$y-pos}:$y-amount;
        #{$x-pos}:calc(#{$x-amount} - #{add-unit($height)}/2);
      }
      @elseif $direction == right {
        #{$y-pos}:calc(#{$y-amount} - #{add-unit($height)}/2);
        #{$x-pos}:$x-amount;
      }
      @else {
        #{$y-pos}:$y-amount;
        #{$x-pos}:$x-amount;
      }
    }

    // Directions
    @if $direction == left {
      border-width:add-unit($height/2) add-unit($width) add-unit($height/2) 0;
    }
    @elseif $direction == right {
      border-width:add-unit($height/2) 0 add-unit($height/2) add-unit($width);
    }
    @elseif $direction == up {
      border-width:0 add-unit($width/2) add-unit($height) add-unit($width/2);
    }
    @elseif $direction == down {
      border-width:add-unit($height) add-unit($width/2) 0 add-unit($width/2);
    }
    
    @if contains(left right up down, $direction) {
      border-#{opposite-direction($direction)}-color:$colour;
    }
    
    @if $direction == top-left {
      border-width:add-unit($height) add-unit($width) 0 0;
      border-top-color:$colour;
    }
    @elseif $direction == top-right {
      border-width:0 add-unit($width) add-unit($height) 0;
      border-right-color:$colour;
    }
    @elseif $direction == bottom-left {
      border-width:add-unit($height) 0 0 add-unit($width);
      border-left-color:$colour;
    }
    @elseif $direction == bottom-right {
      border-width:0 0 add-unit($height) add-unit($width);
      border-bottom-color:$colour;
    }

     @if $direction == up { $direction : top; }
     @if $direction == down { $direction : bottom; }


    @content;
  }
}
/// Triangle Settings
///
/// @author Mark Notton
///
/// @type variables

$triangle-settings: (
  top-left : (
    points : "0,100 0,0 100,0",
    y : ( left , 0 ),
    x : ( top , 0 )
  ),
  up : (
    points : "100,100 0,100 50,0",
    y : ( left , 50% ),
    x : ( bottom , 100% )
  ),
  top-right : (
    points : "100,100 0,0 100,0",
    y : ( right , 0 ),
    x : ( top , 0 )
  ),
  left : (
    points : "100,100 0,50 100,0",
    y : ( right , 100% ),
    x : ( top , 50% )
  ),
  right : (
    points : "0,100 0,0 100,50",
    y : ( top , 50% ),
    x : ( left , 100% )
  ),
  bottom-left : (
    points : "100,100 0,100 0,0",
    y : ( left , 0 ),
    x : ( bottom , 0 )
  ),
  down : (
    points : "0,0 100,0 50,100",
    y : ( left , 50% ),
    x : ( top , 100% )
  ),
  bottom-right : (
    points : "0,100 100,0 100,100",
    y : ( bottom , 0 ),
    x : ( right , 0 )
  ),
);


/// Create a triangle/carrat/arrow
///
/// @todo Figure a way to animate the fill colour of the svg background
/// @todo Get Stroke Alignment to work "inner".
///
/// @param {list} $args
///   In any order and without comma delimination, add any of the follwing arrow settings
///   Colour { color } - Hex or RGBA
///   Width { int } - First intiger is used as the width. 'px' units are used by defualt if not specified.
///   Height { int } - Second intiger is used as the height. 'px' units are used by defualt if not specified. Width is used if second unit is not found.
///   Direction { string } - top-left, up, top-right, left, right, bottom-left, down, bottom-right.
///   Center { string } - In addition to the direction, you can add the unquote string 'center' to center the arrow
///   Sudo { string } - Use an unquote string 'before' or 'after' to distinguish what sudo element to use
///
/// @param {bool} $position
///   Determines wether the arrow should be positioned at all
///
/// @require {map} triangle-settings
/// @require {function} random-color
/// @require {function} map-fetch
/// @require {function} is-calc
///
///
/// @example {scss} - Usage
///   @include arrow(50% 20 purple right);
///   @include arrow(100 100 green up center after);
///
/// @return {sudo}

@mixin triangle($args...) {

  // Deafult Triangle Settings
  $size      : ();
  $sudo      : before;
  $colour    : random-colour();
  $direction : right;
  $center    : false;
  $triangle  : map-fetch($triangle-settings, $direction, points);

  // Deafult Position Settings
  $position  : true;
  $x-pos     : nth(map-fetch($triangle-settings, $direction, x), 1);
  $x-amount  : nth(map-fetch($triangle-settings, $direction, x), 2);
  $y-pos     : nth(map-fetch($triangle-settings, $direction, y), 1);
  $y-amount  : nth(map-fetch($triangle-settings, $direction, y), 2);

  // Deafult Stroke Settings
  $stroke      : false;
  $s-colour    : random-colour();
  $s-width     : 5;
  $s-linecap   : round;
  $s-linejoin  : round;
  $s-dasharray : null;

  $args: if(length($args) > 0, $args, null);
  $value-counter : 0;

  // Loop through and check all arguments for any special options
  @for $i from 1 through length($args) {
    @each $option in nth($args, $i) {
      @if type-of($option) == bool and length(nth($args, $i)) == 1 {
        $position : $option;
      } @elseif length($args) > 1 {
        $stroke : nth($args, $i);
      }
    }
  }

  // Check Triangle Settings
  @each $rule in nth($args, 1) {

    @if type-of($rule) == number or is-calc($rule) and length($size) < 2 {
      $size : append($size, $rule);
    }
    @elseif type-of($rule) == color {
      $colour : $rule;
    }
    @elseif type-of($rule) == string {
      @if $rule == before or $rule == after {
        $sudo : unquote($rule);
      }
      @elseif $rule == center {
        $center : true;
      }
      @elseif map-has-key($triangle-settings, $rule) {
        $direction: $rule;
        $triangle: map-fetch($triangle-settings, $direction, points);

        $x:map-fetch($triangle-settings, $direction, x);
        $x-pos:nth($x, 1);
        $x-amount:nth($x, 2);

        $y:map-fetch($triangle-settings, $direction, y);
        $y-pos:nth($y, 1);
        $y-amount:nth($y, 2);
      }
    }
  }

  // Check Stroke Settings
  @if $stroke {
    @each $rule in $stroke {
      @if type-of($rule) == string {
        @if index((butt round square), $rule) {
          $s-linecap : $rule;
        }
        @if index((miter miter-clip round bevel arcs), $rule) {
          $s-linejoin : $rule;
        }
      }
      @elseif type-of($rule) == list {
        @each $dash in $rule {
          $s-dasharray: append($s-dasharray,  $dash, comma);
        }
      }
      @elseif type-of($rule) == color {
        $s-colour : $rule;
      }
      @elseif type-of($rule) == number {
        @if $value-counter < 1 {
          $s-width : $rule;
          $value-counter : $value-counter + 1;
        } @elseif $value-counter >= 1 {
          $s-dasharray : ($rule, $rule);
        }
      }
    }
  }

  // Deafult size set if it remains empty
  $size : if(length($size) == 0, 50, $size);

  // Define width and height
  $width : nth($size, 1);
  $height : if(length($size) == 1, $width, nth($size, 2));

  // Define all settings with strings
  $fill : "' fill='" + hash-fix($colour);

  @if $stroke {
    $s-colour    : "' stroke='" + hash-fix($s-colour);
    $s-width     : "' stroke-width='" + remove-unit($s-width);
    $s-alignment : "' stroke-alignment='inner";
    $s-linecap   : if($s-linecap, "' stroke-linecap='" + $s-linecap, '');
    $s-linejoin   : if($s-linejoin, "' stroke-linejoin='" + $s-linejoin, '');
    $s-dasharray : if($s-dasharray, "' stroke-dasharray='" + $s-dasharray, '');
  }

  &#{pseudo($sudo)} {
    content:"";
    @include size($width $height);
    position:absolute;
    pointer-events:none;
    background-image:svg("<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='none' viewBox='0 0 100 100'><polygon points='" + $triangle + $fill + if($stroke, $s-colour + $s-linecap + $s-linejoin + $s-width + $s-alignment + $s-dasharray,'') + "'/></svg>");
    background-size:100% 100%;
    background-repeat:no-repeat;
    @if $center {
      top:calc(50% - #{add-unit($height)}/2); left:calc(50% - #{add-unit($width)}/2);
    } @elseif ($position) {
      @if $direction == up or $direction == down {
        #{$y-pos}:calc(#{$y-amount} - #{add-unit($width)}/2);
        #{$x-pos}:$x-amount;
      }
      @elseif $direction == left {
        #{$y-pos}:$y-amount;
        #{$x-pos}:calc(#{$x-amount} - #{add-unit($height)}/2);
      }
      @elseif $direction == right {
        #{$y-pos}:calc(#{$y-amount} - #{add-unit($height)}/2);
        #{$x-pos}:$x-amount;
      }
      @else {
        #{$y-pos}:$y-amount;
        #{$x-pos}:$x-amount;
      }
    }

    @content;
  }

  @include ie {
    @include triangle-classic($width $height $colour $direction $sudo) { background-image:none $imp; @content };
  }
}


/// @alias triangle
///
/// @access public
///
/// @require {mixin} triangle
///
/// @return {*}

@mixin arrow($args...) {
  @include triangle($args...) {
    @content
  }
}

/// Create a pseudo element which will retain a parent elements' aspect ratio responsively. 
///
/// @author Mark Notton
///
/// @access public
///
/// @param {number | list} $ratio - Use a predefined variable, directly enter a percentage, or pass in one or two numbers to be calculated.
///
/// @param {string} $sudo - Set the type of pseudo to use. Defaults to "before".
///
/// @require {function} sudo
/// @require {function} _unit-fallback
/// @require {function} first
/// @require {function} second
/// @require {function} is-percentage
///
/// @example scss - Usage
/// .foo {
///   @include aspect-ratio($ratio-16-9);
/// }
///
/// .bar {
///   @include aspect-ratio(2 1, after);
/// }
///
/// @example css - CSS output
/// .foo:before {
///   content: "";
///   display: block;
///   padding-top: 56.25%;
/// }
///
/// .bar:after {
///   content: "";
///   display: block;
///   padding-top: 50%;
/// }

@mixin aspect-ratio($ratio:1, $sudo:before) {

  $width  : check(first($ratio), 1);
  $height : check(second($ratio), first($ratio));

  &#{pseudo($sudo)} {
    content:"";
    display:block;
    padding-top: if(is-percentage($width), $width, percentage($height / $width));
  }
}

/// 10px on each corner. Call also use the string "all"
/// @include border-radius(10)
/// @include border-radius(all 10)

/// 10 top left, 20 top right, 0 bottom right, 0 bottom left
/// @include border-radius(10 20)

/// 10 top left, 20 top right, 30 bottom right, 0 bottom left
/// @include border-radius(10 20 30)

/// 10 top left, 20 top right, 30 bottom right, 40 bottom left
/// @include border-radius(10 20 30 40)

/// 10 top left, 10 top right, 0 bottom right, 0 bottom left
/// @include border-radius(10 top)

/// 0 top left, 10 top right, 10 bottom right, 0 bottom left
/// @include border-radius(10 right)

/// 0 top left, 0 top right, 10 bottom right, 10 bottom left
/// @include border-radius(10 bottom)

/// 10 top left, 0 top right, 0 bottom right, 10 bottom left
/// @include border-radius(10 left)

/// 10 top left, 0 top right, 30 bottom right, 0 bottom left
/// @include border-radius(10 top-left, 30 bottom-right)

@mixin border-radius($args...) {
  $corners : ();
  $directions : ();
  $excess-units : 0;

  $args: if(length($args) > 0, $args, null);

  @for $i from 1 through length($args) {

    @each $rad in nth($args, $i) {
      @if type-of($rad) == number and length($corners) < 4 {
        $corners : append($corners, $rad);
      } @elseif type-of($rad) == number and length($corners) == 4 {
        $excess-units : $excess-units + 1;
      }
    }
    @each $dir in nth($args, $i) {
      @if type-of($dir) == string {
        @if $dir == circle {
          $corners : 100%;
        } @else {
          $directions : append($directions, $dir);
        }
      }
    }
  }

  @if $excess-units > 0 {
    @include warning("You can't have more than 4 units per argument. You have added '#{$excess-units}' number"+ if($excess-units != 1, 's', '') +" too many. Squares don't work that way.");
  }

  $corners : if(length($corners) == 0, $border-radius, $corners);
  $corner-count : length($corners);

  @if length($directions) == 0 {
    $directions : if($corner-count == 1, all, slice((top-left top-right bottom-right bottom-left), 1, $corner-count));
  }

  $direction-count : length($directions);

  @for $i from 1 through $direction-count {
    $direction : nth($directions, $i);
    $radius : 0;
    @if $corner-count == $direction-count {
      $radius: nth($corners, $i);
    } @else {
      @if $corner-count > $direction-count and $i == $direction-count {
        $radius: nth($corners, $i);
        @include warning('You have entered more units than directions. Reverting back to the first numbers you entered');
      } @else {
        $radius: nth($corners, 1);
      }
    }

    @if $direction == all {
      border-radius : add-unit($radius);
    }
    @elseif $direction == top {
      border-top-left-radius : add-unit($radius);
			border-top-right-radius : add-unit($radius);
    }
    @elseif $direction == right {
      border-top-right-radius : add-unit($radius);
			border-bottom-right-radius : add-unit($radius);
    }
    @elseif $direction == bottom {
      border-bottom-left-radius : add-unit($radius);
			border-bottom-right-radius : add-unit($radius);
    }
    @elseif $direction == left {
      border-top-left-radius : add-unit($radius);
			border-bottom-left-radius : add-unit($radius);
    }
    @else {
      border-#{$direction}-radius : add-unit($radius);
    }
  }
}

/// @alias transition
@mixin radius($settings...) { @include border-radius($settings...); }

@mixin clearfix {
  &::after {
    clear: both;
    content: "";
    display: table;
  }
}

@mixin container($args...) {

  $defaults : (
    gutters    : $gutters,
    break      : $medium,
    max-width  : $max
  );

  $settings : get-settings($defaults, $args...);

  $gutters    : map-get($settings, gutters);
  $break      : map-get($settings, break);
  $max        : map-get($settings, max-width);
  $important  : map-get($settings, important);

  width:100%;
  position:relative;
  display:block;
  margin-left:auto; margin-right:auto;
  max-width:add-unit($max);

	padding-left  : var(--gutters, add-unit($gutters)) $important;
	padding-right : var(--gutters, add-unit($gutters)) $important;

}

/// Filter mixin that allows various syntax's
///
/// @author Mark Notton
///
/// @access public
///
/// @param {Map} $settings - Each argument should consist of a filter type and it's value
///
/// @require {variable} transform-types
/// @require {variable} transform-values
/// @require {function} arglist-to-list
/// @require {function} contains
/// @require {function} is-function
/// @require {function} is-string
///
/// @example scss - Usage
///   Doggy Style Syntax
///   @include filter(blur 5, sepia 100);
///   Bourbon Syntax
///   @include filter(blur(5), sepia(100));
///   Generic Syntax
///   @include filter(blur(5) sepia(100));
///
/// @example css - CSS Output
///   -webkit-filter: blur(5px) sepia(100%);
///   -moz-filter: blur(5px) sepia(100%);
///   filter: blur(5px) sepia(100%);
///

@mixin filter($settings...) {

  $filters : ();
  $fallback-settings : ();
  $important : false;

  @if not contains($filter-values, $settings, true) and length($settings) >= 1 {

    // This is an over-engineered section of code to to allow for all types of syntaxes.
    // Essestially making it work with Bourbon and other frameworks.
    @if length($settings) == 1  {
      @for $i from 1 through length($settings) {
        @each $setting in nth($settings, $i) {
          @if is-function($setting) {
            $fallback-settings : append($fallback-settings, $setting, comma);
          }
        }
      }
    }
    $settings-lists : if(length($fallback-settings) > 1, $fallback-settings,  arglist-to-list($settings));


    @each $settings in $settings-lists {

      @if is-function($settings) {
        $settings : is-function($settings);
      }

      $filter : null;
      $value : ();

      // Check for transforms
      @each $setting in $settings {
        @if is-string($setting) and contains($filter-types, $setting) {
          @if $setting == hue {
            $filter : hue-rotate;
          } @elseif $setting == shadow {
            $filter : drop-shadow;
          } @elseif $setting == greyscale {
            $filter : grayscale;
          } @else {
            $filter : $setting;
          }
        } @elseif is-bool($setting){
          $important : $setting;
        }
      }

      // Check and validate all transform types
      @each $setting in $settings {
        @if not is-string($setting) and not is-bool($setting) {
          @if contains($filter, (blur)) {
            // Values that require a unit
            $value : append($value, add-unit($setting));
          } @elseif contains($filter, (hue-rotate)) {
            // Values that require an angle
            $value : append($value, add-unit($setting, deg));
          } @elseif contains($filter, (invert opacity saturate sepia contrast grayscale)) {
            // Values that require an percent
            $value : append($value, add-unit($setting, %));
          } @elseif $filter == drop-shadow {
            // Specific for drop-shdaow
            @each $val in $setting {
              @if is-number($val) {
                $value : append($value, add-unit($val));
              } @elseif is-colour($val) {
                $value : append($value, $val);
              }
            }

          } @else {
            // All other values
            $value : append($value, $setting);
          }
        } @elseif contains($filter-values, $setting) {
          // Values that are strings and are global values
           $value : append($value, $setting);
        }
      }

      // Append transform and value to the transforms list
      @if $filter != null {
        $filters : append($filters, $filter+"("+$value+")");
      }

    }
  } @else {
   $filters : nth($settings, 1);
  }
  // @debug $filters;
  // @debug $important;
  filter : $filters $important;

}

@mixin url($value:null, $important:false) {
  @include filter(url $value $important);
}

@mixin blur($value:5px, $important:false) {
  @include filter(blur $value $important);
}

@mixin brightness($value:0.4, $important:false) {
  @include filter(brightness $value $important);
}

@mixin contrast($value:200%, $important:false) {
  @include filter(contrast $value $important);
}

@mixin drop-shadow($value:16px 16px 20px blue, $important:false) {
  @include filter(drop-shadow $value $important);
}
@mixin dropshadow($value, $important:false) { @include drop-shadow($value, $important); }

@mixin greyscale($value:50%, $important:false) {
  @include filter(grayscale $value $important);
}
@mixin grayscale($value, $important:false) { @include greyscale($value, $important); }

@mixin hue-rotate($value:90deg, $important:false) {
  @include filter(hue-rotate $value $important);
}
@mixin hue($value, $important:false) { @include hue($value, $important); }

@mixin invert($value:75%, $important:false) {
  @include filter(invert $value $important);
}

@mixin opacity($value:25%, $important:false) {
  @include filter(opacity $value $important);
}

@mixin saturate($value:30%, $important:false) {
  @include filter(saturate $value $important);
}

@mixin sepia($value:60%, $important:false) {
  @include filter(sepia $value $important);
}

/// Sets the width and height to the same values
/// If the second para "special" is defined as min or max, the dimenstions will be prefixed with that

/// @example @include size(100, 200, max);
/// @output max-width:100px; max-height:100px;

/// @example @include size(150, important);
/// @output width:150px !important; height:150px !important;

@mixin size($args...) {

  $defaults : (
    width : null,
    height : null,
    prefix : null,
  );

  $settings : get-settings($defaults, $args...);

  $width     : map-get($settings, width);
  $height    : check(map-get($settings, height), $width, number);
  $prefix    : map-get($settings, prefix);
  $important : map-get($settings, important);

  $prefix : if(contains($prefix, (min, max)), $prefix + '-', null);

  #{$prefix}width  : add-unit($width) $important;
  #{$prefix}height : add-unit($height) $important;

}

// Style an element into a responsive square

@mixin square($size:50, $sudo:after) {
  display:block;
  overflow:hidden;
  max-width:add-unit($size);
  width:100%;
  &#{pseudo($sudo)} {
    content: "";
    display: block;
    padding-bottom: 100%;
  }
}

/// Transforms mixin that allows various syntax's
///
/// @author Mark Notton
///
/// @access public
///
/// @param {Map} $settings - Each argument should consist of a transform type and it's value
///
/// @require {variable} transform-types
/// @require {variable} transform-values
/// @require {function} arglist-to-list
/// @require {function} contains
/// @require {function} is-function
/// @require {function} is-string
///
/// @example scss - Usage
///   Doggy Style Syntax
///   @include transform(rotate 90, scale 0.8);
///   Bourbon Syntax
///   @include transform(rotate(90deg) scale(0.8));
///   Generic Syntax
///   @include transform(rotate(90deg), scale(0.8));
///
/// @example css - CSS Output
///    -webkit-transform: rotate(90deg) scale(0.8);
///    -moz-transform: rotate(90deg) scale(0.8);
///    transform: rotate(90deg) scale(0.8);
///

@mixin transform($settings...) {

  $transforms : ();
  $important : null;

  @if not contains($transform-values, $settings, true) and length($settings) >= 1 {

    $settings-lists : arglist-to-list($settings);

    @each $settings in $settings-lists {

      @if is-function($settings) {
        $settings : function-to-list($settings);
      }

      $transform : null;

      $value : ();

      // Check for transforms
      @each $setting in $settings {
        @if is-string($setting) and contains(merge($transform-types, x y X Y), $setting) {
          $transform : $setting;
        }
      }

      // Check and validate all transform types
      @each $setting in $settings {

        @if not is-string($setting) {
          @if contains($transform, (translate translateY translateX translateZ translate3d y x Y X perspective)) {
            // Values that require a unit
            @each $val in $setting {
              @if ($transform == 'x' or $transform == 'X') {
                $transform : translateX;
              } @elseif ($transform == 'y' or $transform == 'Y') {
                $transform : translateY;
              }
              $value : append($value, add-unit($val), comma);
            }
          } @elseif contains($transform, (rotate rotateX rotateY rotateZ rotate3d skew skewX skewY)) {
            // Values that require an angle
            @each $val in $setting {
              @if $transform != rotate3d {
                $value : append($value, add-unit($val, deg), comma);
              } @else {
                $value : append($value, $val, comma);
              }
            }
          } @elseif contains($transform, (scale)) {
            // Values that require an angle
            @each $val in $setting {
                $value : append($value, $val, comma);
            }
          } @else {
            @if is-bool($setting) {
              $important : $setting;
            } @else {
              // All other values
              $value : append($value, $setting);
            }
          }
        } @elseif contains($transform-values, $setting) {
          // Values that are strings and are global values
          $value : append($value, $setting);
        }
      }

      // Append transform and value to the transforms list
      @if $transform != null {
        $transforms : append($transforms, $transform+"("+$value+")");
      }

    }
  } @else {
   $transforms : nth($settings, 1);
  }

  transform: $transforms $important;

}


/// Transform origin
@mixin transform-origin($value: 50% 50%) {

  $values : ();

  @if length($value) > 1 {
    @each $val in $value {
      $values : append($values, add-unit($val));
    }
  } @else {
    $values : add-unit($value);
  }

  transform-origin: $values;
}


@mixin transform-style($value) {
  @if contains((flat preserve-3d initial inherit), $value) {
    transform-style: $value;
  } @else {
    @include warning($value + ": is an invalid value for 'transform-style'");
  }
}

/// Matrix
@mixin matrix($args...) {
  @include transform(matrix $args);
}

@mixin matrix3d($args...) {
  @include transform(matrix3d $args);
}


/// Translate
@mixin translate($values) {
  $x : nth($values, 1);
  $y : if( length($values) > 1, nth($values, 2), $x);
  @include transform(translate $x $y);
}

@mixin translateX($values) {
  @include transform(translateX $values);
}
@mixin x($values) { @include translateX($values) };

@mixin translateY($values) {
  @include transform(translateY $values);
}
@mixin y($values) { @include translateY($values) };

@mixin translate3d($values) {
  $x : nth($values, 1);
  $y : if( length($values) > 1, nth($values, 2), 0);
  $z : if( length($values) > 2, nth($values, 3), 0);
  @include transform(translate3d $x $y $z);
}

@mixin translateZ($value) {
  @include transform(translateZ $value);
}


/// Scale
@mixin scale($values) {
  $width: nth($values, 1);
  $height : if(length($values) > 1, nth($values, 2), null);


  @include transform(scale $width $height);
}

@mixin scaleX($value) {
  @include transform(scaleX remove-unit($value));
}

@mixin scaleY($value) {
  @include transform(scaleY remove-unit($value));
}

@mixin scale3d($values) {
  $x : remove-unit(nth($values, 1));
  $y : if( length($values) > 1, remove-unit(nth($values, 2)), 0);
  $z : if( length($values) > 2, remove-unit(nth($values, 3)), 0);
  @include transform(scale3d $x $y $z);
}

@mixin scaleZ($value) {
  @include transform(scaleZ remove-unit($value));
}


/// Rotate
@mixin rotate($value) {
  @include transform(rotate $value);
}

@mixin rotateX($value) {
  @include transform(rotateX $value);
}

@mixin rotateY($value) {
  @include transform(rotateY $value);
}

@mixin rotateZ($value) {
  @include transform(rotateZ $value);
}

@mixin rotate3d($values) {
  $x :   if( length($values) == 1, remove-unit(nth($values, 1)), 0);
  $y :   if( length($values) > 1,  remove-unit(nth($values, 2)), 1);
  $z :   if( length($values) > 2,  remove-unit(nth($values, 3)), 0);
  $deg : if( length($values) > 3,  to-number(add-unit(nth($values, 4), deg)), 0);
  @include transform(rotate3d $x $y $z $deg);
}


/// Skew
@mixin skew($values) {
  $x : add-unit(nth($values, 1), deg);
  $y : add-unit(if( length($values) > 1, nth($values, 2), 0), deg);
  @include transform(skew $x $y);
}

@mixin skewX($value) {
  @include transform(skewX add-unit($value, deg));
}

@mixin skewY($value) {
  @include transform(skewY add-unit($value, deg));
}


/// Perspective
@mixin perspective($value:600) {
  perspective: add-unit($value);
}

@mixin perspective-origin($value:50% 50%) {

  $values : ();

  @if length($value) > 1 {
    @each $val in $value {
      $values : append($values, add-unit($val));
    }
  } @else {
    $values : add-unit($value);
  }

  perspective-origin: $values;
}

@mixin viewport-width($args...) {

  $defaults : (
    refactor   : true,
    breakpoint : if(variable-exists(min),$min, 320px),
  );

  $settings : get-settings($defaults, $args...);

  $refactor   : map-get($settings, refactor);
  $breakpoint : map-get($settings, breakpoint);
  $important  : map-get($settings, important);

  width:100%;
  min-width : add-unit($breakpoint);

  @if not is-null($breakpoint) {

    @include break($break, '>') {
      width:100vw;
      left:50%;
      @include x(-50%);
    }

  }


  @if ( $refactor != false ) {
    $refactor-gap : if(is-number($refactor), add-unit($refactor), $gap);
    @include break($break - 1, '<') {
      left:-$refactor-gap;
      width:calc(100% + #{$refactor-gap*2});
      @content;
    }
  }
}

/// Create gradients
///
/// @author Mark Notton
///
/// @access private
///
/// @param {list} $args - Pass in the following gradient settings.
///   [type]       - name of the graditent must be the first parameter
///   [rule]       - Optional. If the gradient type requires it, you can add special rules. Like directions (as a string or number).
///                  You don't need to type in 'to' for directions. This will be included automatically if necessary.
///   [settings]   - Add a list of arguments for each colour. This can include a colour and number per argument.
///
/// @require {Mixin} contains
/// @require {Mixin} prefix-values
/// @require {Mixin} warning
/// @require {Function} is-string
/// @require {Function} is-number
/// @require {Function} add-unit
/// @require {Function} remove-nth
/// @require {Function} replace-nth
/// @require {Function} arglist-to-list
///
/// @example scss - Usage
/// .foo {
///   @include gradient(radial-repeat, ellipse farthest-corner, red, black 5%, blue 5%, green 10%);
/// }
///
/// @example css - CSS output
/// .foo {
///   background: -webkit-repeating-radial-gradient(ellipse farthest-corner, red, black 5%, blue 5%, green 10%);
///   background: -moz-repeating-radial-gradient(ellipse farthest-corner, red, black 5%, blue 5%, green 10%);
///   background: -o-repeating-radial-gradient(ellipse farthest-corner, red, black 5%, blue 5%, green 10%);
///   background: -ms-repeating-radial-gradient(ellipse farthest-corner, red, black 5%, blue 5%, green 10%);
///   background: repeating-radial-gradient(ellipse farthest-corner, red, black 5%, blue 5%, green 10%); }
/// }
///

@mixin _gradient($args...) {

  $settings : arglist-to-list($args);

  $type: nth($settings, 1);

  @if contains($type, $gradient-types) {

    // Aliases
    @if $type == linear-repeat {
      $type : repeating-linear;
    } @elseif $type == radial-repeat {
      $type : repeating-radial;
    } @elseif contains($type, circle) {
      $type : radial;
    }

    $settings : remove-nth($settings, 1);

  } @else {

    $type : linear;

    // @error "The first parameter must be the gradient type: #{$gradient-types}";

  }

  @if length($settings) > 1 {

    @for $i from 1 through length($settings) {
      $setting : nth($settings, $i);
      // @debug $setting;
      // Special first argument checks
      @if ($i == 1) {
        $unit : deg;

        // Loop through the initial setting and check any unitless numbers has 'deg' as a default

        @if contains($type, repeating-radial radial) {
          $unit : %;
          @if is-number($setting) {
            @include warning($type + " can not have a number as the first parameter, it should be a colour");
          }
          @if contains($setting, at) {
            $setting : replace-nth($setting, 1, add-unit(nth($setting, 1), px));
          }
        }

        @if is-number($setting) {
          $settings : replace-nth($settings, 1, add-unit($setting, $unit));
        } @elseif is-list($setting) {
          @if contains($setting, to) {
            $setting : remove($setting, to);
          }
          @for $l from 1 through length($setting) {
            $list-setting : nth($setting, $l);
            @if is-number($list-setting) {
              $setting : replace-nth($setting, $l, add-unit($list-setting, $unit));
            }
          }
          $settings : replace-nth($settings, 1, $setting);
        }
      } @else {

        @if is-list($setting) {
          @for $l from 1 through length($setting) {
            $list-setting : nth($setting, $l);
            @if is-number($list-setting) {
              $setting : replace-nth($setting, $l, add-unit($list-setting, %));
            }
          }
          $settings : replace-nth($settings, $i, $setting);
        }

      }

    }

    $new-settings : ();
    $new-generic-settings : ();

    @each $set in $settings {
      $new-settings : append($new-settings, $set, comma);
      // Special checks for the generic syntax that requires "to" for specific direction strings
      @if contains($set, right bottom left top) {
        $new-generic-settings : append($new-generic-settings, to $set, comma);
      } @else {
        $new-generic-settings : append($new-generic-settings, $set, comma);
      }

    }

    @include prefix-values(background, #{$type}-gradient($new-settings), webkit moz o ms only);
    background:#{$type}-gradient($new-generic-settings);

  } @else {
    @include warning("You'll need more gradient settings than that");
  }

}

@mixin gradient($args...) {
  @include _gradient($args...);
}

@mixin gradient-radial($args...) {
  @include _gradient(radial, $args...);
}
@mixin radial($args...) { @include gradient-radial($args...); }

@mixin gradient-right($args...) {
  @include _gradient(linear, right, $args);
}
@mixin gradient-horizontal($args...) { @include gradient-right($args...); }

@mixin gradient-left($args...) {
  @include _gradient(linear, left, $args);
}

@mixin gradient-top($args...) {
  @include _gradient(linear, top, $args);
}
@mixin gradient-vertical($args...) { @include gradient-top($args...); }

@mixin gradient-bottom($args...) {
  @include _gradient(linear, bottom, $args);
}
@mixin gradient-circle($args...) {
  @include _gradient($args...);
}

@mixin page($args...) {

	$defaults : (
		id    : null,
		class : null,
    except : null,
		root  : 'body',
	);

	$settings : get-settings($defaults, $args...);

	$id     : map-get( $settings, id );
	$class  : map-get( $settings, class );
	$except : map-get( $settings, except );
	$root   : map-get( $settings, root );

	@if not is-null($id) and not string-starts-with($id, '#')  {
		$id : #{'#' + $id};
	}

	@if not is-null($class) and not string-starts-with($class, '.')  {
		$class : #{'.' + $class}
	}

  @if not is-null($except) and $except == true {

    @at-root #{$root}:not(#{$id}#{$class}) {
      @content;
    }

  } @else {

  	@at-root #{$root}#{$id}#{$class} {
  		@content;
  	}
  }

}

/// Box Inner Shadow
/// @param {Size} $x [0px] - X
/// @param {Size} $y [0px] - Y
/// @param {Size} $blur [6px] - Blur
/// @param {Color} $color [rgba(0,0,0,.6)] - Color

@mixin box-inner-shadow($args...) {

  $defaults : (
    x      : 0,
    y      : 0,
    blur   : 5,
    colour : rgba(0,0,0,0.6)
  );

  $settings : get-settings($defaults, $args...);

  $x      : map-get($settings, x);
  $y      : map-get($settings, y);
  $blur   : map-get($settings, blur);
  $colour : map-get($settings, colour);
  $important : map-get($settings, important);

  box-shadow: add-unit($x) add-unit($y) add-unit($blur) $color $important;
}

/// Box Shadow
/// @param {Size} $x [0px] - X
/// @param {Size} $y [0px] - Y
/// @param {Size} $blur [5px] - Blur
/// @param {Color} $color [rgba(0,0,0,.6)] - Color

@mixin box-shadow($args...) {

  $defaults : (
    x      : 0,
    y      : 0,
    blur   : 5,
    colour : rgba(0,0,0,0.6)
  );

  $settings : get-settings($defaults, $args...);

  $x      : map-get($settings, x);
  $y      : map-get($settings, y);
  $blur   : map-get($settings, blur);
  $colour : map-get($settings, colour);
  $important : map-get($settings, important);

  box-shadow: inset add-unit($x) add-unit($y) add-unit($blur) $color $important;
}

/// Define a buttons default and hover styling. Includes a support for css variables and inverting
///
/// @author Mark Notton
///
/// @access public
///
/// @param {list | colour | css variable} $static-colours :
///         Pass in the 2 colours (without a comma). First colour is for text,
///         the second is for the background. You can define a css variable if
///         you have a $variables sass map defined. You may pass in one colour if
///         you later define this button to be inverted (as backgrounds aren't necessary)
/// @param {list | colour | css variable} $hover-colours : Same as the previous param.
///         However this param is optional. Ommiting this option will just reverse
///         the colours from the first param. Inverted options can support static
///         and background colours on hover.
/// @param {bool|string} $borderless - 'borderless' or 'false' will exclude any border colour
/// @param {string} $inverted - 'inverted' or 'true' will trigger an inverted styling.
///         This isn't a simple reverse of the first $static-colours and $hover-colours options.
///         This assumes you want the static state to have no background colour at all.
///
/// @example 1 scss - Usage
/// .button1 {
///   @include button(red white, blue white);
/// }
/// .button2 {
///   @include button(red, blue white, invert);
/// }
///

@mixin button($args...) {

  $static     : ();
  $hover      : ();
  $inverted   : false;
  $borderless : false;

  $static-text       : white;
  $static-background : $blue;
  $hover-text        : $blue;
  $hover-background  : white;

  @each $settings in $args {

    @if is-list($settings) or is-color($settings) or variable-exists(variables) and map-has-key($variables, $settings){
      @if length($static) == 0 {
        $static : $settings;
      } @else if length($hover) == 0 {
        $hover : $settings;
      }
    } @else if is-bool($settings) {
      $borderless : not $settings;
    } @else if is-string($settings) {
      @if $settings == invert {
        $inverted : true;
      } @elseif $settings == 'borderless' {
        $borderless : true;
      }
    }
  }

  @if length($static) == 2 {
    $static-text : first($static);
    @if $inverted != true {
      $static-background : last($static);
    }
    @if $inverted == true and $warnings {
      @warn "You must defined two static colours for an inverted button. The second ("+$static-background+") colour will be ignored";
    }
  } @else if $inverted == true {
    $static-text : first($static);
  } @else {
    @error "You must define two static colours in button(col1 col2). The first is for the text colour. The second for the background colour";
  }

  @if length($hover) == 2 {
    $hover-text       : first($hover);
    $hover-background : last($hover);
  } @else if length($hover) == 1 {
    $hover-text       : $hover;
    $hover-background : col($hover, 0);
  } @else {
    $hover-text       : $static-background;
    $hover-background : $static-text;
  }

  // IVERTED COLOURS
  @if $inverted == true {

    @if variable-exists(variables) and map-has-key($variables, $static-text) {
      @include var(color, $static-text);
      @if not $borderless { @include var(border-color, $static-text); }
    } @else {
      color:$static-text;
      @if not $borderless { border-color:$static-text; }
    }

    &:hover {

      @if variable-exists(variables) and map-has-key($variables, $hover-background) {
        @include var(background-color, $hover-background);
      } @else {
        background-color:$hover-background;
      }

      @if variable-exists(variables) and map-has-key($variables, $hover-text) {
        @include var(color, $hover-text);
        @if not $borderless { @include var(border-color, $hover-text); }
      } @else {
        color:$hover-text;
        @if not $borderless { border-color:$hover-text; }
      }

    }

  } @else {
    // STANDARD COLOURS
    @if variable-exists(variables) and map-has-key($variables, $static-background) {
      @include var(background-color, $static-background);
    } @else {
      background-color:$static-background;
    }

    @if variable-exists(variables) and map-has-key($variables, $static-text) {
      @include var(color, $static-text);
    } @else {
      color:$static-text;
    }

    &:hover {

      @if variable-exists(variables) and map-has-key($variables, $hover-background) {
        @include var(background-color, $hover-background);
      } @else {
        background-color:$hover-background;
      }

      @if variable-exists(variables) and map-has-key($variables, $hover-text) {
        @include var(color, $hover-text);
        @if not $borderless { @include var(border-color, $hover-text); }
      } @else {
        color:$hover-text;
        @if not $borderless { border-color:$hover-text; }
      }

    }

  }

  @content;

}

// Add horizontal lines eitherside some text
@mixin horizontal-lines($args...) {

  $defaults : (
    weight       : 2,
    colour       : if(variable-exists(grey),$grey, #787878),
    line-spacing : if(variable-exists(gap),$gap, 16px),
    wrap         : false
  );

  $settings : get-settings($defaults, $args...);

  $weight       : map-get($settings, weight);
  $colour       : map-get($settings, colour);
  $line-spacing : map-get($settings, line-spacing);
  $wrap         : map-get($settings, wrap);

  text-align:center;

  @if not $wrap { white-space: nowrap; }

  @include flex-container(between center);

  &:before, &:after {
    content:"";
    height:add-unit($weight);
    width:100%;
    background-color:$colour;
    position:relative;
    display:block;
    @include flex-grow(1);
  }

  &:before { margin-right:$line-spacing; }

  &:after { margin-left:$line-spacing; }
}

@mixin normalise() {

	/// @author Nicolas Gallagher & Mark Notton
	/// @see github.com/necolas/normalize.css

	// ------------------------------------------------------------------------ //
	// Global
	// ------------------------------------------------------------------------ //

	html, body, div, span, applet, object, iframe, h1, h2, h3, h4, h5, h6, p,
	blockquote, pre, a, abbr, acronym, address, big, cite, code, del, dfn, em,
	img, ins, kbd, q, s, samp, small, strike, strong, sub, sup, tt, var, b, u, i,
	center, dl, dt, dd, ol, ul, li, fieldset, form, label, legend, table,
	caption, tbody, tfoot, thead, tr, th, td, article, aside, canvas, details,
	embed, figure, figcaption, footer, header, hgroup, menu, nav, output, ruby,
	section, summary, time, mark, audio, video {
		margin: 0;
		padding: 0;
		border: 0;
		vertical-align: baseline;
	}

	:root {
	  font-size: 62.5%;
		line-height: 1.15;
		-webkit-text-size-adjust: 100%;
	}

	*, *:after, *:before {
		&:focus { outline:0; };
		box-sizing:border-box;
		-moz-box-sizing:border-box;
	}

	html { height:100%; font-size: 62.5%; }

	html, body {
		min-width:$min;
		min-height:100%;
	}

	p, pre, blockquote, ol, ul, li, legend, figcaption, body, article, nav, aside, section, header, footer, main, address {
		&:empty { display:none; }
	}

	article, aside, details, figcaption, figure, footer, header, main, menu, nav, section, summary {
		display: block;
	}

	svg, symbol { overflow:visible; }

	details { display: block;	}

	summary { display: list-item;	}

	template { display: none;	}

	[hidden] { display: none; }

	// ------------------------------------------------------------------------ //
	// Section Elements
	// ------------------------------------------------------------------------ //

	@if $normalise-section-elements {

		body {
			font-size: 1.6rem;
			text-rendering: optimizeLegibility;
			-webkit-font-smoothing: antialiased;
			color:$text;
			width:100%; height:100%;
		  @extend %font-default, .default !optional;

			@if mixin-exists(selection) {
		  	@include selection;
			}

			@if $show-breakpoints {
				&:not(.dev-mode):after { display:none; }
			}

		}

		address {
			font-style:normal;
		}

	}

	// ------------------------------------------------------------------------ //
	// Header Elements
	// ------------------------------------------------------------------------ //

	@if $normalise-header-elements {

		h1, h2, h3, h4, h5, h6 {
			-webkit-margin-before:0em;
			-webkit-margin-after:0em;
			-webkit-margin-start:0px;
			-webkit-margin-end:0px;
			font-weight: normal;
			@extend .default !optional;
		}

		@if mixin-exists(font-size) {
			h1{ @include font-size($h1 $h2); }
			h2{ @include font-size($h2 $h2*1.2); }
			h3{ @include font-size($h3 $h3*1.2); }
			h4{ @include font-size($h4 $h4*1.2); }
			h5{ @include font-size($h5 $h5*1.2); }
			h6{ @include font-size($h6 $h6*1.2); }
		}

	}

	// ------------------------------------------------------------------------ //
	// Grouping Elements
	// ------------------------------------------------------------------------ //

	@if $normalise-grouping-elements {

		hr {
			border:none;
			height:1px;
			background-color:$text;
			margin:$gap 0;
			box-sizing: content-box;
			overflow: visible;
		}

		blockquote, q {
			quotes: none;
			&:before, &:after {
				content: '';
				content: none;
			}
		}

		ol, ul {
			list-style: none;
		}

		pre {
			font-family: monospace, monospace;
			font-size: 1em;
			background-color: white;
			color: black;
			padding:16px;
			position:relative;
			z-index:9999;
		}

	}

	// ------------------------------------------------------------------------ //
	// Table Elements
	// ------------------------------------------------------------------------ //

	@if $normalise-table-elements {

		table {
			border-collapse: collapse;
			border-spacing: 0;
		}

	}

	// ------------------------------------------------------------------------ //
	// Form Elements
	// ------------------------------------------------------------------------ //

	@if $normalise-form-elements {

		button,	input, optgroup,	select,	textarea {
			font-family: inherit;
			font-size: 100%;
			line-height: 1.15;
			margin: 0;
		}

		button,	input {
			overflow: visible;
		}

		button,	select {
			text-transform: none;
		}

		button,
		[type="button"],
		[type="reset"],
		[type="submit"] {
			-webkit-appearance: button;
			background:none;
			border:none;
			padding:0;
			margin:0;
			cursor:pointer;
			&:focus { outline:0; }
		}

		button::-moz-focus-inner,
		[type="button"]::-moz-focus-inner,
		[type="reset"]::-moz-focus-inner,
		[type="submit"]::-moz-focus-inner {
			border-style: none;
			padding: 0;
		}

		button:-moz-focusring,
		[type="button"]:-moz-focusring,
		[type="reset"]:-moz-focusring,
		[type="submit"]:-moz-focusring {
			outline: 1px dotted ButtonText;
		}

		fieldset {
			padding: 0.35em 0.75em 0.625em;
		}

		legend {
			box-sizing: border-box;
			color: inherit;
			display: table;
			max-width: 100%;
			padding: 0;
			white-space: normal;
		}

		progress {
			vertical-align: baseline;
		}

		[type="checkbox"],
		[type="radio"] {
			box-sizing: border-box;
			padding: 0;
		}

		[type="number"]::-webkit-inner-spin-button,
		[type="number"]::-webkit-outer-spin-button {
			height: auto;
		}

		[type="search"] {
			-webkit-appearance: textfield;
			outline-offset: -2px;
		}

		[type="search"]::-webkit-search-decoration {
			-webkit-appearance: none;
		}
		::-webkit-file-upload-button {
			-webkit-appearance: button;
			font: inherit;
		}

		[disabled] {
			cursor: default;
		}

		@if mixin-exists(input-fields) {
			@include input-fields() {
				border-radius:0;
				border:0;
				text-rendering: optimizeLegibility;
				-webkit-appearance:none;
				-webkit-border-radius:0;
				-webkit-font-smoothing: antialiased;

				&:focus { outline:0; }

				@if mixin-exists(placeholder) {
					@include placeholder();
				}
			}
		}

	}

	// ------------------------------------------------------------------------ //
	// Embedded Elements
	// ------------------------------------------------------------------------ //

	@if $normalise-embedded-elements {

		img {
			border-style: none;
		}

	}

	// ------------------------------------------------------------------------ //
	// Text Elements
	// ------------------------------------------------------------------------ //

	@if $normalise-text-elements {

		em {
			font-style:italic;
		}

		a {
		  background-color:transparent;
			text-decoration:none;
			color:$text;
		}

		abbr[title] {
		  border-bottom: none;
		  text-decoration: underline;
		  text-decoration: underline dotted;
		}

	  b, strong {
		  font-weight: bold;
		}

		code,	kbd, samp {
		  font-family: monospace, monospace;
		  font-size: 1em;
		}

		small {
		  font-size: 80%;
		}

		sub, sup {
		  font-size: 75%;
		  line-height: 0;
		  position: relative;
		  vertical-align: baseline;
		}

		sub {
		  bottom: -0.25em;
		}

		sup {
		  top: -0.5em;
		}

		textarea {
			resize:none;
			overflow: auto;
		}

	}

}

// ------------------------------------------------------------------------ //
// Emailers
// ------------------------------------------------------------------------ //

@mixin normalise-emailers {

	body {
    margin:0; padding:0;
    -webkit-text-size-adjust:100%;
    -ms-text-size-adjust:100%;
  }

  #bodyTable {
    height:100% $imp;
    margin:0;
    padding:0;
    width:100% $imp;
  }

  .wrapper {  max-width:$max + px; }

  .ExternalClass { width:100%;
    p, span, font, td, div { line-height: 100%; }
  }

  img {
    border:0 none;
    height:auto;
    line-height:100%;
    outline:none;
    text-decoration:none;
    display:block;
    -ms-interpolation-mode: bicubic;
  }

  .imageFix { display:block; }

  a {
    outline:none;
    display:table;
    color:#f0f9ff;
    text-decoration:underline;
    img { border:0 none; }
    &:hover { text-decoration:none $imp; }
    &[x-apple-data-detectors] { color:inherit $imp; text-decoration:none $imp; }
    &[href^="tel"]:hover { text-decoration:none $imp;}
  }

  #outlook a { padding:0; }

  table { mso-table-lspace:0pt; mso-table-rspace:0pt;  }
  table, td { border-collapse:collapse; border-spacing:0;  }
  td, p, span, h1, h2, h3, h4, h5, h6 { font-family:Arial, sans-serif; padding:0; margin:0;  }
  td, p, span { font-size:14px; margin:0; padding:0;  }
  td { overflow:hidden;word-break:normal; }
  th { padding:0;}

  [owa] div { display:block $imp; font-size:1px; line-height:1px;}
  [owa] div button { display:block; font-size:1px; line-height:1px;}

  b, strong{ font-weight:700; }

  .small-print { font-size:11px; color:#d5d6d8; }

}

/// @author Mark Notton
/// @require postcss-inline-svg
/// @see https://github.com/TrySound/postcss-inline-svg

@mixin inline-svg($args...) {

  $defaults : (
    svg          : null,
    fill         : null,
    stroke       : null,
    stroke-width : null,
    path         : 'sprites'
  );

  $settings : get-settings($defaults, $args...);

  $svg          : map-get($settings, svg);
  $fill         : map-get($settings, fill);
  $stroke       : map-get($settings, stroke);
  $stroke-width : map-get($settings, stroke-width);
  $path         : map-get($settings, path);
  $important    : map-get($settings, important);

  @if not is-null($svg) {

    $name     : nth(string-explode($svg, '.'), 1);
    $filename : add-extension($svg, 'svg');

    @at-root (without: media) {
      @svg-load #{$name} url(#{if(is-null($path) or $path == false, '', $path+'/')+$filename}) {
        fill: $fill $important;
        stroke: $stroke $important;
        stroke-width:add-unit($stroke-width) $important;
        @content;
      }
    }

    & { background-image: svg-inline(unquote($name)) $important; }

  }

}

/// Resize an SVG element using it's original dimensions to retain it's aspect ratio
/// @author Mark Notton
/// @param {Number} $original-width - Define the SVG's original width
/// @param {Number} $original-height - Define the SVG's original height
/// @param {Number} $new-width - Define a unitless number to adjust the scale of an SVG.
///                              0.5 is half the original size where 2 is double it's original size.
///                              Using a unit will force the resize of the the element to a specific width,
///                              the height will retain it's existing aspect ratio.
/// @param {Number} $new-height - Define a speicfic height. This will ignore the aspect ratio and force the desired width.
/// @param {Bool|Number|List} $transform-origin - If true, the transform-origin will be placed at the center of the div using px
///                                               You can pass in 2 numbers to define your own Y and X co-ordinates
///                                               Padding in just one number, will apply to both Y and X.
/// @require {Mixin} transform-origin
/// @require {Function} strip
/// @require {Function} is-unit
/// @require {Function} is-null
/// @require {Function} add-unit
/// @example scss - Usage
/// svg { @include svg-size(100, 240, 1.5); }
/// svg { @include svg-size(100, 240, 250px); }
///

@mixin svg-size($args...) {

  $defaults : (
    original-width   : null,
    original-height  : null,
    new-width        : 1,
    new-height       : null,
    transform-origin : true
  );

  $settings : get-settings($defaults, $args...);

  $original-width   : map-get($settings, original-width);
  $original-height  : map-get($settings, original-height);
  $new-width        : map-get($settings, new-width);
  $new-height       : map-get($settings, new-height);
  $transform-origin : map-get($settings, transform-origin);
  $important        : map-get($settings, important);

  // Set Width
  $width : remove-unit($original-width);
  $width-unit : if(not is-null($new-width) and not unitless($new-width), unit($new-width), null);

  @if not is-null($new-width) {

    @if is-empty($width-unit) and is-null($width-unit) {
      $new-width : $width * $new-width;
    } @else {
      $new-width : remove-unit(to-number($new-width));
    }

  }

  // Set Height
  $height : remove-unit($original-height);
  $height-unit : if(not is-null($new-height) and not unitless($new-height), unit($new-height), null);

  @if not is-null($new-height) {

    @if is-empty($height-unit) and is-null($height-unit) {
      $new-height : $height * $new-height;
    } @else {
      $new-height : remove-unit(to-number($new-height));
    }

  }

  // Set by width by height ratio
  @if not is-null($new-height) and is-null($new-width) {

    $new-width : ($new-height / $height) * $width;

  }

  // Set by height by width ratio
  @if not is-null($new-width) and is-null($new-height) {

    $new-height : ($new-width / $width) * $height;

  }

  // Fallback units
  @if is-null($width-unit) and not is-null($height-unit) {
    $width-unit : $height-unit;
  }
  @if is-null($height-unit) and not is-null($width-unit) {
    $height-unit : $width-unit;
  }
  @if is-null($height-unit) and is-null($width-unit) {
    $width-unit :  $default-unit;
    $height-unit : $default-unit;
  }

  // Debug
  // @debug 'Original width: #{$width or 'null'} | New width: #{$new-width or 'null'} | Unit: #{$width-unit}';
  // @debug 'Original height: #{$height or 'null'} | New height: #{$new-height or 'null'} | Unit: #{$height-unit}';
  // @debug '---------';

  // Transform Origin
  @if ( $transform-origin ) {
    @if (is-bool($transform-origin) and $transform-origin == true) {
      @include transform-origin(add-unit($new-width/2, $width-unit) add-unit($new-height/2, $height-unit));
    } @else {
      @include transform-origin($transform-origin);
    }
  }

  // Final Output
  width :  to-number($new-width + $width-unit) $important;
  height : to-number($new-height + $height-unit) $important;

};

/// Add SVG Sprites to an element as per the svg-sprites tool

@mixin svg($class, $size:true) {
  @if $size == true {
    @include svg-size($class);
  } @elseif $size != false {
    @include size($size);
  }
  @extend .svg-#{$class};
  @content;
}

/// Resize an SVG element using it's original dimensions to retain it's aspect ratio using a predefined symbols map
/// This has been designed to fix the aspect ratio issues with older browsers (IE11)
///
/// @author Mark Notton
///
/// @access public
///
/// @param {String} $symbol - Define the symbol name. You can ommit the prefix 'icon-'
/// @param {Number} $new-width - Define a unitless number to adjust the scale of an SVG.
///                              0.5 is half the original size where 2 is double it's original size.
///                              Using a unit will force the resize of the the element to a specific width,
///                              the height will retain it's existing aspect ratio.
/// @param {Number} $new-height - Define a speicfic height. This will ignore the aspect ratio and force the desired width.
/// @param {Bool|Number|List} $transform-origin - If true, the transform-origin will be placed at the center of the div using px
///                                               You can pass in 2 numbers to define your own Y and X co-ordinates
///                                               Padding in just one number, will apply to both Y and X.
/// @require {Mixin} svg-size
/// @require {Mixin} transform-origin
/// @require {Function} strip
/// @require {Function} is-unit
/// @require {Function} is-null
/// @require {Function} add-unit
/// @require {Map} symbols
///
/// $symbols: (
///   logo : (
///     width: 500,
///     height: 59,
///   ),
/// );
///
/// @example scss - Usage
/// svg { @include symbol-size(logo, 240, 1.5); }
/// svg { @include symbol-size(logo, 240, 250px); }
///

@mixin symbol-size($args...) {

  $defaults : (
    symbol           : null,
    new-width        : 1,
    new-height       : null,
    transform-origin : true
  );

  $settings : get-settings($defaults, $args...);

  $symbol           : map-get($settings, symbol);
  $new-width        : map-get($settings, new-width);
  $new-height       : map-get($settings, new-height);
  $transform-origin : map-get($settings, transform-origin);

  @if (map-has-key($symbols, $symbol)) {
    $svg : map-get($symbols, $symbol);
    @if (map-has-key($svg, width) and map-has-key($svg, height)) {
      @include svg-size(map-get($svg, width), map-get($svg, height), $new-width, $new-height, $transform-origin);
    }
  } @else {
    @if $warnings {
      @warn($symbol + ' dimensions were not found in your symbols map.');
    }
  }
}

// Columns for text
@mixin columns($args...) {

  $defaults : (
    count   : 2,
    spacing : if(variable-exists(gap),$gap, 16px),
    width   : 20em
  );

  $settings : get-settings($defaults, $args...);

  $count     : map-get($settings, count);
  $spacing   : map-get($settings, spacing);
  $width     : map-get($settings, width);
  $target    : map-get($settings, target);
  $important : map-get($settings, important);

  column-count : $count $important;

  @if $count == 1 {
    column-width : auto $important;
    column-gap   : normal $important;
  } @else {
    break-inside : avoid $important;
    column-width : add-unit($width) $important;
    column-gap   : add-unit($spacing) $important;
  }
}

@mixin font-face($args...) {

  $defaults : (
    family  : 'Arial',
    file    : null,
    formats : eot svg ttf woff,
  );

  $settings : get-settings($defaults, $args...);

  $family    : map-get($settings, family);
  $file      : map-get($settings, file);
  $formats   : map-get($settings, formats);
  $important : map-get($settings, important);
  
  @font-face {
    font-family : $family $important;
    @if not is-null($file) {
      $source : ();
      @each $format in $formats {
        $source : append($source, url($fonts + add-extension(str-replace($file, $fonts), $format)) format(quote($format)), comma);
      }
      src: $source $important;
    }
  }
}

//This will add a lineheight in percentage that's just a little bit greater than the font
@mixin font-size($args...) {

  $defaults : (
    font-size      : if(variable-exists(font-size),$font-size, 1.6),
    line-height    : null,
    letter-spacing : null,
  );

  $settings : get-settings($defaults, $args...);

  $font-size      : map-get($settings, font-size);
  $line-height    : map-get($settings, line-height);
  $letter-spacing : map-get($settings, letter-spacing);
  $important      : map-get($settings, important);

  font-size      : add-unit($font-size, $default-font-unit) $important;
  line-height    : add-unit($line-height, $default-font-unit) $important;
  letter-spacing : add-unit($letter-spacing, $default-font-unit) $important;

}

// Style up all sorts of text input fields

@mixin input-fields($types : color date datetime datetime-local email month number password search tel text time url week textarea) {

  $new-list:();

  @each $type in $types {
    @if $type == textarea or $type == select {
      $new-list: append($new-list, $type, comma);
    } @else {
      $new-list: append($new-list, #{'input[type=' + $type + ']'}, comma);
    }
  }
  #{$new-list} {
    @content;
  }
}

/// @todo REWRIGHT

@mixin input-style($args...) {

  // ------------------------------------------------------------------------ //
  // Default settings that get merged in with the mass passed through.
  // ------------------------------------------------------------------------ //

  $defaults : (
    note-font-size   : $font-size - 2px,
    note-text-colour : $black,
    static-colour    : #a9a9a9,
    border-radius    : 0,
    error-colour     : $red,
    success-colour   : $green,
    bar-height       : 2px,
    border-width     : 1,
    border-style     : solid,
    input : (
      height    : 50px,
      font-size : $font-size,
      padding   : $gap0 $gap
    ),
    placeholder : (
      style     : halfway,
      padding   : 0 $gap0,
      offset    : $gap0,
      reduction : 0.1
    ),
    active : (
      background-colour  : $white,
      placeholder-colour : primary,
      asterisk-colour    : primary,
      text-colour        : $black,
      note-colour        : #a9a9a9,
      border-colour     : #a9a9a9,
    ),
    inactive : (
      background-colour  : col($white, 0.2),
      placeholder-colour : #a9a9a9,
      asterisk-colour    : #a9a9a9,
      text-colour        : $black,
      note-colour        : #a9a9a9,
      border-colour     : #a9a9a9,
    )
  );

  // ------------------------------------------------------------------------ //
  // All settings exposed
  // ------------------------------------------------------------------------ //

  $settings : get-settings($defaults, $args...);

  $input-height           : add-unit(map-fetch($settings, input, height));
  $input-padding          : map-fetch($settings, input, padding);
  $input-font-size        : add-unit(map-fetch($settings, input, font-size));
  $input-padding-top      : add-unit(get-padding($input-padding, top));
  $input-padding-right    : add-unit(get-padding($input-padding, right));
  $input-padding-bottom   : add-unit(get-padding($input-padding, bottom));
  $input-padding-left     : add-unit(get-padding($input-padding, left));

  $placeholder-padding        : map-fetch($settings, placeholder, padding);
  $placeholder-style          : map-fetch($settings, placeholder, style);
  $placeholder-reduction      : map-fetch($settings, placeholder, reduction);
  $placeholder-offset         : add-unit(map-fetch($settings, placeholder, offset));
  $placeholder-padding-top    : add-unit(get-padding($placeholder-padding, top));
  $placeholder-padding-right  : add-unit(get-padding($placeholder-padding, right));
  $placeholder-padding-bottom : add-unit(get-padding($placeholder-padding, bottom));
  $placeholder-padding-left   : add-unit(get-padding($placeholder-padding, left));

  $note-font-size             : add-unit(map-get($settings, note-font-size));
  $note-text-colour           : map-get($settings, note-text-colour);
  $radius                     : add-unit(map-get($settings, border-radius));
  $form-background            : map-get($settings, form-background-colour);
  $error                      : map-get($settings, error-colour);
  $success                    : map-get($settings, success-colour);
  $bar-height                 : map-get($settings, bar-height);
  $border-width               : add-unit(map-fetch($settings, border-width));
  $border-style               : map-fetch($settings, border-style);

  $active-background      : map-fetch($settings, active, background-colour);
  $active-placeholder     : map-fetch($settings, active, placeholder-colour);
  $active-asterisk        : map-fetch($settings, active, asterisk-colour);
  $active-text            : map-fetch($settings, active, text-colour);
  $active-border-colour   : map-fetch($settings, active, border-colour);

  $inactive-background    : map-fetch($settings, inactive, background-colour);
  $inactive-placeholder   : map-fetch($settings, inactive, placeholder-colour);
  $inactive-asterisk      : map-fetch($settings, inactive, asterisk-colour);
  $inactive-text          : map-fetch($settings, inactive, text-colour);
  $inactive-border-colour : map-fetch($settings, inactive, border-colour);

  // ------------------------------------------------------------------------ //
  // Input field styling
  // ------------------------------------------------------------------------ //

  display:block;
  position:relative;
  background-color:inherit;

  input, textarea, select {
    // Don't show the status bar or asterisk if this field is not required
    &:not(:required) ~ field-status-bar, &:not(:required) ~ sup { display:none; }
  }

  input, textarea {
    // If this field is not empty, not in focus, and is invalid... show the status bar;
    &:not([value=""]):not(:focus) {

      & ~ field-status-bar:before { width:100%; }

      &:invalid {
        & ~ field-status-bar:before {
          @include var(background-color,$error);
        }
      }
    }
  }

  select {
    &::-ms-expand { display: none; }
    &:invalid ~ field-status-bar:before {
      width:0%;
    }
    &:valid ~ field-status-bar:before {
      width:100%;
    }
  }

  label {
    width:100%;
    position:relative;
    display:block;
    background-color:inherit;
    field-placeholder, field-status-bar, field-asterisk {
      position:absolute;
    }
    > *:first-child {
      display:block;
      font-size:$input-font-size;
      padding:$input-padding-top $input-padding-right $input-padding-bottom $input-padding-left;
      border:$border-width $border-style $active-border-colour;
      width:100%; min-height:$input-height;
      @include var(background-color, $active-background);
      @include placeholder(transparent)
      @if remove-unit($radius) != 0 { @include radius($radius); }
      @include transition(background-color border-color color);
      &:not(:required) ~ field-asterisk { display:none; }
      &:valid ~ field-asterisk {
        pointer-events:none;
        &:empty { opacity:0; }
        > svg { @include var(fill, $inactive-asterisk); }
      }

      // -------------------------------------------------------------------- //
      // Inactive
      // -------------------------------------------------------------------- //
      &:placeholder-shown:not(:focus) {
        border:$border-width $border-style $inactive-border-colour;
        @include var(background-color,$inactive-background);
        @include var(color, $inactive-text);
        & ~ field-placeholder {
          left:$input-padding-left;
          top:$input-height/2;
          @if ( $placeholder-style == outside ) {
            top:$input-height/2 - $placeholder-padding-top/2 + $placeholder-padding-bottom/2;
          }
          @include var(color, $inactive-placeholder);
          padding-left:0; padding-right:0;
          @include transform(y -50%, scale 1);
          &:before {
            opacity:0;
          }
        }
        @if ( $placeholder-style == halfway ) {
          & ~ field-placeholder {
            background-color:transparent;
          }
        }
      }

      @include chrome() {
        // This forces the hover state of the autofill styling to respect the label styling
        &:-webkit-autofill, &:-webkit-autofill:hover, &:-webkit-autofill:focus {
          // This tricks Chrome into repainting the styling on hover/focus
          & ~ field-placeholder { opacity:1; }
          @include var(-webkit-text-fill-color, $active-text);
          -webkit-box-shadow: 0 0 0px 1000px if(is-var($active-background), var($active-background), $active-background) inset;
        }
      }
      @content;
    }
  }

  @if ( $placeholder-style == outside ) {
    margin-top:$placeholder-padding-top; ;
  }

  // -------------------------------------------------------------------- //
  // Note
  // -------------------------------------------------------------------- //

  // Change the font colour if the input-field element has an 'error' class
  &.error field-note { color:$error; }

  field-note {
    display:block;
    position:relative;
    color:$note-text-colour;
    margin-top:$input-padding-top/2;
    padding-left:$input-padding-left;
    &:empty { display:none; }
  }

  // ------------------------------------------------------------------------ //
  // Status Bar - Solid block of colour
  // ------------------------------------------------------------------------ //
  field-status-bar {
    width:100%; height:100%;
    top:0; left:0; display:block;
    pointer-events: none;
    overflow:hidden;
    @include radius($radius);
    &:before {
      content:"";
      height:$bar-height;
      width:0%;
      position:absolute;
      bottom:$border-width; left:0;
      display:block;
      @include var(background-color, $success);
      @include transition(width);
    }
  }

  // ------------------------------------------------------------------------ //
  // Field Placeholder & Asterisk - The background line
  // ------------------------------------------------------------------------ //
  field-placeholder, field-asterisk {

    top:0;

    @include flex-container(center center);
    @include transition(transform background-color padding color opacity left top);

    @if ( $placeholder-style == halfway and remove-unit($border-width) >= 1) {
      &:before {
        content:"";
        display:block;
        position:absolute;
        z-index:-1;
        width:100%;
        top:50%; left:0;
        background-color:$active-background;
        @include transition(opacity);
        @if $border-width == 1px {
          height : (1 * $placeholder-reduction) + 1 + px;
        } @elseif $border-width == 2px {
          height : (2 * $placeholder-reduction) + 2 + 1 + px;
        } @else {
          height : ($border-width * $placeholder-reduction + $border-width)
        }
      }
    }
  }

  // ------------------------------------------------------------------------ //
  // Placeholder
  // ------------------------------------------------------------------------ //
  field-placeholder {
    font-size:$input-font-size;
    left:$placeholder-offset;
    pointer-events:none;
    padding:$placeholder-padding-top $placeholder-padding-right $placeholder-padding-bottom $placeholder-padding-left;
    @include y(-50%);
    @include var(color, $active-placeholder);
    @include transform-origin(0 50%);
    @if ( $placeholder-style == halfway ) {
      @include transform(y -50%, scale (1 - $placeholder-reduction));
      left:($placeholder-offset * $placeholder-reduction + $placeholder-offset) + $radius/2;
      padding-right:($placeholder-padding-right * $placeholder-reduction + $placeholder-padding-right);
      padding-left:($placeholder-padding-left * $placeholder-reduction + $placeholder-padding-left);
    } @elseif $placeholder-style == outside {
      @include transform(y -100%, scale (1 - $placeholder-reduction));
    }
  }

  // ------------------------------------------------------------------------ //
  // Required Asterisk and Message
  // ------------------------------------------------------------------------ //
  field-asterisk {

    padding:0 $placeholder-padding-right 0 $placeholder-padding-left;
    font-size:add-unit((remove-unit(to-number($input-font-size))) - (remove-unit(to-number($input-font-size))*$placeholder-reduction)*2);
    @include var(color, $active-asterisk);

    @if ( $placeholder-style == outside ) {
      top:$placeholder-padding-top/2; right:$placeholder-padding-bottom/2;
    }
    @if ( $placeholder-style == halfway ) {
      @include y(-50%);
      top:0; right:$placeholder-padding-right + $radius;
    }

    // Styling if nothing was enetered. Fallback to a static colour inline SVG.
    &:empty {
      @include size(10 + $placeholder-padding-left + $placeholder-padding-right);
      background-image: url("data:image/svg+xml;charset=utf8,%3Csvg version='1.1' style='fill:#{hash-fix(primary)}' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20'%3E%3Cpath d='M0,9.4l1.4-4.6c3.2,1.2,5.5,2.2,7,3.1C8,4.1,7.8,1.5,7.8,0h4.4c-0.1,2.1-0.3,4.8-0.7,7.9c2.1-1.1,4.5-2.1,7.1-3.1L20,9.4 c-2.6,0.9-5.1,1.5-7.5,1.8c1.2,1.1,3,3.2,5.2,6.1L14,20c-1.2-1.7-2.6-4-4.1-6.9c-1.5,3-2.8,5.3-3.9,6.9l-3.6-2.7 c2.3-3.1,4-5.1,5-6.1C4.8,10.7,2.3,10.1,0,9.4z'/%3E%3C/svg%3E"),
      linear-gradient(transparent 50%, $active-border-colour calc(50% - #{$border-width}),$active-border-colour calc(50% + #{$border-width}), transparent calc(50% + #{$border-width}));
      background-position:center center;
      background-repeat:no-repeat;
      background-size:calc(100% - #{$placeholder-padding-right*2}) calc(100% - #{$placeholder-padding-right*2}), 100% 100%;
      &:before { display:none; }
    }

    // Styling if an SVG icon is used (assume it's square)
    > svg {
      @include size(10);
      @include transition(fill);
      @include var(fill, $active-asterisk);
    }

    // The required message styling
    &:after {
      position:absolute;
      opacity:0;
      font-family:Arial;
      padding:$placeholder-padding-top/2 $placeholder-padding-right $placeholder-padding-bottom/2 $placeholder-padding-left;
      right:calc(100% - #{$placeholder-offset}); top:50%;
      @if ( $placeholder-style == halfway ) {
        @include var(background-color, $active-background);
      }
      @include flex-container(center center);
      @include transition(opacity);
      @include y(-50%);
      text-align:right;
      white-space:nowrap;
      content:attr(data-notice);
    }
    &:hover:after { opacity:1; }
  }

  // ------------------------------------------------------------------------ //
  // Password Icon
  // ------------------------------------------------------------------------ //

  $password-toggle-icon-size : 20px;
  password-toggle {
    display:block;
    position:absolute;
    top:50%; right:$input-padding-right;
    @include y(-50%);
    @include size($password-toggle-icon-size);
    &:hover {

    }
    &:empty {
      background-position:center center;
      background-size:center 100% ;
      background-repeat:no-repeat;
    }
  }
  &[data-type="password"] label > *:first-child {
    padding-right:$password-toggle-icon-size + $input-padding-right*2;
    &[type="text"] ~ password-toggle {
       &:empty {
         background-image: url("data:image/svg+xml;charset=utf8,%3Csvg style='fill:#{hash-fix(primary)}' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 576 512'%3E%3Cpath d='M272.702 359.139c-80.483-9.011-136.212-86.886-116.93-167.042l116.93 167.042zM288 392c-102.556 0-192.092-54.701-240-136 21.755-36.917 52.1-68.342 88.344-91.658l-27.541-39.343C67.001 152.234 31.921 188.741 6.646 231.631a47.999 47.999 0 0 0 0 48.739C63.004 376.006 168.14 440 288 440a332.89 332.89 0 0 0 39.648-2.367l-32.021-45.744A284.16 284.16 0 0 1 288 392zm281.354-111.631c-33.232 56.394-83.421 101.742-143.554 129.492l48.116 68.74c3.801 5.429 2.48 12.912-2.949 16.712L450.23 509.83c-5.429 3.801-12.912 2.48-16.712-2.949L102.084 33.399c-3.801-5.429-2.48-12.912 2.949-16.712L125.77 2.17c5.429-3.801 12.912-2.48 16.712 2.949l55.526 79.325C226.612 76.343 256.808 72 288 72c119.86 0 224.996 63.994 281.354 159.631a48.002 48.002 0 0 1 0 48.738zM528 256c-44.157-74.933-123.677-127.27-216.162-135.007C302.042 131.078 296 144.83 296 160c0 30.928 25.072 56 56 56s56-25.072 56-56l-.001-.042c30.632 57.277 16.739 130.26-36.928 171.719l26.695 38.135C452.626 346.551 498.308 306.386 528 256z'/%3E%3C/svg%3E");
       }
     }
    &[type="password"] ~ password-toggle {
      &:empty {
         background-image: url("data:image/svg+xml;charset=utf8,%3Csvg style='fill:#{hash-fix(primary)}' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 576 512'%3E%3Cpath d='M569.354 231.631C512.97 135.949 407.81 72 288 72 168.14 72 63.004 135.994 6.646 231.631a47.999 47.999 0 0 0 0 48.739C63.031 376.051 168.19 440 288 440c119.86 0 224.996-63.994 281.354-159.631a47.997 47.997 0 0 0 0-48.738zM288 392c-102.556 0-192.091-54.701-240-136 44.157-74.933 123.677-127.27 216.162-135.007C273.958 131.078 280 144.83 280 160c0 30.928-25.072 56-56 56s-56-25.072-56-56l.001-.042C157.794 179.043 152 200.844 152 224c0 75.111 60.889 136 136 136s136-60.889 136-136c0-31.031-10.4-59.629-27.895-82.515C451.704 164.638 498.009 205.106 528 256c-47.908 81.299-137.444 136-240 136z'/%3E%3C/svg%3E");
      }
    }
    @include ie() {
      padding-right:$input-padding-right;
      & ~ password-toggle { display:none; }
    }
  }
}

// Place holder animation
@mixin placeholder($args...) {

  $defaults : (
    colour : #a9a9a9,
  );

  $settings : get-settings($defaults, $args...);

  $colour       : map-get($settings, colour);
  $important    : map-get($settings, important);
  $placeholders : ":-webkit-input" ":-moz" "-moz" "-ms-input";

  @each $placeholder in $placeholders {
    &:focus:#{$placeholder}-placeholder {
      color:transparent $important; @content;
    }

    &:#{$placeholder}-placeholder {
      color:$colour $important; @include transition(color);
    }
  }

}

/// Use calc to apply a reponsive fontsize and lineheight
///
/// @author Mark Notton
/// @todo REWRIGHT
/// @access public
///
/// @link https://github.com/seaneking/postcss-responsive-type/blob/master/test/fixtures/default.expected.css
///
/// @param {Arglist} $settings - The following parameters need to added in this order
///
///     @param {number} $max-size  - At the largest breakpoint, this size will be used to fallback on.
///     @param {number} $min-size  - At the small breakpoint, this size will be used to fallback on. default $font-size;
///     @param {number} $min - breakpoint to start the responsive font-size. Default $large breakpoint
///     @param {number} $max - breakpoint to stop the responsive font-size. Default $max breakpoint
///     @param {boolean} $line-height - If true (default), include a similar calculation for the line height.
///     @param {list} $line-height & $line-height-percent - Including a list, with 'true' and a number will effect the
///     line-height value relative to the max-size variable.
///
/// @require {function} increase-by-percentage
/// @require {function} add-unit
/// @require {function} is-null
/// @require {function} is-number
/// @require {function} is-bool
///
/// @example scss - Usage
///   @include responsive-fontsize(28);
///   @include responsive-fontsize(28, 20, 1200, 1920, false);
///   @include responsive-fontsize(28, 20, 1200, 1920, true 20); // line-height will be 20% greater than the given max-size of 28.
///
/// @example css - CSS Output
///  font-size: calc(20px + (28 - 20) * ((100vw - 1200px) / (1920 - 1200)));
///  line-height: calc(28px + (28 - 20) * ((100vw - 1200px) / (1920 - 1200)));
///
/// @media screen and (min-width: 1920px) {
///   .foo {
///     font-size: 28px;
///     line-height: initial;
///   }
/// }
/// @media screen and (max-width: 1200px) {
///   .foo {
///     font-size: 20px;
///   }
/// }
@mixin responsive-fontsize($settings...) {

  $max-size            : null;
  $min-size            : null;
  $max-lineheight      : null;
  $min-lineheight      : null;
  $min           : null;
  $max           : null;
  $line-height         : false;
  $line-height-percent : null;

  @each $setting in $settings {


    @if is-number($setting) {
      // If each param is number, define a variable in this order
      @if is-null($max-size) {
        $max-size : $setting;
      } @elseif is-null($min-size) {
        $min-size : $setting;
      } @elseif is-null($min) {
        $min : $setting;
      } @elseif is-null($max) {
        $max : $setting;
      }
    } @elseif is-bool($setting) {
      // true or false booleans are passed to the line-height variable
      $line-height : $setting;
    } @elseif is-list($setting) {
      // List items
      @if is-number(nth($setting, 1)) {
        // If the first item in a list is a number assume this is size
        $size : nth($setting, 1);
        @if is-null($max-size) {
          $max-size : $size;
        } @elseif is-null($min-size) {
          $min-size : $size;
        }
        // If the secon item in a list is a number assume this is line-height
        $lineheight : nth($setting, 2);
        @if is-null($max-lineheight) {
          $max-lineheight : $lineheight;
        } @elseif is-null($min-lineheight) {
          $min-lineheight : $lineheight;
        }

      } @else {
        @each $set in $setting {
          @if is-bool($set) {
            $line-height : $set;
          } @elseif is-number($set) and is-null($line-height-percent) {
            $line-height-percent : $set;

          }
        }
      }

      // @each $set in $setting {
      //   @if is-bool($set) {
      //     $line-height : $set;
      //   } @elseif is-number($set) and is-null($line-height-percent) {
      //     $line-height-percent : $set;
      //   }
      // }
    }
  }

  $max-size  : if(is-null($max-size ), ($font-size * 2), $max-size);
  $min-size  : if(is-null($min-size ), $font-size, $min-size);
  $min : if(is-null($min), $large, $min);
  $max : if(is-null($max), $max, $max);
  $line-height-percent : if($line-height == true and is-null($line-height-percent), 30, $line-height-percent);

  // font-size: calc(#{add-unit($min-size)} + #{$max-size - $min-size} * (100vw - #{add-unit($min)}) / #{$max - $min});

  @if $line-height == true {
    line-height: calc(#{add-unit(increase-by-percentage($min-size, $line-height-percent))} + #{$max-size - $min-size} * (100vw - #{add-unit($min)}) / #{$max - $min});
  }

  @include break($min, max) {
    font-size:add-unit($min-size);
    @if not is-null($min-lineheight) {
      line-height:add-unit($min-lineheight);
    } @elseif $line-height == true {
      line-height:initial;
    }
  }

  @include break($max, min) {
    font-size:add-unit($max-size);
    @if not is-null($max-lineheight) {
      line-height:add-unit($max-lineheight);
    } @elseif $line-height == true {
      line-height:initial;
    }
  }

}


@mixin responsive-font($settings...) {
  @include responsive-fontsize($settings...);
}

@mixin selection($args...) {

  $defaults : (
    background : if(variable-exists(selection), $selection, #B2D3FB),
    color      : if(variable-exists(selection), $selection, #B2D3FB),
    opacity    : 0.8,
  );

  $settings : get-settings($defaults, $args...);

  $background : map-get($settings, background);
  $colour     : map-get($settings, colour);
  $opacity    : map-get($settings, opacity);
  $important  : map-get($settings, important);

  @if ($colour == null or $colour == $background) {
    $fallback-value : get-variable-colour-value($background);
    $colour:colour-contrast($fallback-value);
  }

  ::-moz-selection {
    color: $colour $important;
    @include var(background-color, $background, $important);
    @content;
  }
  
  ::selection {
    color: $colour $important;
    @include var(background-color, $background, $important);
    @content;
  }
}

/// Text Shadow
/// @param {Size} $x [2px] - X
/// @param {Size} $y [2px] - Y
/// @param {Size} $blur [2px] - Blur
/// @param {Color} $color [rgba(0,0,0,.4)] - Color

@mixin text-shadow($args...) {

  $defaults : (
    x      : 0,
    y      : 0,
    blur   : 10,
    colour : rgba(0,0,0,0.4)
  );

  $settings : get-settings($defaults, $args...);

  $x         : map-get($settings, x);
  $y         : map-get($settings, y);
  $blur      : map-get($settings, blur);
  $colour    : map-get($settings, colour);
  $important : map-get($settings, important);

  text-shadow: add-unit($x) add-unit($y) add-unit($blur) $color $important;

}
