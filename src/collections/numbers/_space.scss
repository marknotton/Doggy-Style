/// Generate space from a generic unit to help continuity of paddings, margins,
/// gutters etc... throughout your design.
///
/// @param {Number} $size
///   Enter the amount of times you want to multiply the default padding variable
///
/// @param {String} $direction
///   The unit you want the spacing to be defined as. Default is vh
///
/// @require {Variable} $spacing global variable
///
/// @example scss - Usage
///   margin-top:space(2);
///
/// @return {number} with units
@function space($size:1, $direction:vh, $global-unit:$space) {
  @return if($size == 0, to-number(add-unit($global-unit/2, $direction, true)), to-number(add-unit($global-unit*$size, $direction, true)));
}

/// Create a spacer relative to the viewport height or width. Whilst also adding
/// a calc method to ensure that space is always at least the size of a solid unit (px)
///
/// @param {Number} $size
///   Enter the amount of viewport units to add. 3 = 3% of the viewport height
///
/// @param {Number} $min
///   Enter the amount of pixels the spcaer should never go below;
///
/// @param {String} $direction
///   The unit you want the spacing to be defined as. Default is vh
///
/// @example scss - Usage
///   margin-top:spacer(2, 30);
///
/// @example css - Output
/// margin-top:calc(2vh + 30px);
///
/// @return {number} with units
@function spacer($size:$space, $min:$gap, $direction:vh) {

  $size : add-unit($size, $direction);
  $min : add-unit($min);

  @return calc(#{$size} + #{$min});
}
