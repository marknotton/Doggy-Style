/// Resize an SVG element using it's original dimensions to retain it's aspect ratio
/// @author Mark Notton
/// @param {Number} $original-width - Define the SVG's original width
/// @param {Number} $original-height - Define the SVG's original height
/// @param {Number} $new-width - Define a unitless number to adjust the scale of an SVG.
///                              0.5 is half the original size where 2 is double it's original size.
///                              Using a unit will force the resize of the the element to a specific width,
///                              the height will retain it's existing aspect ratio.
/// @param {Number} $new-height - Define a speicfic height. This will ignore the aspect ratio and force the desired width.
/// @param {Bool|Number|List} $transform-origin - If true, the transform-origin will be placed at the center of the div using px
///                                               You can pass in 2 numbers to define your own Y and X co-ordinates
///                                               Padding in just one number, will apply to both Y and X.
/// @require {Mixin} transform-origin
/// @require {Function} strip
/// @require {Function} is-unit
/// @require {Function} is-null
/// @require {Function} add-unit
/// @example scss - Usage
/// svg { @include svg-size(100, 240, 1.5); }
/// svg { @include svg-size(100, 240, 250px); }
///

@mixin svg-size($args...) {

  $defaults : (
    original-width   : null,
    original-height  : null,
    new-width        : null,
    new-height       : null,
    transform-origin : true
  );

  $settings : get-settings($defaults, $args...);

  $original-width   : map-get($settings, original-width);
  $original-height  : map-get($settings, original-height);
  $new-width        : map-get($settings, new-width);
  $new-height       : map-get($settings, new-height);
  $transform-origin : map-get($settings, transform-origin);
  $important        : map-get($settings, important);

  // Set Width
  $width : remove-unit($original-width);
  $width-unit : if(not is-null($new-width) and not unitless($new-width), unit($new-width), null);

  @if not is-null($new-width) {

    @if is-empty($width-unit) and is-null($width-unit) {
      $new-width : $width * $new-width;
    } @else {
      $new-width : remove-unit(to-number($new-width));
    }

  }

  // Set Height
  $height : remove-unit($original-height);
  $height-unit : if(not is-null($new-height) and not unitless($new-height), unit($new-height), null);

  @if not is-null($new-height) {

    @if is-empty($height-unit) and is-null($height-unit) {
      $new-height : $height * $new-height;
    } @else {
      $new-height : remove-unit(to-number($new-height));
    }

  }

  // Set by width by height ratio
  @if not is-null($new-height) and is-null($new-width) {

    $new-width : ($new-height / $height) * $width;

  }

  // Set by height by width ratio
  @if not is-null($new-width) and is-null($new-height) {

    $new-height : ($new-width / $width) * $height;

  }

  // Fallback units
  @if is-null($width-unit) and not is-null($height-unit) {
    $width-unit : $height-unit;
  }
  @if is-null($height-unit) and not is-null($width-unit) {
    $height-unit : $width-unit;
  }
  @if is-null($height-unit) and is-null($width-unit) {
    $width-unit :  $default-unit;
    $height-unit : $default-unit;
  }

  // Debug
  // @debug 'Original width: #{$width or 'null'} | New width: #{$new-width or 'null'} | Unit: #{$width-unit}';
  // @debug 'Original height: #{$height or 'null'} | New height: #{$new-height or 'null'} | Unit: #{$height-unit}';
  // @debug '---------';

  // Transform Origin
  @if ( $transform-origin ) {
    @if (is-bool($transform-origin) and $transform-origin == true) {
      @include transform-origin(add-unit($new-width/2, $width-unit) add-unit($new-height/2, $height-unit));
    } @else {
      @include transform-origin($transform-origin);
    }
  }

  // Final Output
  width :  to-number($new-width + $width-unit) $important;
  height : to-number($new-height + $height-unit) $important;

};
