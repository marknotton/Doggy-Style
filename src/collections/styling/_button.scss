/// Define a buttons default and hover styling. Includes a support for css variables and inverting
///
/// @author Mark Notton
///

///
/// @param {list | colour | css variable} $static-colours :
///         Pass in the 2 colours (without a comma). First colour is for text,
///         the second is for the background. You can define a css variable if
///         you have a $variables sass map defined. You may pass in one colour if
///         you later define this button to be inverted (as backgrounds aren't necessary)
/// @param {list | colour | css variable} $hover-colours : Same as the previous param.
///         However this param is optional. Ommiting this option will just reverse
///         the colours from the first param. Inverted options can support static
///         and background colours on hover.
/// @param {bool|string} $borderless - 'borderless' or 'false' will exclude any border colour
/// @param {string} $inverted - 'inverted' or 'true' will trigger an inverted styling.
///         This isn't a simple reverse of the first $static-colours and $hover-colours options.
///         This assumes you want the static state to have no background colour at all.
///
/// @example 1 scss - Usage
/// .button1 {
///   red: button(hite, blue white);
/// }
/// .button2 {
///   red: button(blue white, invert);
/// }
///

@mixin button($args...) {

  $static     : ();
  $hover      : ();
  $inverted   : false;
  $borderless : false;

  $static-text       : white;
  $static-background : $blue;
  $hover-text        : $blue;
  $hover-background  : white;

  @each $settings in $args {

    @if is-list($settings) or is-color($settings) or variable-exists(variables) and map-has-key($variables, $settings){
      @if length($static) == 0 {
        $static : $settings;
      } @else if length($hover) == 0 {
        $hover : $settings;
      }
    } @else if is-bool($settings) {
      $borderless : not $settings;
    } @else if is-string($settings) {
      @if $settings == invert {
        $inverted : true;
      } @elseif $settings == 'borderless' {
        $borderless : true;
      }
    }
  }

  @if length($static) == 2 {
    $static-text : first($static);
    @if $inverted != true {
      $static-background : last($static);
    }
    @if $inverted == true and $warnings {
      @warn "You must defined two static colours for an inverted button. The second ("+$static-background+") colour will be ignored";
    }
  } @else if $inverted == true {
    $static-text : first($static);
  } @else {
    @error "You must define two static colours in button(col1 col2). The first is for the text colour. The second for the background colour";
  }

  @if length($hover) == 2 {
    $hover-text       : first($hover);
    $hover-background : last($hover);
  } @else if length($hover) == 1 {
    $hover-text       : $hover;
    $hover-background : col($hover, 0);
  } @else {
    $hover-text       : $static-background;
    $hover-background : $static-text;
  }

  // IVERTED COLOURS
  @if $inverted == true {

    @if variable-exists(variables) and map-has-key($variables, $static-text) {
        $static-text:(colorstatic-text);
      @if not $borderless { border-color: var($static-text); }
    } @else {
      color:$static-text;
      @if not $borderless { border-color:$static-text; }
    }

    &:hover {

      @if variable-exists(variables) and map-has-key($variables, $hover-background) {
        background-color: var($hover-background);
      } @else {
        background-color:$hover-background;
      }

      @if variable-exists(variables) and map-has-key($variables, $hover-text) {
        color: var($hover-text);
        @if not $borderless { border-color: var($hover-text); }
      } @else {
        color:$hover-text;
        @if not $borderless { border-color:$hover-text; }
      }

    }

  } @else {
    // STANDARD COLOURS
    @if variable-exists(variables) and map-has-key($variables, $static-background) {
      background-color: var($static-background);
    } @else {
      background-color:$static-background;
    }

    @if variable-exists(variables) and map-has-key($variables, $static-text) {
      color: var($static-text);
    } @else {
      color:$static-text;
    }

    &:hover {

      @if variable-exists(variables) and map-has-key($variables, $hover-background) {
        background-color: var($hover-background);
      } @else {
        background-color:$hover-background;
      }

      @if variable-exists(variables) and map-has-key($variables, $hover-text) {
        color: var($hover-text);
        @if not $borderless { border-color: var($hover-text); }
      } @else {
        color:$hover-text;
        @if not $borderless { border-color:$hover-text; }
      }

    }

  }

  @content;

}
