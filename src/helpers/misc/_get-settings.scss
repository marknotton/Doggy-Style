////////////////////////////////////////////////////////////////////////////////
/// Get Settings                                                   #get-settings
////////////////////////////////////////////////////////////////////////////////

/// Have all mixins accept the same pattern on arguments and manage all defaults
/// data and fallbacks. Use either a list, map, or keywords.
///
/// @name Get Settings
/// @author Mark Notton
/// @access public
/// @return {map}
/// @todo Make deep merging optional
/// @example
/// @mixin myMixin($args...) {
///    $defaults : (
///      name   : 'unknown',
///      age    : '99',
///      gender : null,
///      data   : ('foo':'bar')
///    );
///    $settings : get-settings($defaults, $args...);
///    @debug $settings;
/// }
/// @include myMixin('Mark', '31', male, ('wibble':'wobble'), important);
/// @include myMixin((name:'Lizzie', gender:female, data:('wibble':'wobble')));
/// @include myMixin($name:'Andy', $age:'36', $gender:male);
/// @include myMixin(important);
///
/// @output
/// name: "Mark", age: "31", gender: male, data: ("foo": "bar", "wibble": "wobble"), important: !important
/// name: "Lizzie", age: "99", gender: female, data: ("foo": "bar", "wibble": "wobble"), important: null
/// name: "Andy", age: "36", gender: male, data: ("foo": "bar"), important: null
/// name: "unknown", age: "99", gender: null, data: ("foo": "bar"), important: !important

@function get-settings($defaults, $args.../*, $deep */) {

  // Defaults
  $important : false;
  $settings  : null;
  $deep: if(is-empty(nth($args, -1)), false, true);

  // Checks if the keywords synatic has been used
  @if length($args) == 0 and is-map(keywords($args)) {
    $args : keywords($args);
  }

  // If no arguments were defined, just return the defaults.
  @if is-empty($args) {

    $settings : $defaults;

  } @else {

    // Quick check to determine if the map was originally passed as keywords or not.
    $map : if(is-map($args), $args, nth($args, 1));

    @if not is-empty($map) and is-map($map) {

      // First argument is a Map

      @if $deep == true  {
        // If $deep is true (default), then perform a deep merge with the defaults
        $settings : map-deep-merge($defaults, $map);
      } @else {
        // Otherwise do a standard merge.
        $settings : map-merge($defaults, $map);
      }

      // Check if the map has important explicitly defined within it.
      @if contains(map-keys($settings), important) {
        $important : map-get($settings, important);
        // If important is found, remove it from the settings list.
        $settings : map-remove($settings, important);
      }

      // If a map was passed, check the second parameter for
      // important as they may be seperated.
      @if length($args) > 1 and is-important(nth($args, 2)) {
        $important : true;
      }

    } @else {

      // Arguments that are passed as a standard list

      $default-keys : map-keys($defaults);
      $default-values : map-values($defaults);

      // Convert all items into lists to help looping.
      $arguments : arglist-to-list($args...);

      // Check and remove 'important' if it was defined.
      @if contains($arguments, important) {
        $important : true;
        $arguments : remove($arguments, important);
      }

      // Run through all the arguments
      @if ( length($arguments) > 0 ) {
        @for $i from 1 through length($arguments) {

          @if $i <= length($default-keys) {
            // Check if the amount of arguements is less than the
            // amount of defaults before setting the value
            @if is-null(nth($arguments, $i)) or contains((default, defaults), nth($arguments, $i)) {
              // Passing in null, default or defaults will use the default value.
              $defaults : map-set($defaults, nth($default-keys, $i), nth($default-values, $i));
            } @elseif is-map(nth($arguments, $i)) {
              @if $deep == true  {
                // Do a deep-merge for map data
                $defaults : map-set($defaults, nth($default-keys, $i), map-deep-merge(nth($default-values, $i), nth($arguments, $i)));
              } @else {
                // Do a normal merge for map data
                $defaults : map-set($defaults, nth($default-keys, $i), map-merge(nth($default-values, $i), nth($arguments, $i)));
              }
            } @else {
              // Add value to the associated argument number from the defaults key.
              $defaults : map-set($defaults, nth($default-keys, $i), nth($arguments, $i));
            }
          } @else {
            // If there are more arguments, define a map key with "argument",
            // followed by the argument index.
            $defaults : map-set($defaults, #{'argument' + $i}, nth($arguments, $i));
          }
        }
        $settings : $defaults;
      } @else {
        // This is a fallback should no arguments be passed except for 'important'
        $settings : $defaults;
      }
    }

  }

  // Lastely, include important key and value at the end of the map.
  $settings : map-set($settings, important, if($important, $imp, null));

  @return $settings;

}
