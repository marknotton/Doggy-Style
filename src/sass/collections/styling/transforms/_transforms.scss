/// Transforms mixin that allows various syntax's
///
/// @author Mark Notton
///

///
/// @param {Map} $settings - Each argument should consist of a transform type and it's value
///
/// @require {variable} transform-types
/// @require {variable} transform-values
/// @require {function} arglist-to-list
/// @require {function} contains
/// @require {function} is-function
/// @require {function} is-string
///
/// @example scss - Usage
///   Doggy Style Syntax
///   @include transform(rotate 90, scale 0.8);
///   Bourbon Syntax
///   @include transform(rotate(90deg) scale(0.8));
///   Generic Syntax
///   @include transform(rotate(90deg), scale(0.8));
///
/// @example css - CSS Output
///    -webkit-transform: rotate(90deg) scale(0.8);
///    -moz-transform: rotate(90deg) scale(0.8);
///    transform: rotate(90deg) scale(0.8);
///

@mixin transform($settings...) {

  $transforms : ();
  $important : null;

  @if not contains($transform-values, $settings, true) and length($settings) >= 1 {

    $settings-lists : arglist-to-list($settings);

    @each $settings in $settings-lists {

      @if is-function($settings) {
        $settings : function-to-list($settings);
      }

      $transform : null;

      $value : ();

      // Check for transforms
      @each $setting in $settings {
        @if is-string($setting) and contains(merge($transform-types, x y X Y), $setting) {
          $transform : $setting;
        }
      }

      // Check and validate all transform types
      @each $setting in $settings {

        @if not is-string($setting) {
          @if contains($transform, (translate translateY translateX translateZ translate3d y x Y X perspective)) {
            // Values that require a unit
            @each $val in $setting {
              @if ($transform == 'x' or $transform == 'X') {
                $transform : translateX;
              } @elseif ($transform == 'y' or $transform == 'Y') {
                $transform : translateY;
              }
              $value : append($value, add-unit($val), comma);
            }
          } @elseif contains($transform, (rotate rotateX rotateY rotateZ rotate3d skew skewX skewY)) {
            // Values that require an angle
            @each $val in $setting {
              @if $transform != rotate3d {
                $value : append($value, add-unit($val, deg), comma);
              } @else {
                $value : append($value, $val, comma);
              }
            }
          } @elseif contains($transform, (scale)) {
            // Values that require an angle
            @each $val in $setting {
                $value : append($value, $val, comma);
            }
          } @else {
            @if is-bool($setting) {
              $important : $setting;
            } @else {
              // All other values
              $value : append($value, $setting);
            }
          }
        } @elseif contains($transform-values, $setting) {
          // Values that are strings and are global values
          $value : append($value, $setting);
        }
      }

      // Append transform and value to the transforms list
      @if $transform != null {
        $transforms : append($transforms, $transform+"("+$value+")");
      }

    }
  } @else {
   $transforms : nth($settings, 1);
  }

  transform: $transforms $important;

}
