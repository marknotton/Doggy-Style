// featured-images {
//     featured-image{ opacity: 0;
//         &:first-of-type{ opacity: 1; }
//     }
  // @include keyframes(gallery-animation) {
  //   0% { opacity:0; }
  //   100% { opacity:1; }
  // }
  // @include gallery((
  //   image     : 'featured-image',
  //   animation : gallery-animation, // Name of the keyframe animation that will effect each image one at a time
  //   first     : false,             // On load, fade the first image in, or have it show immediately.
  //   loop      : infinite,          // How many times you want it to loop. Use 'infinite' for... infinite
  //   autoplay  : true,              // Do you want the slides to start on load
  //   limit     : 3,                 // Max amount of images. Keep this as low as possible. Bigger numbers, means excessive css markup.
  //   duration  : 4,                 // How long each image will display for
  //   speed     : 2,                 // Speed of transition
  //   ease      : ease-in-out,       // Ease method
  // ));
// }

$default-gallery-settings : (
  image     : gallery-image,     // To define the scope of the gallery, add a class or id (with their appropriate prefixes, # or .)
  animation : gallery-animation, // Name of the keyframe animation that will effect each image one at a time
  first     : true,              // On load, fade the first image in, or have it show immediately.
  loop      : infinite,          // How many times you want it to loop. Use 'infinite' for... infinite
  autoplay  : true,              // Do you want the slides to start on load
  limit     : 10,                // Max amount of images. Keep this as low as possible. Bigger numbers, means excessive css markup.
  duration  : 4,                 // How long each image will display for
  speed     : 1,                 // Speed of transition
  ease      : ease-in-out,       // Ease method
);

@mixin gallery($gallery-settings:null) {

  $settings : ();

  // If a map has not been passed, give error
  @if not is-map($gallery-settings) and $gallery-settings != null {

    @error "Gallery settings need to be passed as a map";

  } @else {

    // If absolutely no settings have been passed, just use all the defaults.
    @if $gallery-settings == null {

      $settings : $default-gallery-settings;

    } @else {

      // Create a list of keys for the current settings that have been passed
      $existing-gallery-settings : map-keys($gallery-settings);

      // Add existing settings to the new-settings map
      @each $setting in $existing-gallery-settings {
        // Only allow settings exist in the $default-gallery-settings
        @if contains(map-keys($default-gallery-settings), $setting) {

          $set : null;

          // Check is certain strings are valid
          @if is-string(map-get($gallery-settings, $setting)) {
            @if contains(image animation loop ease, $setting) {
              @if $setting != loop {
                $set : $setting;
              } @elseif $setting == loop and map-get($gallery-settings, loop) == infinite {
                // Special check for loop, incase the default gets changed
                $set : $setting;
              }
            }
          }

          // Check is certain booleans are valid
          @elseif is-bool(map-get($gallery-settings, $setting)) {
            @if contains(first autoplay, $setting) {
              $set : $setting;
            }
          }

          // Check is certain numbers are valid
          @elseif is-number(map-get($gallery-settings, $setting)) {
            @if contains(limit loop duration speed, $setting) {
              $set : $setting;
            }
          }

          // Add setting to new settings if it has passed validation
          @if $set != null {
            $settings : map-set($settings, $setting, map-get($gallery-settings,  $setting));
          }

        }
      }

      // Check which ones are missing, and add defaults
      @each $setting in map-keys($default-gallery-settings) {
        @if not map-has-key($settings, $setting) {
          $settings : map-set($settings, $setting, map-get($default-gallery-settings,  $setting));
        }
      }

    }

    $image     : map-get($settings, image);
    $animation : map-get($settings, animation);
    $first     : map-get($settings, first);
    $loop      : map-get($settings, loop);
    $autoplay  : map-get($settings, autoplay);
    $limit     : map-get($settings, limit);
    $duration  : map-get($settings, duration);
    $speed     : map-get($settings, speed);
    $ease      : map-get($settings, ease);

    & {

      &.pause {
        #{$image} { @include prefixer(animation-play-state, paused); }
      }

      // Set a few custom properties for javascript
      @include custom-property((
        gallery-duration : $duration,
        gallery-speed : $speed,
        gallery-autoplay : $autoplay,
        gallery-loop : _min-max-number($loop, 1, 10)
      ));

      @for $count from 1 through $limit {
        #{$image}:first-child:nth-last-child(#{$count}),
        #{$image}:first-child:nth-last-child(#{$count}) ~ #{$image} {

          @for $i from (if($first, 1, 2)) through $count {
            &:nth-of-type(#{$i}) {
              $delay : ($duration*($i - 1))+($speed*($i - 1));
              @include prefixer(animation-delay, add-unit($delay, s), webkit);
            }
          }

        }
      }

      #{$image} {
        @if $autoplay == false { animation-play-state:paused; }
        @include prefixer(animation-name, $animation, webkit);
        @include prefixer(animation-timing-function, $ease, webkit);
        @include prefixer(animation-fill-mode, both, webkit);
        @include prefixer(animation-duration, add-unit($speed, s), webkit);
      }
    }

  }
}
