// Quick way of adding a calc for width only.
@mixin width($calc){
  $formula:null;
  $symbol:null;
  @each $calculation in $calc {
    $symbol:first-character($calculation);
    @if ( $symbol == '-' or $symbol == '+' or $symbol == '/' or $symbol == '*') {
      $formula:$formula str-insert(#{$calculation}, " ", 2);
    } @else {
      $formula:$formula $calculation;
    }
  }
  @include calc("width", $formula);
}

// Animation Transitions
@function old-transitions($ani, $duration, $ease, $delay) {
  $css : "";
  $i : 1;
  @each $animation in $ani {
    // Because transforms use different vendor properties within the transition value we have to check and adjust the pre-fix for each animation.
    // Also, wether you use translate, rotate, scale, or skew only the same "transform" value needs to be added.
    @if $animation == "translate" or $animation == "rotate" or $animation == "scale" or $animation == "skew" or $animation == "transform" {
      $animation: #{"transform"};
    }
    @if $i == length($ani) {
      // if there is just one animation or it is the last animation then don't include the comma
      $css:#{$css} #{$animation} #{$duration}#{s} #{$ease} #{$delay}#{s};
    } @else {
      // if there are multiple animations include a comma
      $css:#{$css} #{$animation} #{$duration}#{s} #{$ease} #{$delay}#{s}#{","};
    }
    $i: $i + 1;
  }
  @return $css;
}

@mixin smart-fontsize-old($standSize:$fs, $maxSize:$standSize*2, $minSize:$standSize/2, $unit:"vw") {
  // Standard
  @if (length($standSize) == 1) {
    @include fontsize($standSize);
  } @else {
    @include fontsize(nth($standSize, 1), nth($standSize, 2));
  }
  
  // Max
  $max-size: nth($maxSize, 1);
  $max-line: null;
  $max-break:$large;
  @if (length($maxSize) == 3 ) { $max-break: nth($maxSize, 3); }
  @if (length($maxSize) >= 2 ) { $max-line: nth($maxSize, 2) + px} @else {  $max-line: #{($max-size/10) + $unit} }

  @include break($max-break) {
    font-size:#{($max-size/10) + $unit};
    line-height:$max-line;
  }

  // Min
  $min-size: nth($minSize, 1);
  $min-line: null;
  $min-break:$medium;
  @if (length($minSize) == 3 ) { $min-break: nth($minSize, 3); }
  @if (length($minSize) >= 2 ) { $min-line: nth($minSize, 2); }

  @include break($min-break) {
    @if ($min-line == null) {
      @include fontsize($min-size);
    } @else {
      @include fontsize($min-size, $min-line);
    }
  }
}

// ANIMATION
// This allows you to define particular animation transition properties for specific classes without resorting to "All" (which is bad for browser support).
// • Use "@include ani()" to use the default settings, or to have more control do something like "@include ani(color, 1, 0.5, bounce-in)". The paremeters are: [property, duration, ease, delay] ...must be that order!
// • To use multiple transition values within one include do something like this: "@include ani((color, top, resize), 0.6, easein, 1)" or stick with default values "@include ani((color, top, margin));"
// • There is nothing stopping you from using the Ceasers CSS easing animtion tool (http://matthewlein.com/ceaser), includeing the sass version. Example: @include ani((color, top, padding), def, ceaser($easeOutBack));
// • Transforms are supported too, so you can animate translate, rotate, scale, or skew (matrix has been excluded for now).
@mixin old-ani($animation:all, $delay:0, $duration:0.2, $ease:ease-in-out) {
  // You can parse "null" if you want to manually resort to the following pre-defined defaults.
  // Example: @include ani((color, top, padding), null, null, bounce-in)

  @if ($animation == null){ $animation:all;}
  @if ($duration == null) { $duration:0.3;}
  @if ($ease == null)     { $ease:ease-in-out;}
  @if ($delay == null)    { $delay:0;}

  // Checks to make sure if a value is set to "0" that the output doesn't include the "s" at the end.
  @if ($duration == 0) { $duration:0 } @else { $duration:$duration#{s} };
  @if ($delay == 0) { $delay:null } @else { $delay:$delay#{s} };

  // Generate the CSS
  $transitions:transitions($animation, $duration, $ease, $delay); 

  -webkit-transition:$transitions;
  transition:$transitions;
}

// Create Arrows/Triangles in any direction.
@mixin old-arrow($width:20, $height:20, $colour:$red, $direction:right, $sudo:before) {

  $colour: if($colour == null, rc(1), $colour);

  &:#{$sudo} {
    content:""; height:0; width:0; position:absolute; pointer-events:none; border-style:solid; border-color:transparent; border-width:0;
    
    // Directions
    @if ($direction == "left") {
      left:-$width + px;
      border-width:$height/2 + px $width + px $height/2 + px 0;
      border-right-color:$colour;
      top:50%;
      margin-top:-$height/2 + px;
    }
    @if ($direction == "right") {
      right:-$width + px;
      border-width:$height/2 + px 0 $height/2 + px $width + px;
      border-left-color:$colour;
      top:50%;
      margin-top:-$height/2 + px;
    }
    @if ($direction == "top") {
      top:-$height + px;
      border-width:0 $width/2 + px $height + px $width/2 + px;
      border-bottom-color:$colour;
      left:50%;
      margin-left:-$width/2 + px;
    }
    @if ($direction == "bottom") {
      bottom:-$height + px;
      border-width:$height + px $width/2 + px 0 $width/2 + px;
      border-top-color:$colour;
      left:50%;
      margin-left:-$width/2 + px;
    }
    @if ($direction == "top left") {
      top:0;
      left:0;
      border-width:$height + px $width + px 0 0;
      border-top-color:$colour;
    }
    @if ($direction == "top right") {
      top:0;
      right:0;
      border-width:0 $width + px $height + px 0;
      border-right-color:$colour 
    }
    @if ($direction == "bottom left"){
      bottom:0;
      left:0;
      border-width:$height + px 0 0 $width + px;
      border-left-color:$colour;
    }
    @if ($direction == "bottom right") {
      bottom:0;
      right:0;
      border-width:0 0 $height + px $width + px;
      border-bottom-color:$colour;
    }

    // Center
    @if(str-index(#{$direction}, "center")) {
      top:50%;
      left:50%;
      margin-left:-$width/2 + px;
      margin-top:-$height/2 + px;
    }
    @if ($direction == "center")       {
      border-width:$height/2 + px 0 $height/2 + px $width + px;
      border-left-color:$colour;
    }
    @if ($direction == "center right") {
      border-width:$height/2 + px 0 $height/2 + px $width + px;
      border-left-color:$colour;
    }
    @if ($direction == "center bottom"){
      border-width:$height + px $width/2 + px 0 $width/2 + px;
      border-top-color:$colour;
    }
    @if ($direction == "center left")  {
      border-width:$height/2 + px $width + px $height/2 + px 0;
      border-right-color:$colour;
    }
    @if ($direction == "center top")   {
      border-width:0 $width/2 + px $height + px $width/2 + px;
      border-bottom-color:$colour;
    }
    
    @content;
  }
}