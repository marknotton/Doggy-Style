
@mixin triangle-classic($args...) {  

  // Deafult Triangle Settings
  $size      : ();
  $sudo      : before;
  $colour    : random-colour();
  $direction : right;
  $center    : false;
  $triangle  : map-fetch($triangle-settings, $direction, points);
  
  // Deafult Position Settings
  $position  : true;
  $x-pos     : nth(map-fetch($triangle-settings, $direction, x), 1);
  $x-amount  : nth(map-fetch($triangle-settings, $direction, x), 2);
  $y-pos     : nth(map-fetch($triangle-settings, $direction, y), 1);
  $y-amount  : nth(map-fetch($triangle-settings, $direction, y), 2);
  
  $args: if(length($args) > 0, $args, null); 

  // Loop through and check all arguments for any special options.

  @for $i from 1 through length($args) {
    @each $option in nth($args, $i) {
      // If there is an arugment, with just one value, and it's set to true or false.
      // Assume this is the position condition. 
      @if type-of($option) == bool and length(nth($args, $i)) == 1 {
        $position : $option;
      }
    }
  } 

  // Check Triangle Settings
  @each $rule in nth($args, 1) {    

    @if type-of($rule) == number or is-calc($rule) and length($size) < 2 {
      $size : append($size, $rule);
    }
    @elseif type-of($rule) == color {
      $colour : $rule;
    }
    @elseif type-of($rule) == string {
      @if $rule == before or $rule == after {
        $sudo : unquote($rule);
      }
      @elseif $rule == center {
        $center : true;
      }
      @elseif map-has-key($triangle-settings, $rule) {
        $direction: $rule;

        $x:map-fetch($triangle-settings, $direction, x);
        $x-pos:nth($x, 1); 
        $x-amount:nth($x, 2);

        $y:map-fetch($triangle-settings, $direction, y);
        $y-pos:nth($y, 1); 
        $y-amount:nth($y, 2);
      }
    }
  }

  // Deafult size set if it remains empty
  $size : if(length($size) == 0, 50, $size);
  
  // Define width and height
  $width : nth($size, 1);
  $height : if(length($size) == 1, $width, nth($size, 2));
  
  // Define all settings with strings
  
  &#{_sudo($sudo)} {
    content:"";
    position:absolute;
    top:0; 
    left:0;     
    height:0; 
    width:0;
    border-style:solid; 
    border-color:transparent;
    border-width:0;
    pointer-events:none;

    @if $center {
      top:calc(50% - #{addUnit($height)}/2); left:calc(50% - #{addUnit($width)}/2);
    } @elseif ($position) {
      @if $direction == up or $direction == down {
        #{$y-pos}:calc(#{$y-amount} - #{addUnit($width)}/2);
        #{$x-pos}:$x-amount;
      }
      @elseif $direction == left {
        #{$y-pos}:$y-amount;
        #{$x-pos}:calc(#{$x-amount} - #{addUnit($height)}/2);
      }
      @elseif $direction == right {
        #{$y-pos}:calc(#{$y-amount} - #{addUnit($height)}/2);
        #{$x-pos}:$x-amount;
      }
      @else {
        #{$y-pos}:$y-amount;
        #{$x-pos}:$x-amount;
      }
    }

    // Directions
    @if $direction == left {
      border-width:addUnit($height/2) addUnit($width) addUnit($height/2) 0;
    }
    @elseif $direction == right {
      border-width:addUnit($height/2) 0 addUnit($height/2) addUnit($width);
    }
    @elseif $direction == up {
      border-width:0 addUnit($width/2) addUnit($height) addUnit($width/2);
    }
    @elseif $direction == down {
      border-width:addUnit($height) addUnit($width/2) 0 addUnit($width/2);
    }
    @elseif $direction == top-left {
      border-width:addUnit($height) addUnit($width) 0 0;
    }
    @elseif $direction == top-right {
      border-width:0 addUnit($width) addUnit($height) 0;
    }
    @elseif $direction == bottom-left {
      border-width:addUnit($height) 0 0 addUnit($width);
    }
    @elseif $direction == bottom-right {
      border-width:0 0 addUnit($height) addUnit($width);
    }

     @if $direction == up { $direction : top; }
     @if $direction == down { $direction : bottom; }

     border-#{opposite-direction($direction)}-color:$colour;

    @content;
  }
}