/// A collection of common aspect ratios
///
/// @access public
///
/// @type number

// Common Aspect Ratios
$ratio-4-3       : 75%;
$ratio-16-9      : 56.25%;
$ratio-16-10     : 62.5%;

// Common Resolution Aspect Ratios
$ratio-800-600   : $ratio-4-3;
$ratio-1024-768  : $ratio-4-3;
$ratio-1152-864  : $ratio-4-3;
$ratio-1600-1200 : $ratio-4-3;

$ratio-1280-720  : $ratio-16-9;
$ratio-1360-768  : $ratio-16-9;
$ratio-1366-768  : $ratio-16-9;
$ratio-1600-900  : $ratio-16-9;
$ratio-1920-1080 : $ratio-16-9;
$ratio-2560-1440 : $ratio-16-9;
$ratio-3840-2160 : $ratio-16-9;
$ratio-7680-4320 : $ratio-16-9;

$ratio-1280-800  : $ratio-16-10;
$ratio-1440-900  : $ratio-16-10;
$ratio-1680-1050 : $ratio-16-10;
$ratio-1920-1200 : $ratio-16-10;
$ratio-2560-1600 : $ratio-16-10;

$ratio-2k        : $ratio-1920-1080;
$ratio-4k        : $ratio-3840-2160;
$ratio-8k        : $ratio-7680-4320;


/// Create a pseudo element which will retain a parent elements' aspect ratio responsively. 
///
/// @author Mark Notton
///
/// @access public
///
/// @param {number | list} $ratio - Use a predefined variable, directly enter a percentage, or pass in one or two numbers to be calculated.
///
/// @param {string} $sudo - Set the type of pseudo to use. Defaults to "before".
///
/// @require {function} sudo
/// @require {function} _unit-fallback
/// @require {function} first
/// @require {function} second
/// @require {function} is-percentage
///
/// @example scss - Usage
/// .foo { 
///   @include aspect-ratio($ratio-16-9);
/// }
///
/// .bar { 
///   @include aspect-ratio(2 1, after);
/// }
///
/// @example css - CSS output
/// .foo:before {
///   content: "";
///   display: block;
///   padding-top: 56.25%;
/// }
///
/// .bar:after {
///   content: "";
///   display: block;
///   padding-top: 50%;
/// }

@mixin aspect-ratio($ratio:1, $sudo:before) {

  $width  : check(first($ratio), 1); 
  $height : check(second($ratio), first($ratio));

  &#{_sudo($sudo)} { 
    content:"";
    display:block;
    padding-top: if(is-percentage($width), $width, percentage($height / $width)); 
  }
}