// Create an arrow using SVG
//
/// @warning Does not work in IE 10 or below
//
// @param {list} $args
//   In any order and without comma delimination, add any of the follwing arrow settings
//   Colour { color } - Hex or RGBA
//   Width { int } - First intiger is used as the width. 'px' units are used by defualt if not specified.
//   Height { int } - Second intiger is used as the height. 'px' units are used by defualt if not specified. Width is used if second unit is not found.
//   Direction { string } - top-left, up, top-right, left, right, bottom-left, down, bottom-right.
//   Center { string } - In addition to the direction, you can add the unquote string 'center' to center the arrow
//   Sudo { string } - Use an unquote string 'before' or 'after' to distinguish what sudo element to use
//
// @param {bool} $position
//    Determines wether the arrow should be positioned at all
//
// @example {scss} - Usage
//   @include arrow(50% 20 purple right);
//   @include arrow(100 100 green up center after);
//
// @return {sudo}

// TODO: Add second parameter tha allows for stroke preferences.

@mixin arrow($args:null, $position:true) {
  
  // Deafult settings
  $size      : ();
  $sudo      : before;
  $colour    : random-colour();
  $direction : right;
  $center    : false;
  $arrow     : map-fetch($arrow-settings, $direction points);
  $x-pos     : nth(map-fetch($arrow-settings, $direction x), 1);
  $x-amount  : nth(map-fetch($arrow-settings, $direction x), 2);
  $y-pos     : nth(map-fetch($arrow-settings, $direction y), 1);
  $y-amount  : nth(map-fetch($arrow-settings, $direction y), 2);
  
  // Check Settings
  @each $rule in $args {   
    @if type-of($rule) == number and length($size) < 2 {
      $size : append($size, $rule);
    }
    @elseif type-of($rule) == color {
      $colour : $rule;
    }
    @elseif type-of($rule) == string {
      @if $rule == before or $rule == after {
        $sudo : unquote($rule);
      }
      @elseif $rule == center {
        $center : true;
      }
      @elseif map-has-key($arrow-settings, $rule) {
        $direction: $rule;
        $arrow: map-fetch($arrow-settings, $direction points);

        $x:map-fetch($arrow-settings, $direction x);
        $x-pos:nth($x, 1); 
        $x-amount:nth($x, 2);

        $y:map-fetch($arrow-settings, $direction y);
        $y-pos:nth($y, 1); 
        $y-amount:nth($y, 2);
      }
    }
  }
  
  // Deafult size set if it remains empty
  $size : if(length($size) == 0, 50, $size);
  
  // Define width and height
  $width : nth($size, 1);
  $height : if(length($size) == 1, $width, nth($size, 2));

  &:#{$sudo} { 
    content:""; 
    @include size($width $height);
    position:absolute;
    pointer-events:none;
    background-image:svg("<svg xmlns='http://www.w3.org/2000/svg' preserveAspectRatio='none' viewBox='0 0 100 100'><polygon points='"+$arrow+"' fill='"+$colour+"'/></svg>");
    background-size:100% 100%;
    background-repeat:no-repeat;
    @if $center {
      top:calc(50% - #{addUnit($height)}/2); left:calc(50% - #{addUnit($width)}/2);
    } @elseif ($position) {
      @if $direction == up or $direction == down {
        #{$y-pos}:calc(#{$y-amount} - #{addUnit($width)}/2);
        #{$x-pos}:$x-amount;
      }
      @elseif $direction == left {
        #{$y-pos}:$y-amount;
        #{$x-pos}:calc(#{$x-amount} - #{addUnit($height)}/2);
      }
      @elseif $direction == right {
        #{$y-pos}:calc(#{$y-amount} - #{addUnit($height)}/2);
        #{$x-pos}:$x-amount;
      }
      @else {
        #{$y-pos}:$y-amount;
        #{$x-pos}:$x-amount;
      }
    }
    
    @include arrow-for-ie($width $height $colour $direction);

    @content;
  }
}

$arrow-settings: (
  top-left : (
    points : "0,100 0,0 100,0",
    y : ( left , 0 ),
    x : ( top , 0 )
  ),
  up : (
    points : "100,100 0,100 50,0",
    y : ( left , 50% ),
    x : ( bottom , 100% )
  ),
  top-right : (
    points : "100,100 0,0 100,0",
    y : ( right , 0 ),
    x : ( top , 0 )
  ),
  left : (
    points : "100,100 0,50 100,0",
    y : ( right , 100% ),
    x : ( top , 50% )
  ),
  right : (
    points : "0,100 0,0 100,50",
    y : ( top , 50% ),
    x : ( left , 100% )
  ),
  bottom-left : (
    points : "100,100 0,100 0,0",
    y : ( left , 0 ),
    x : ( bottom , 0 )
  ),
  down : (
    points : "0,0 100,0 50,100",
    y : ( left , 50% ),
    x : ( top , 100% )
  ),
  bottom-right : (
    points : "0,100 100,0 100,100",
    y : ( bottom , 0 ),
    x : ( right , 0 )
  ),
);

// Fallback for IE Users
@mixin arrow-for-ie($args) {  
  @include ie {
    $width     : nth($args, 1);
    $height    : nth($args, 2);
    $colour    : nth($args, 3);
    $direction : nth($args, 4);
    
    background-image:none $imp;
    height:0; 
    width:0;
    border-style:solid; 
    border-color:transparent;
    border-width:0;
      
    // Directions
    @if $direction == left {
      border-width:addUnit($height/2) addUnit($width) addUnit($height/2) 0;
      border-right-color:$colour;
    }
    @elseif $direction == right {
      border-width:addUnit($height/2) 0 addUnit($height/2) addUnit($width);
      border-left-color:$colour;
    }
    @elseif $direction == up {
      border-width:0 addUnit($width/2) addUnit($height) addUnit($width/2);
      border-bottom-color:$colour;
    }
    @elseif $direction == down {
      border-width:addUnit($height) addUnit($width/2) 0 addUnit($width/2);
      border-top-color:$colour;
    }
    @elseif $direction == top-left {
      border-width:addUnit($height) addUnit($width) 0 0;
      border-top-color:$colour;
    }
    @elseif $direction == top-right {
      border-width:0 addUnit($width) addUnit($height) 0;
      border-right-color:$colour 
    }
    @elseif $direction == bottom-left {
      border-width:addUnit($height) 0 0 addUnit($width);
      border-left-color:$colour;
    }
    @elseif $direction == bottom-right {
      border-width:0 0 addUnit($height) addUnit($width);
      border-bottom-color:$colour;
    } 
  }
}


