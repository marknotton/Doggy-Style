/// An alternative to the native rgba function. With a few extra checks.
///
/// @param {list} $settings
///   In any order and without comma delimination, add any of the follwing settings
///   {color} - The first instance of a colour will be used
///   {opacity} - The first instance of a number will be used as the opacity
/// 
/// @param {bool} $hash
///   If true, the '#' will be replaced with an encoded version '%23'. 
///   This will not take effect if the colour is a native css colour word (red, green, blue), 
///   or if any opacity has been defined. This is for bespoke circomstances like when using inline svg's and fill/strokes
///
/// @link http://stackoverflow.com/questions/28588050/how-to-use-a-hex-value-for-svg-in-firefox#answer-28588194
///
/// @return {color}

@function colour($settings:null, $hash:false) { 

  // Deafult settings
  $colour  : random-colour();
  $opacity : 1;
  
  // Check Settings
  @each $setting in $settings {
    @if is-colour($setting) {
      $colour : $setting;
    }
    @elseif is-number($setting) {
      $opacity : strip($setting);
    }
  }

  @if $hash and not str-index(#{$colour}, 'rgba') {
    @return string-replace(to-string(rgba($colour, $opacity)), '#', '%23');
  }
  @elseif str-index(#{$colour}, 'rgba') {
    @return $colour;
  }
  @else {
    @return rgba($colour, $opacity);
  }
}

/// @alias colour
///
/// @access public
/// 
/// @require {function} colour
///
/// @return {bool}

@function color($settings:null, $hash:false) {
  @return colour($settings, $hash);
}


/// @alias colour
///
/// @access public
/// 
/// @require {function} colour
///
/// @return {bool}

@function col($settings:null, $hash:false) {
  @return colour($settings, $hash);
}