/// An alternative to the native rgba function. With a few extra checks.
///
/// @author Mark Notton
///
/// @access public
///
/// @param {list} $settings
///   In any order and without comma delimination, add any of the follwing settings
///   {color} - The first instance of a colour will be used
///   {opacity} - The first instance of a number will be used as the opacity
/// 
/// @param {opacity} $opacity
///   Perhaps a little over engineered, but if you mistype the function and set the opacity as a seperate 
///   parameter rather than part of the settings list. This function will still work. 
///
/// @return {color}

@function colour($settings:null, $opacity:null) { 

  // Deafult settings
  $colour  : random-colour();
  $new-opacity : if($opacity == null, 1, $opacity);
  
  // Check Settings
  @each $setting in $settings {
    @if is-colour($setting) {
      $colour : $setting;
    }
    @elseif is-number($setting) {
      @if $opacity == null {
        $new-opacity : strip($setting);
      } @else {
        $new-opacity : $opacity;
      }
    }
  }

  @if str-index(#{$colour}, 'rgba') {
    @return $colour;
  }
  @else {
    @return rgba($colour, $new-opacity);
  }
}

/// @alias colour
///
/// @access public
/// 
/// @require {function} colour
///
/// @return {bool}

@function color($settings:null, $opacity:null) {
  @return colour($settings, $opacity);
}


/// @alias colour
///
/// @access public
/// 
/// @require {function} colour
///
/// @return {bool}

@function col($settings:null, $opacity:null) {
  @return colour($settings, $opacity);
}