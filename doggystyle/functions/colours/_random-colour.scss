/// Random colour.
///
/// @author Pankaj Parashar
///
/// @access public
///
/// @author https://pankajparashar.com/posts/random-colors-sass/
///
/// @param {number} $opacity - Amend the opacity of the colour that is returned. Default is 1
///
/// @example scss - Usage
///   random-colour(0.5);
///
/// @example css - Output
///   rgba(38, 153, 180, 0.5);
///
/// @return {color}

@function random-colour($opacity:1) {
  @return rgba(random(256) - 1, random(256) - 1, random(256) - 1, $opacity);
}


/// @alias random-colour
///
/// @access public
/// 
/// @require {function} random-colour
///
/// @return {color}

@function random-color($opacity:0.3) {
  @return random-colour($opacity);
}


/// @alias random-colour
///
/// @access public
/// 
/// @require {function} random-colour
///
/// @return {color}

@function rc($opacity:0.3) {
  @return random-colour($opacity);
}


/// Random colours on a range of elements. Ideal for developers wanting to visually see elements quickly
///
/// @author Mark Notton
///
/// @access public
///
/// @param {number} $amount - How many items are there. Default is 10
///
/// @param {string} $target - Add any children elements you want to target
///
/// @param {number} $opacity - The opacity strength. Default is 0.5
///
/// @example scss - Usage
///   li { random-colours(5, '.link'); }
///
/// @example css - Output
///   li:nth-of-type(1) .link { background-color: rgba(166, 213, 186, 0.5); }
///   li:nth-of-type(2) .link { background-color: rgba(118, 134, 177, 0.5); }
///   li:nth-of-type(3) .link { background-color: rgba(223, 47, 35, 0.5); }
///   li:nth-of-type(4) .link { background-color: rgba(175, 255, 1, 0.5); }
///   li:nth-of-type(5) .link { background-color: rgba(100, 108, 80, 0.5); }
///
/// @return {*}

@mixin random-colours($amount:10, $target:null, $opacity:0.5) {
  @for $i from 1 through $amount {
    &:nth-of-type(#{$i}) #{$target} { background-color:random-colour($opacity); }
  }
}