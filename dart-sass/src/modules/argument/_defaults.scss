////////////////////////////////////////////////////////////////////////////////
/// Get Default Settings
////////////////////////////////////////////////////////////////////////////////

/// Have all mixins accept the same pattern of arguments and manage all defaults
/// data and fallbacks. Use either a list, map, or keywords.
///
/// @name Get Settings
/// @author Mark Notton

/// @return {map}
/// @example
/// @mixin myMixin($args...) {
///    $defaults : (
///      name   : 'unknown',
///      age    : '99',
///      gender : null,
///      data   : ('foo':'bar')
///    );
///    $settings : get-settings($defaults, $args...);
///    // $settings : get-settings($defaults, (deep:false, debug:true), $args...);
///    @debug $settings;
/// }
/// @include myMixin('Mark', '31', male, ('wibble':'wobble'), important);
/// @include myMixin((name:'Lizzie', gender:female, data:('wibble':'wobble')));
/// @include myMixin($name:'Andy', $age:'36', $gender:male);
/// @include myMixin(important);
///
/// @output
/// name: "Mark", age: "31", gender: male, data: ("foo": "bar", "wibble": "wobble"), important: !important
/// name: "Lizzie", age: "99", gender: female, data: ("foo": "bar", "wibble": "wobble"), important: null
/// name: "Andy", age: "36", gender: male, data: ("foo": "bar"), important: null
/// name: "unknown", age: "99", gender: null, data: ("foo": "bar"), important: !important
// NOTE Passing a list of arguments in the keywords format will return incorrect
// settings data if a special options map prefixes 'args...' within the Mixin.

@use '../modules/meta';
@use '../modules/list';
@use '../modules/map';
@use '../modules/string';
// @use '../modules/is';
@use '../modules/is/null' as *;
@use '../modules/is/empty' as *;
@use '../modules/is/important' as *;
@use '../modules/is/map' as *;
@use '../modules/to' as *;

@function defaults($defaults, $args...) {

  // ===========================================================================
  // Initial settings
  // ===========================================================================

  $important : false;
  $settings  : null;
  $defaults  : if(is-null($defaults), (), $defaults);
  $backup    : $args;

  // Special options on how to manage the arguments ----------------------------

  $options : (
    deep      : true,
    prefix    : 'argument',
    important : null,
    debug     : false
  );

  // ===========================================================================
  //  Revert to defaults if no arguments are passed
  // ===========================================================================

  @if list.length($args) == 0 and list.length(meta.keywords($args)) == 0 {

    @if map.get($options, debug ) { @debug "NO ARGUMENTS DETECTED"; }

    $settings : $defaults;

  } @else {

    // =========================================================================
    //  Keywords
    // =========================================================================
    // Convert keywords into a useable map

    @if list.length(meta.keywords($args)) > 0 {

      @if map.get($options, debug ) { @debug "KEYWORDS DETECTED"; }

      $args : meta.keywords($args);

      @if map.has-key($args, options) {
        $options : map.merge($options, map.get($args, options));
        $args : map.remove($args, options);
      }

    }

    // =========================================================================
    //  Special Options
    // =========================================================================

    // Special options at start ------------------------------------------------
    // Check if the fisrt args element exists, is a map, and contains any of the
    // $options keys.If it does, assume these are bespoke options relative to
    // the mixin that called this function.

    @if not is-empty(list.nth($args, 1)) and is-map(list.nth($args, 1)) and list.contains(map.keys(list.nth($args, 1)), map.keys($options)) {

      @if map.get($options, debug ) { @debug 'Special options defined at start of the arguments'; }

      $options : map.merge($options, list.nth($args, 1));
      $args    : list.slice($args, 2, list.length($args));

    }

    // Special options at end -------------------------------------------------
    // Essentially the same as above, but checks the last argument for options.
    // This allows for a little syntax suger when passing aguments on a per-maxin call basis

    @else if not is-empty(list.nth($args, -1)) and is-map(list.nth($args, -1)) and
            list.contains(map.keys(list.nth($args, -1)), map.keys($options)) {

      @if map.get($options, debug ) { @debug 'Special options defined at end of the arguments'; }

      $options : map.merge($options, list.nth($args, -1));
      $args    : list.slice($args, 1, list.length($args) - 1)
    }

    // =========================================================================
    //  Maps
    // =========================================================================

    // Quick check to determine if the map was originally passed as keywords or not.
    $map : if(is-map($args), $args, list.nth($args, 1));

    @if not is-empty($map) and is-map($map) {

      @if map.get($options, debug ) { @debug "MAP DETECTED"; }

    /// @todo: Check for cast type and required types

      @if map.get($options, deep) == true  {
        // If deep is true (default), then perform a deep merge with the defaults
        $settings : map.deep-merge($defaults, $map);
      } @else {
        // Otherwise do a standard merge.
        $settings : map.merge($defaults, $map);
      }

      // Check if the map has important explicitly defined within it.
      @if list.contains(map.keys($settings), important) {
        $important : map.get($settings, important);
        // If important is found, remove it from the settings list.
        $settings : map.remove($settings, important);
      }

      // If a map was passed, check the second parameter for
      // important as they may be seperated.
      @if list.length($args) > 1 and is-important(list.nth($args, 2)) {
        $important : true;
      }

    } @else {

    // =========================================================================
    //  List
    // =========================================================================

      @if map.get($options, debug ) { @debug "LIST DETECTED"; }

      // Arguments that are passed as a standard list

      $default-keys : map.keys($defaults);
      $default-values : map.values($defaults);

      // Convert all items into lists to help looping.
      $arguments : to-list($args...);

      // Check and remove 'important' if it was defined.
      @if list.contains($arguments, important) {
        $important : true;
        $arguments : remove($arguments, important);
      }

      // Run through all the arguments
      @if ( list.length($arguments) > 0 ) {
        @for $i from 1 through list.length($arguments) {

          @if $i <= list.length($default-keys) {
            // Check if the amount of arguements is less than the
            // amount of defaults before setting the value
            @if is-null(list.nth($arguments, $i)) or list.contains((default, defaults), list.nth($arguments, $i)) {
              // Passing in null, default or defaults will use the default value.
              $defaults : map.set($defaults, list.nth($default-keys, $i), list.nth($default-values, $i));
            } @else if is-map(list.nth($arguments, $i)) {
              @if map.get($options, deep) == true  {
                // Do a deep-merge for map data
                $defaults : map.set($defaults, list.nth($default-keys, $i), map.deep-merge(list.nth($default-values, $i), list.nth($arguments, $i)));
              } @else {
                // Do a normal merge for map data
                $defaults : map.set($defaults, list.nth($default-keys, $i), map.merge(list.nth($default-values, $i), list.nth($arguments, $i)));
              }
            } @else {
              // Add value to the associated argument number from the defaults key.
              $defaults : map.set($defaults, list.nth($default-keys, $i), list.nth($arguments, $i));
            }
          } @else {
            // If there are more arguments, define a map key with "argument",
            // followed by the argument index.
            $defaults : map.set($defaults, #{map.get($options, prefix) + $i}, list.nth($arguments, $i));
          }
        }
        $settings : $defaults;
      } @else {
        // This is a fallback should no arguments be passed except for 'important'
        $settings : $defaults;
      }
    }

  }

  // ===========================================================================
  //  Return Defaults settings
  // ===========================================================================

  $settings : map.set($settings, defaults, $defaults);
  
  // ===========================================================================
  //  Return Settings
  // ===========================================================================

  // Lastely, include important key and value at the end of the map.
  $settings : map.set($settings, important, if($important, !important, map.get($options, important)));

  @if map.get($options, debug ) {
    // @debug #{'Settings:'} $settings;
    // @debug #{'Options:'} $options;
  }

  @return $settings;

}
